
ADC_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00002f80  00003014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800174  00800174  00003128  2**0
                  ALLOC
  3 .stab         00001e9c  00000000  00000000  00003128  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bcc  00000000  00000000  00004fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000832d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000096b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a88c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000aa4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ad42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <main>
      8a:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 42 17 	jmp	0x2e84	; 0x2e84 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 42 17 	jmp	0x2e84	; 0x2e84 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 58       	subi	r30, 0x8C	; 140
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:


volatile uint16 g_ADC_RETURN_VALU = 0;


void ADC_init(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,REFS0);/*Reference Selection Bits (AVCC with external capacitor at AREF pin)*/
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24

	CLEAR_BIT(ADMUX,MUX0);/*Analog Channel and Gain Selection Bits (0)*/
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8e 7f       	andi	r24, 0xFE	; 254
     e5e:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,MUX1);
     e60:	a7 e2       	ldi	r26, 0x27	; 39
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e7 e2       	ldi	r30, 0x27	; 39
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8d 7f       	andi	r24, 0xFD	; 253
     e6c:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,MUX2);
     e6e:	a7 e2       	ldi	r26, 0x27	; 39
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e7 e2       	ldi	r30, 0x27	; 39
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8b 7f       	andi	r24, 0xFB	; 251
     e7a:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,MUX3);
     e7c:	a7 e2       	ldi	r26, 0x27	; 39
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e7 e2       	ldi	r30, 0x27	; 39
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	87 7f       	andi	r24, 0xF7	; 247
     e88:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,MUX4);
     e8a:	a7 e2       	ldi	r26, 0x27	; 39
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e7 e2       	ldi	r30, 0x27	; 39
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8f 7e       	andi	r24, 0xEF	; 239
     e96:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,ADLAR);
     e98:	a7 e2       	ldi	r26, 0x27	; 39
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e7 e2       	ldi	r30, 0x27	; 39
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 7d       	andi	r24, 0xDF	; 223
     ea4:	8c 93       	st	X, r24


	//CLEAR_BIT(ADCSRA,ADIE);/*CLEAR ADC Interrupt Enable to zero*/
	SET_BIT(ADCSRA,ADIE);/*CLEAR ADC Interrupt Enable to one*/
     ea6:	a6 e2       	ldi	r26, 0x26	; 38
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e6 e2       	ldi	r30, 0x26	; 38
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 60       	ori	r24, 0x08	; 8
     eb2:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADPS0);/*ADC Prescaler Selections Division Factor 128 [ 1 1 1 ]*/
     eb4:	a6 e2       	ldi	r26, 0x26	; 38
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e6 e2       	ldi	r30, 0x26	; 38
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	81 60       	ori	r24, 0x01	; 1
     ec0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     ec2:	a6 e2       	ldi	r26, 0x26	; 38
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e6 e2       	ldi	r30, 0x26	; 38
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	82 60       	ori	r24, 0x02	; 2
     ece:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     ed0:	a6 e2       	ldi	r26, 0x26	; 38
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e6 e2       	ldi	r30, 0x26	; 38
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	84 60       	ori	r24, 0x04	; 4
     edc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN);/*ADC Enable*/
     ede:	a6 e2       	ldi	r26, 0x26	; 38
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e6 e2       	ldi	r30, 0x26	; 38
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 68       	ori	r24, 0x80	; 128
     eea:	8c 93       	st	X, r24
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <__vector_16>:
//	}
//	SET_BIT(ADCSRA,ADIF);/*clear ADIF flag*/
//	return ADC;/*return data*/
//}

ISR(ADC_vect){
     ef2:	1f 92       	push	r1
     ef4:	0f 92       	push	r0
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	0f 92       	push	r0
     efa:	11 24       	eor	r1, r1
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	g_ADC_RETURN_VALU=ADC;
     f0c:	e4 e2       	ldi	r30, 0x24	; 36
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	91 81       	ldd	r25, Z+1	; 0x01
     f14:	90 93 75 01 	sts	0x0175, r25
     f18:	80 93 74 01 	sts	0x0174, r24
}
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	ff 91       	pop	r31
     f22:	ef 91       	pop	r30
     f24:	9f 91       	pop	r25
     f26:	8f 91       	pop	r24
     f28:	0f 90       	pop	r0
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	0f 90       	pop	r0
     f2e:	1f 90       	pop	r1
     f30:	18 95       	reti

00000f32 <ADC_readChannel>:
void ADC_readChannel(uint8 ch_num){
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	0f 92       	push	r0
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0b11100000)| ch_num; /*insert ch_num*/
     f3e:	a7 e2       	ldi	r26, 0x27	; 39
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e7 e2       	ldi	r30, 0x27	; 39
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	98 2f       	mov	r25, r24
     f4a:	90 7e       	andi	r25, 0xE0	; 224
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	89 2b       	or	r24, r25
     f50:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);/*ADC Start Conversion*/
     f52:	a6 e2       	ldi	r26, 0x26	; 38
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e6 e2       	ldi	r30, 0x26	; 38
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 64       	ori	r24, 0x40	; 64
     f5e:	8c 93       	st	X, r24
}
     f60:	0f 90       	pop	r0
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <GPIO_setupPinDirection+0x6>
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <GPIO_setupPinDirection+0x8>
     f70:	0f 92       	push	r0
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	6a 83       	std	Y+2, r22	; 0x02
     f7a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	88 30       	cpi	r24, 0x08	; 8
     f80:	08 f0       	brcs	.+2      	; 0xf84 <GPIO_setupPinDirection+0x1c>
     f82:	d5 c0       	rjmp	.+426    	; 0x112e <GPIO_setupPinDirection+0x1c6>
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	84 30       	cpi	r24, 0x04	; 4
     f88:	08 f0       	brcs	.+2      	; 0xf8c <GPIO_setupPinDirection+0x24>
     f8a:	d1 c0       	rjmp	.+418    	; 0x112e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	3d 83       	std	Y+5, r19	; 0x05
     f94:	2c 83       	std	Y+4, r18	; 0x04
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	9d 81       	ldd	r25, Y+5	; 0x05
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	91 05       	cpc	r25, r1
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <GPIO_setupPinDirection+0x3a>
     fa0:	43 c0       	rjmp	.+134    	; 0x1028 <GPIO_setupPinDirection+0xc0>
     fa2:	2c 81       	ldd	r18, Y+4	; 0x04
     fa4:	3d 81       	ldd	r19, Y+5	; 0x05
     fa6:	22 30       	cpi	r18, 0x02	; 2
     fa8:	31 05       	cpc	r19, r1
     faa:	2c f4       	brge	.+10     	; 0xfb6 <GPIO_setupPinDirection+0x4e>
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	9d 81       	ldd	r25, Y+5	; 0x05
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	71 f0       	breq	.+28     	; 0xfd0 <GPIO_setupPinDirection+0x68>
     fb4:	bc c0       	rjmp	.+376    	; 0x112e <GPIO_setupPinDirection+0x1c6>
     fb6:	2c 81       	ldd	r18, Y+4	; 0x04
     fb8:	3d 81       	ldd	r19, Y+5	; 0x05
     fba:	22 30       	cpi	r18, 0x02	; 2
     fbc:	31 05       	cpc	r19, r1
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <GPIO_setupPinDirection+0x5a>
     fc0:	5f c0       	rjmp	.+190    	; 0x1080 <GPIO_setupPinDirection+0x118>
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	9d 81       	ldd	r25, Y+5	; 0x05
     fc6:	83 30       	cpi	r24, 0x03	; 3
     fc8:	91 05       	cpc	r25, r1
     fca:	09 f4       	brne	.+2      	; 0xfce <GPIO_setupPinDirection+0x66>
     fcc:	85 c0       	rjmp	.+266    	; 0x10d8 <GPIO_setupPinDirection+0x170>
     fce:	af c0       	rjmp	.+350    	; 0x112e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	a1 f4       	brne	.+40     	; 0xffe <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     fd6:	aa e3       	ldi	r26, 0x3A	; 58
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ea e3       	ldi	r30, 0x3A	; 58
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <GPIO_setupPinDirection+0x8c>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <GPIO_setupPinDirection+0x88>
     ff8:	84 2b       	or	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	98 c0       	rjmp	.+304    	; 0x112e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     ffe:	aa e3       	ldi	r26, 0x3A	; 58
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ea e3       	ldi	r30, 0x3A	; 58
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <GPIO_setupPinDirection+0xb4>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <GPIO_setupPinDirection+0xb0>
    1020:	80 95       	com	r24
    1022:	84 23       	and	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	83 c0       	rjmp	.+262    	; 0x112e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	a1 f4       	brne	.+40     	; 0x1056 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    102e:	a7 e3       	ldi	r26, 0x37	; 55
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e7 e3       	ldi	r30, 0x37	; 55
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <GPIO_setupPinDirection+0xe4>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <GPIO_setupPinDirection+0xe0>
    1050:	84 2b       	or	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	6c c0       	rjmp	.+216    	; 0x112e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1056:	a7 e3       	ldi	r26, 0x37	; 55
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e7 e3       	ldi	r30, 0x37	; 55
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <GPIO_setupPinDirection+0x10c>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <GPIO_setupPinDirection+0x108>
    1078:	80 95       	com	r24
    107a:	84 23       	and	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	57 c0       	rjmp	.+174    	; 0x112e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	a1 f4       	brne	.+40     	; 0x10ae <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1086:	a4 e3       	ldi	r26, 0x34	; 52
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e4 e3       	ldi	r30, 0x34	; 52
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <GPIO_setupPinDirection+0x13c>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <GPIO_setupPinDirection+0x138>
    10a8:	84 2b       	or	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	40 c0       	rjmp	.+128    	; 0x112e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    10ae:	a4 e3       	ldi	r26, 0x34	; 52
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e4 e3       	ldi	r30, 0x34	; 52
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <GPIO_setupPinDirection+0x164>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <GPIO_setupPinDirection+0x160>
    10d0:	80 95       	com	r24
    10d2:	84 23       	and	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	2b c0       	rjmp	.+86     	; 0x112e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	a1 f4       	brne	.+40     	; 0x1106 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    10de:	a1 e3       	ldi	r26, 0x31	; 49
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e1 e3       	ldi	r30, 0x31	; 49
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <GPIO_setupPinDirection+0x194>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <GPIO_setupPinDirection+0x190>
    1100:	84 2b       	or	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	14 c0       	rjmp	.+40     	; 0x112e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1106:	a1 e3       	ldi	r26, 0x31	; 49
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e1 e3       	ldi	r30, 0x31	; 49
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <GPIO_setupPinDirection+0x1bc>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <GPIO_setupPinDirection+0x1b8>
    1128:	80 95       	com	r24
    112a:	84 23       	and	r24, r20
    112c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <GPIO_writePin+0x6>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <GPIO_writePin+0x8>
    1146:	0f 92       	push	r0
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	6a 83       	std	Y+2, r22	; 0x02
    1150:	4b 83       	std	Y+3, r20	; 0x03
    if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	88 30       	cpi	r24, 0x08	; 8
    1156:	08 f0       	brcs	.+2      	; 0x115a <GPIO_writePin+0x1c>
    1158:	21 c2       	rjmp	.+1090   	; 0x159c <GPIO_writePin+0x45e>
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	84 30       	cpi	r24, 0x04	; 4
    115e:	08 f0       	brcs	.+2      	; 0x1162 <GPIO_writePin+0x24>
    1160:	1d c2       	rjmp	.+1082   	; 0x159c <GPIO_writePin+0x45e>
	{
		/* Do Nothing */
	}
	else{
         switch(port_num){
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3d 83       	std	Y+5, r19	; 0x05
    116a:	2c 83       	std	Y+4, r18	; 0x04
    116c:	4c 81       	ldd	r20, Y+4	; 0x04
    116e:	5d 81       	ldd	r21, Y+5	; 0x05
    1170:	41 30       	cpi	r20, 0x01	; 1
    1172:	51 05       	cpc	r21, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <GPIO_writePin+0x3a>
    1176:	97 c0       	rjmp	.+302    	; 0x12a6 <GPIO_writePin+0x168>
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	82 30       	cpi	r24, 0x02	; 2
    117e:	91 05       	cpc	r25, r1
    1180:	34 f4       	brge	.+12     	; 0x118e <GPIO_writePin+0x50>
    1182:	2c 81       	ldd	r18, Y+4	; 0x04
    1184:	3d 81       	ldd	r19, Y+5	; 0x05
    1186:	21 15       	cp	r18, r1
    1188:	31 05       	cpc	r19, r1
    118a:	71 f0       	breq	.+28     	; 0x11a8 <GPIO_writePin+0x6a>
    118c:	07 c2       	rjmp	.+1038   	; 0x159c <GPIO_writePin+0x45e>
    118e:	4c 81       	ldd	r20, Y+4	; 0x04
    1190:	5d 81       	ldd	r21, Y+5	; 0x05
    1192:	42 30       	cpi	r20, 0x02	; 2
    1194:	51 05       	cpc	r21, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <GPIO_writePin+0x5c>
    1198:	05 c1       	rjmp	.+522    	; 0x13a4 <GPIO_writePin+0x266>
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	9d 81       	ldd	r25, Y+5	; 0x05
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	91 05       	cpc	r25, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <GPIO_writePin+0x68>
    11a4:	7e c1       	rjmp	.+764    	; 0x14a2 <GPIO_writePin+0x364>
    11a6:	fa c1       	rjmp	.+1012   	; 0x159c <GPIO_writePin+0x45e>
        case PORTA_ID:
            if(!(DDRA&(1<<pin_num))){
    11a8:	ea e3       	ldi	r30, 0x3A	; 58
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a9 01       	movw	r20, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GPIO_writePin+0x82>
    11bc:	55 95       	asr	r21
    11be:	47 95       	ror	r20
    11c0:	8a 95       	dec	r24
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GPIO_writePin+0x7e>
    11c4:	ca 01       	movw	r24, r20
    11c6:	81 70       	andi	r24, 0x01	; 1
    11c8:	90 70       	andi	r25, 0x00	; 0
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	61 f5       	brne	.+88     	; 0x1226 <GPIO_writePin+0xe8>
            	if(value==LOGIC_HIGH){
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	a1 f4       	brne	.+40     	; 0x11fc <GPIO_writePin+0xbe>
            	       SET_BIT(PORTA,pin_num);
    11d4:	ab e3       	ldi	r26, 0x3B	; 59
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	eb e3       	ldi	r30, 0x3B	; 59
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <GPIO_writePin+0xb4>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <GPIO_writePin+0xb0>
    11f6:	84 2b       	or	r24, r20
    11f8:	8c 93       	st	X, r24
    11fa:	d0 c1       	rjmp	.+928    	; 0x159c <GPIO_writePin+0x45e>
            	   }
            	else{
            	     CLEAR_BIT(PORTA,pin_num);
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <GPIO_writePin+0xdc>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <GPIO_writePin+0xd8>
    121e:	80 95       	com	r24
    1220:	84 23       	and	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	bb c1       	rjmp	.+886    	; 0x159c <GPIO_writePin+0x45e>
            	  }
            }
            else if((DDRA&(1<<pin_num))){
    1226:	ea e3       	ldi	r30, 0x3A	; 58
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a9 01       	movw	r20, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_writePin+0x100>
    123a:	55 95       	asr	r21
    123c:	47 95       	ror	r20
    123e:	8a 95       	dec	r24
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_writePin+0xfc>
    1242:	ca 01       	movw	r24, r20
    1244:	81 70       	andi	r24, 0x01	; 1
    1246:	90 70       	andi	r25, 0x00	; 0
    1248:	88 23       	and	r24, r24
    124a:	09 f4       	brne	.+2      	; 0x124e <GPIO_writePin+0x110>
    124c:	a7 c1       	rjmp	.+846    	; 0x159c <GPIO_writePin+0x45e>

            	if(value==LOGIC_HIGH){
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	a1 f4       	brne	.+40     	; 0x127c <GPIO_writePin+0x13e>
            	      SET_BIT(PORTA,pin_num);
    1254:	ab e3       	ldi	r26, 0x3B	; 59
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	eb e3       	ldi	r30, 0x3B	; 59
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <GPIO_writePin+0x134>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <GPIO_writePin+0x130>
    1276:	84 2b       	or	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	90 c1       	rjmp	.+800    	; 0x159c <GPIO_writePin+0x45e>
            	   }
            	else{
            	    CLEAR_BIT(PORTA,pin_num);
    127c:	ab e3       	ldi	r26, 0x3B	; 59
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	eb e3       	ldi	r30, 0x3B	; 59
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <GPIO_writePin+0x15c>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <GPIO_writePin+0x158>
    129e:	80 95       	com	r24
    12a0:	84 23       	and	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	7b c1       	rjmp	.+758    	; 0x159c <GPIO_writePin+0x45e>
             }
            }
            break;
        case PORTB_ID:
        	if(!(DDRB&(1<<pin_num))){
    12a6:	e7 e3       	ldi	r30, 0x37	; 55
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_writePin+0x180>
    12ba:	55 95       	asr	r21
    12bc:	47 95       	ror	r20
    12be:	8a 95       	dec	r24
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_writePin+0x17c>
    12c2:	ca 01       	movw	r24, r20
    12c4:	81 70       	andi	r24, 0x01	; 1
    12c6:	90 70       	andi	r25, 0x00	; 0
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	61 f5       	brne	.+88     	; 0x1324 <GPIO_writePin+0x1e6>
        	            	if(value==LOGIC_HIGH){
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	a1 f4       	brne	.+40     	; 0x12fa <GPIO_writePin+0x1bc>
        	            	       SET_BIT(PORTB,pin_num);
    12d2:	a8 e3       	ldi	r26, 0x38	; 56
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e8 e3       	ldi	r30, 0x38	; 56
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <GPIO_writePin+0x1b2>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <GPIO_writePin+0x1ae>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	51 c1       	rjmp	.+674    	; 0x159c <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	     CLEAR_BIT(PORTB,pin_num);
    12fa:	a8 e3       	ldi	r26, 0x38	; 56
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e8 e3       	ldi	r30, 0x38	; 56
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <GPIO_writePin+0x1da>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <GPIO_writePin+0x1d6>
    131c:	80 95       	com	r24
    131e:	84 23       	and	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	3c c1       	rjmp	.+632    	; 0x159c <GPIO_writePin+0x45e>
        	            	  }
        	            }
        	            else if((DDRB&(1<<pin_num))){
    1324:	e7 e3       	ldi	r30, 0x37	; 55
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a9 01       	movw	r20, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <GPIO_writePin+0x1fe>
    1338:	55 95       	asr	r21
    133a:	47 95       	ror	r20
    133c:	8a 95       	dec	r24
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <GPIO_writePin+0x1fa>
    1340:	ca 01       	movw	r24, r20
    1342:	81 70       	andi	r24, 0x01	; 1
    1344:	90 70       	andi	r25, 0x00	; 0
    1346:	88 23       	and	r24, r24
    1348:	09 f4       	brne	.+2      	; 0x134c <GPIO_writePin+0x20e>
    134a:	28 c1       	rjmp	.+592    	; 0x159c <GPIO_writePin+0x45e>

        	            	if(value==LOGIC_HIGH){
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	a1 f4       	brne	.+40     	; 0x137a <GPIO_writePin+0x23c>
        	            	      SET_BIT(PORTB,pin_num);
    1352:	a8 e3       	ldi	r26, 0x38	; 56
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e8 e3       	ldi	r30, 0x38	; 56
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <GPIO_writePin+0x232>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <GPIO_writePin+0x22e>
    1374:	84 2b       	or	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	11 c1       	rjmp	.+546    	; 0x159c <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	    CLEAR_BIT(PORTB,pin_num);
    137a:	a8 e3       	ldi	r26, 0x38	; 56
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e8 e3       	ldi	r30, 0x38	; 56
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <GPIO_writePin+0x25a>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <GPIO_writePin+0x256>
    139c:	80 95       	com	r24
    139e:	84 23       	and	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	fc c0       	rjmp	.+504    	; 0x159c <GPIO_writePin+0x45e>
        	             }
        	            }
            break;
        case PORTC_ID:
        	if(!(DDRC&(1<<pin_num))){
    13a4:	e4 e3       	ldi	r30, 0x34	; 52
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <GPIO_writePin+0x27e>
    13b8:	55 95       	asr	r21
    13ba:	47 95       	ror	r20
    13bc:	8a 95       	dec	r24
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <GPIO_writePin+0x27a>
    13c0:	ca 01       	movw	r24, r20
    13c2:	81 70       	andi	r24, 0x01	; 1
    13c4:	90 70       	andi	r25, 0x00	; 0
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	61 f5       	brne	.+88     	; 0x1422 <GPIO_writePin+0x2e4>
        	            	if(value==LOGIC_HIGH){
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	a1 f4       	brne	.+40     	; 0x13f8 <GPIO_writePin+0x2ba>
        	            	       SET_BIT(PORTC,pin_num);
    13d0:	a5 e3       	ldi	r26, 0x35	; 53
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e5 e3       	ldi	r30, 0x35	; 53
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <GPIO_writePin+0x2b0>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <GPIO_writePin+0x2ac>
    13f2:	84 2b       	or	r24, r20
    13f4:	8c 93       	st	X, r24
    13f6:	d2 c0       	rjmp	.+420    	; 0x159c <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	     CLEAR_BIT(PORTC,pin_num);
    13f8:	a5 e3       	ldi	r26, 0x35	; 53
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e5 e3       	ldi	r30, 0x35	; 53
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <GPIO_writePin+0x2d8>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <GPIO_writePin+0x2d4>
    141a:	80 95       	com	r24
    141c:	84 23       	and	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	bd c0       	rjmp	.+378    	; 0x159c <GPIO_writePin+0x45e>
        	            	  }
        	            }
        	            else if((DDRC&(1<<pin_num))){
    1422:	e4 e3       	ldi	r30, 0x34	; 52
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	a9 01       	movw	r20, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <GPIO_writePin+0x2fc>
    1436:	55 95       	asr	r21
    1438:	47 95       	ror	r20
    143a:	8a 95       	dec	r24
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <GPIO_writePin+0x2f8>
    143e:	ca 01       	movw	r24, r20
    1440:	81 70       	andi	r24, 0x01	; 1
    1442:	90 70       	andi	r25, 0x00	; 0
    1444:	88 23       	and	r24, r24
    1446:	09 f4       	brne	.+2      	; 0x144a <GPIO_writePin+0x30c>
    1448:	a9 c0       	rjmp	.+338    	; 0x159c <GPIO_writePin+0x45e>

        	            	if(value==LOGIC_HIGH){
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	a1 f4       	brne	.+40     	; 0x1478 <GPIO_writePin+0x33a>
        	            	      SET_BIT(PORTC,pin_num);
    1450:	a5 e3       	ldi	r26, 0x35	; 53
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e5 e3       	ldi	r30, 0x35	; 53
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <GPIO_writePin+0x330>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <GPIO_writePin+0x32c>
    1472:	84 2b       	or	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	92 c0       	rjmp	.+292    	; 0x159c <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	    CLEAR_BIT(PORTC,pin_num);
    1478:	a5 e3       	ldi	r26, 0x35	; 53
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e3       	ldi	r30, 0x35	; 53
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <GPIO_writePin+0x358>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <GPIO_writePin+0x354>
    149a:	80 95       	com	r24
    149c:	84 23       	and	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	7d c0       	rjmp	.+250    	; 0x159c <GPIO_writePin+0x45e>
        	             }
        	            }
            break;
        case PORTD_ID:
        	if(!(DDRD&(1<<pin_num))){
    14a2:	e1 e3       	ldi	r30, 0x31	; 49
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a9 01       	movw	r20, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <GPIO_writePin+0x37c>
    14b6:	55 95       	asr	r21
    14b8:	47 95       	ror	r20
    14ba:	8a 95       	dec	r24
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <GPIO_writePin+0x378>
    14be:	ca 01       	movw	r24, r20
    14c0:	81 70       	andi	r24, 0x01	; 1
    14c2:	90 70       	andi	r25, 0x00	; 0
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	61 f5       	brne	.+88     	; 0x1520 <GPIO_writePin+0x3e2>
        	            	if(value==LOGIC_HIGH){
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	a1 f4       	brne	.+40     	; 0x14f6 <GPIO_writePin+0x3b8>
        	            	       SET_BIT(PORTD,pin_num);
    14ce:	a2 e3       	ldi	r26, 0x32	; 50
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e2 e3       	ldi	r30, 0x32	; 50
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <GPIO_writePin+0x3ae>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <GPIO_writePin+0x3aa>
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	53 c0       	rjmp	.+166    	; 0x159c <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	     CLEAR_BIT(PORTD,pin_num);
    14f6:	a2 e3       	ldi	r26, 0x32	; 50
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e2 e3       	ldi	r30, 0x32	; 50
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <GPIO_writePin+0x3d6>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <GPIO_writePin+0x3d2>
    1518:	80 95       	com	r24
    151a:	84 23       	and	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	3e c0       	rjmp	.+124    	; 0x159c <GPIO_writePin+0x45e>
        	            	  }
        	            }
        	            else if((DDRD&(1<<pin_num))){
    1520:	e1 e3       	ldi	r30, 0x31	; 49
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a9 01       	movw	r20, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <GPIO_writePin+0x3fa>
    1534:	55 95       	asr	r21
    1536:	47 95       	ror	r20
    1538:	8a 95       	dec	r24
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <GPIO_writePin+0x3f6>
    153c:	ca 01       	movw	r24, r20
    153e:	81 70       	andi	r24, 0x01	; 1
    1540:	90 70       	andi	r25, 0x00	; 0
    1542:	88 23       	and	r24, r24
    1544:	59 f1       	breq	.+86     	; 0x159c <GPIO_writePin+0x45e>

        	            	if(value==LOGIC_HIGH){
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	a1 f4       	brne	.+40     	; 0x1574 <GPIO_writePin+0x436>
        	            	      SET_BIT(PORTD,pin_num);
    154c:	a2 e3       	ldi	r26, 0x32	; 50
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e2 e3       	ldi	r30, 0x32	; 50
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <GPIO_writePin+0x42c>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <GPIO_writePin+0x428>
    156e:	84 2b       	or	r24, r20
    1570:	8c 93       	st	X, r24
    1572:	14 c0       	rjmp	.+40     	; 0x159c <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	    CLEAR_BIT(PORTD,pin_num);
    1574:	a2 e3       	ldi	r26, 0x32	; 50
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e2 e3       	ldi	r30, 0x32	; 50
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <GPIO_writePin+0x454>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <GPIO_writePin+0x450>
    1596:	80 95       	com	r24
    1598:	84 23       	and	r24, r20
    159a:	8c 93       	st	X, r24
        	             }
        	            }
            break;
      }
	}
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <GPIO_readPin+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <GPIO_readPin+0x8>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <GPIO_readPin+0xa>
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	6a 83       	std	Y+2, r22	; 0x02
    if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	88 30       	cpi	r24, 0x08	; 8
    15c2:	18 f4       	brcc	.+6      	; 0x15ca <GPIO_readPin+0x1e>
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	84 30       	cpi	r24, 0x04	; 4
    15c8:	10 f0       	brcs	.+4      	; 0x15ce <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    15ca:	1d 82       	std	Y+5, r1	; 0x05
    15cc:	9b c0       	rjmp	.+310    	; 0x1704 <GPIO_readPin+0x158>
	}
	else{
        switch(port_num){
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	3c 83       	std	Y+4, r19	; 0x04
    15d6:	2b 83       	std	Y+3, r18	; 0x03
    15d8:	4b 81       	ldd	r20, Y+3	; 0x03
    15da:	5c 81       	ldd	r21, Y+4	; 0x04
    15dc:	41 30       	cpi	r20, 0x01	; 1
    15de:	51 05       	cpc	r21, r1
    15e0:	b1 f1       	breq	.+108    	; 0x164e <GPIO_readPin+0xa2>
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	91 05       	cpc	r25, r1
    15ea:	34 f4       	brge	.+12     	; 0x15f8 <GPIO_readPin+0x4c>
    15ec:	2b 81       	ldd	r18, Y+3	; 0x03
    15ee:	3c 81       	ldd	r19, Y+4	; 0x04
    15f0:	21 15       	cp	r18, r1
    15f2:	31 05       	cpc	r19, r1
    15f4:	71 f0       	breq	.+28     	; 0x1612 <GPIO_readPin+0x66>
    15f6:	85 c0       	rjmp	.+266    	; 0x1702 <GPIO_readPin+0x156>
    15f8:	4b 81       	ldd	r20, Y+3	; 0x03
    15fa:	5c 81       	ldd	r21, Y+4	; 0x04
    15fc:	42 30       	cpi	r20, 0x02	; 2
    15fe:	51 05       	cpc	r21, r1
    1600:	09 f4       	brne	.+2      	; 0x1604 <GPIO_readPin+0x58>
    1602:	43 c0       	rjmp	.+134    	; 0x168a <GPIO_readPin+0xde>
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	83 30       	cpi	r24, 0x03	; 3
    160a:	91 05       	cpc	r25, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <GPIO_readPin+0x64>
    160e:	5b c0       	rjmp	.+182    	; 0x16c6 <GPIO_readPin+0x11a>
    1610:	78 c0       	rjmp	.+240    	; 0x1702 <GPIO_readPin+0x156>
                case PORTA_ID:return (PINA&(1<<pin_num))>>pin_num;break;
    1612:	e9 e3       	ldi	r30, 0x39	; 57
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 c0       	rjmp	.+4      	; 0x162c <GPIO_readPin+0x80>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	2a 95       	dec	r18
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <GPIO_readPin+0x7c>
    1630:	9a 01       	movw	r18, r20
    1632:	28 23       	and	r18, r24
    1634:	39 23       	and	r19, r25
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	a9 01       	movw	r20, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <GPIO_readPin+0x98>
    1640:	55 95       	asr	r21
    1642:	47 95       	ror	r20
    1644:	8a 95       	dec	r24
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <GPIO_readPin+0x94>
    1648:	ca 01       	movw	r24, r20
    164a:	8d 83       	std	Y+5, r24	; 0x05
    164c:	5b c0       	rjmp	.+182    	; 0x1704 <GPIO_readPin+0x158>
                case PORTB_ID:return (PINB&(1<<pin_num))>>pin_num;break;
    164e:	e6 e3       	ldi	r30, 0x36	; 54
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <GPIO_readPin+0xbc>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	2a 95       	dec	r18
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <GPIO_readPin+0xb8>
    166c:	9a 01       	movw	r18, r20
    166e:	28 23       	and	r18, r24
    1670:	39 23       	and	r19, r25
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a9 01       	movw	r20, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <GPIO_readPin+0xd4>
    167c:	55 95       	asr	r21
    167e:	47 95       	ror	r20
    1680:	8a 95       	dec	r24
    1682:	e2 f7       	brpl	.-8      	; 0x167c <GPIO_readPin+0xd0>
    1684:	ca 01       	movw	r24, r20
    1686:	8d 83       	std	Y+5, r24	; 0x05
    1688:	3d c0       	rjmp	.+122    	; 0x1704 <GPIO_readPin+0x158>
                case PORTC_ID:return (PINC&(1<<pin_num))>>pin_num;break;
    168a:	e3 e3       	ldi	r30, 0x33	; 51
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <GPIO_readPin+0xf8>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	2a 95       	dec	r18
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <GPIO_readPin+0xf4>
    16a8:	9a 01       	movw	r18, r20
    16aa:	28 23       	and	r18, r24
    16ac:	39 23       	and	r19, r25
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a9 01       	movw	r20, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <GPIO_readPin+0x110>
    16b8:	55 95       	asr	r21
    16ba:	47 95       	ror	r20
    16bc:	8a 95       	dec	r24
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <GPIO_readPin+0x10c>
    16c0:	ca 01       	movw	r24, r20
    16c2:	8d 83       	std	Y+5, r24	; 0x05
    16c4:	1f c0       	rjmp	.+62     	; 0x1704 <GPIO_readPin+0x158>
                case PORTD_ID:return (PIND&(1<<pin_num))>>pin_num;break;
    16c6:	e0 e3       	ldi	r30, 0x30	; 48
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <GPIO_readPin+0x134>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	2a 95       	dec	r18
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <GPIO_readPin+0x130>
    16e4:	9a 01       	movw	r18, r20
    16e6:	28 23       	and	r18, r24
    16e8:	39 23       	and	r19, r25
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	88 2f       	mov	r24, r24
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	a9 01       	movw	r20, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <GPIO_readPin+0x14c>
    16f4:	55 95       	asr	r21
    16f6:	47 95       	ror	r20
    16f8:	8a 95       	dec	r24
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <GPIO_readPin+0x148>
    16fc:	ca 01       	movw	r24, r20
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <GPIO_readPin+0x158>
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <GPIO_readPin+0x15c>
            }
	}
}
    1704:	5d 81       	ldd	r21, Y+5	; 0x05
    1706:	5e 83       	std	Y+6, r21	; 0x06
    1708:	8e 81       	ldd	r24, Y+6	; 0x06
    170a:	26 96       	adiw	r28, 0x06	; 6
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <GPIO_setupPortDirection+0x6>
    1722:	00 d0       	rcall	.+0      	; 0x1724 <GPIO_setupPortDirection+0x8>
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	90 f5       	brcc	.+100    	; 0x1796 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	3c 83       	std	Y+4, r19	; 0x04
    173a:	2b 83       	std	Y+3, r18	; 0x03
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	91 05       	cpc	r25, r1
    1744:	d1 f0       	breq	.+52     	; 0x177a <GPIO_setupPortDirection+0x5e>
    1746:	2b 81       	ldd	r18, Y+3	; 0x03
    1748:	3c 81       	ldd	r19, Y+4	; 0x04
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	2c f4       	brge	.+10     	; 0x175a <GPIO_setupPortDirection+0x3e>
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	61 f0       	breq	.+24     	; 0x1770 <GPIO_setupPortDirection+0x54>
    1758:	1e c0       	rjmp	.+60     	; 0x1796 <GPIO_setupPortDirection+0x7a>
    175a:	2b 81       	ldd	r18, Y+3	; 0x03
    175c:	3c 81       	ldd	r19, Y+4	; 0x04
    175e:	22 30       	cpi	r18, 0x02	; 2
    1760:	31 05       	cpc	r19, r1
    1762:	81 f0       	breq	.+32     	; 0x1784 <GPIO_setupPortDirection+0x68>
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	91 05       	cpc	r25, r1
    176c:	81 f0       	breq	.+32     	; 0x178e <GPIO_setupPortDirection+0x72>
    176e:	13 c0       	rjmp	.+38     	; 0x1796 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1770:	ea e3       	ldi	r30, 0x3A	; 58
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	80 83       	st	Z, r24
    1778:	0e c0       	rjmp	.+28     	; 0x1796 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    177a:	e7 e3       	ldi	r30, 0x37	; 55
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	80 83       	st	Z, r24
    1782:	09 c0       	rjmp	.+18     	; 0x1796 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1784:	e4 e3       	ldi	r30, 0x34	; 52
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	80 83       	st	Z, r24
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    178e:	e1 e3       	ldi	r30, 0x31	; 49
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	80 83       	st	Z, r24
			break;
		}
	}
}
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <GPIO_writePort+0x6>
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <GPIO_writePort+0x8>
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	84 30       	cpi	r24, 0x04	; 4
    17b8:	90 f5       	brcc	.+100    	; 0x181e <GPIO_writePort+0x7a>
			{

			}
		else{
        switch(port_num){
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	3c 83       	std	Y+4, r19	; 0x04
    17c2:	2b 83       	std	Y+3, r18	; 0x03
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	91 05       	cpc	r25, r1
    17cc:	d1 f0       	breq	.+52     	; 0x1802 <GPIO_writePort+0x5e>
    17ce:	2b 81       	ldd	r18, Y+3	; 0x03
    17d0:	3c 81       	ldd	r19, Y+4	; 0x04
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	2c f4       	brge	.+10     	; 0x17e2 <GPIO_writePort+0x3e>
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	61 f0       	breq	.+24     	; 0x17f8 <GPIO_writePort+0x54>
    17e0:	1e c0       	rjmp	.+60     	; 0x181e <GPIO_writePort+0x7a>
    17e2:	2b 81       	ldd	r18, Y+3	; 0x03
    17e4:	3c 81       	ldd	r19, Y+4	; 0x04
    17e6:	22 30       	cpi	r18, 0x02	; 2
    17e8:	31 05       	cpc	r19, r1
    17ea:	81 f0       	breq	.+32     	; 0x180c <GPIO_writePort+0x68>
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	83 30       	cpi	r24, 0x03	; 3
    17f2:	91 05       	cpc	r25, r1
    17f4:	81 f0       	breq	.+32     	; 0x1816 <GPIO_writePort+0x72>
    17f6:	13 c0       	rjmp	.+38     	; 0x181e <GPIO_writePort+0x7a>
                case PORTA_ID: PORTA= value;break;
    17f8:	eb e3       	ldi	r30, 0x3B	; 59
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	80 83       	st	Z, r24
    1800:	0e c0       	rjmp	.+28     	; 0x181e <GPIO_writePort+0x7a>
                case PORTB_ID: PORTB= value;break;
    1802:	e8 e3       	ldi	r30, 0x38	; 56
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	80 83       	st	Z, r24
    180a:	09 c0       	rjmp	.+18     	; 0x181e <GPIO_writePort+0x7a>
                case PORTC_ID: PORTC= value;break;
    180c:	e5 e3       	ldi	r30, 0x35	; 53
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	80 83       	st	Z, r24
    1814:	04 c0       	rjmp	.+8      	; 0x181e <GPIO_writePort+0x7a>
                case PORTD_ID: PORTD= value;break;
    1816:	e2 e3       	ldi	r30, 0x32	; 50
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	80 83       	st	Z, r24
        }    }
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <GPIO_readPort+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <GPIO_readPort+0x8>
    1834:	0f 92       	push	r0
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	89 83       	std	Y+1, r24	; 0x01
	if((port_num >= NUM_OF_PORTS))
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	84 30       	cpi	r24, 0x04	; 4
    1840:	10 f0       	brcs	.+4      	; 0x1846 <GPIO_readPort+0x1a>
		{
			return LOGIC_LOW;
    1842:	1c 82       	std	Y+4, r1	; 0x04
    1844:	34 c0       	rjmp	.+104    	; 0x18ae <GPIO_readPort+0x82>
		}
	else{
        switch(port_num){
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	3b 83       	std	Y+3, r19	; 0x03
    184e:	2a 83       	std	Y+2, r18	; 0x02
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	9b 81       	ldd	r25, Y+3	; 0x03
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	91 05       	cpc	r25, r1
    1858:	d1 f0       	breq	.+52     	; 0x188e <GPIO_readPort+0x62>
    185a:	2a 81       	ldd	r18, Y+2	; 0x02
    185c:	3b 81       	ldd	r19, Y+3	; 0x03
    185e:	22 30       	cpi	r18, 0x02	; 2
    1860:	31 05       	cpc	r19, r1
    1862:	2c f4       	brge	.+10     	; 0x186e <GPIO_readPort+0x42>
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	9b 81       	ldd	r25, Y+3	; 0x03
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	61 f0       	breq	.+24     	; 0x1884 <GPIO_readPort+0x58>
    186c:	1f c0       	rjmp	.+62     	; 0x18ac <GPIO_readPort+0x80>
    186e:	2a 81       	ldd	r18, Y+2	; 0x02
    1870:	3b 81       	ldd	r19, Y+3	; 0x03
    1872:	22 30       	cpi	r18, 0x02	; 2
    1874:	31 05       	cpc	r19, r1
    1876:	81 f0       	breq	.+32     	; 0x1898 <GPIO_readPort+0x6c>
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	9b 81       	ldd	r25, Y+3	; 0x03
    187c:	83 30       	cpi	r24, 0x03	; 3
    187e:	91 05       	cpc	r25, r1
    1880:	81 f0       	breq	.+32     	; 0x18a2 <GPIO_readPort+0x76>
    1882:	14 c0       	rjmp	.+40     	; 0x18ac <GPIO_readPort+0x80>
                case PORTA_ID:return PINA;break;
    1884:	e9 e3       	ldi	r30, 0x39	; 57
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	90 81       	ld	r25, Z
    188a:	9c 83       	std	Y+4, r25	; 0x04
    188c:	10 c0       	rjmp	.+32     	; 0x18ae <GPIO_readPort+0x82>
                case PORTB_ID:return PINB;break;
    188e:	e6 e3       	ldi	r30, 0x36	; 54
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	20 81       	ld	r18, Z
    1894:	2c 83       	std	Y+4, r18	; 0x04
    1896:	0b c0       	rjmp	.+22     	; 0x18ae <GPIO_readPort+0x82>
                case PORTC_ID:return PINC;break;
    1898:	e3 e3       	ldi	r30, 0x33	; 51
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	30 81       	ld	r19, Z
    189e:	3c 83       	std	Y+4, r19	; 0x04
    18a0:	06 c0       	rjmp	.+12     	; 0x18ae <GPIO_readPort+0x82>
                case PORTD_ID:return PIND;break;
    18a2:	e0 e3       	ldi	r30, 0x30	; 48
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	8c 83       	std	Y+4, r24	; 0x04
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <GPIO_readPort+0x82>
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <GPIO_readPort+0x86>
            }
}}
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	9d 83       	std	Y+5, r25	; 0x05
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	2e 97       	sbiw	r28, 0x0e	; 14
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	41 e0       	ldi	r20, 0x01	; 1
    18de:	0e 94 b4 07 	call	0xf68	; 0xf68 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	62 e0       	ldi	r22, 0x02	; 2
    18e6:	41 e0       	ldi	r20, 0x01	; 1
    18e8:	0e 94 b4 07 	call	0xf68	; 0xf68 <GPIO_setupPinDirection>
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 ea       	ldi	r26, 0xA0	; 160
    18f2:	b1 e4       	ldi	r27, 0x41	; 65
    18f4:	8b 87       	std	Y+11, r24	; 0x0b
    18f6:	9c 87       	std	Y+12, r25	; 0x0c
    18f8:	ad 87       	std	Y+13, r26	; 0x0d
    18fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1900:	8d 85       	ldd	r24, Y+13	; 0x0d
    1902:	9e 85       	ldd	r25, Y+14	; 0x0e
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	4a e7       	ldi	r20, 0x7A	; 122
    190a:	55 e4       	ldi	r21, 0x45	; 69
    190c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	8f 83       	std	Y+7, r24	; 0x07
    1916:	98 87       	std	Y+8, r25	; 0x08
    1918:	a9 87       	std	Y+9, r26	; 0x09
    191a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    191c:	6f 81       	ldd	r22, Y+7	; 0x07
    191e:	78 85       	ldd	r23, Y+8	; 0x08
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	9a 85       	ldd	r25, Y+10	; 0x0a
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e8       	ldi	r20, 0x80	; 128
    192a:	5f e3       	ldi	r21, 0x3F	; 63
    192c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1930:	88 23       	and	r24, r24
    1932:	2c f4       	brge	.+10     	; 0x193e <LCD_init+0x7a>
		__ticks = 1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9e 83       	std	Y+6, r25	; 0x06
    193a:	8d 83       	std	Y+5, r24	; 0x05
    193c:	3f c0       	rjmp	.+126    	; 0x19bc <LCD_init+0xf8>
	else if (__tmp > 65535)
    193e:	6f 81       	ldd	r22, Y+7	; 0x07
    1940:	78 85       	ldd	r23, Y+8	; 0x08
    1942:	89 85       	ldd	r24, Y+9	; 0x09
    1944:	9a 85       	ldd	r25, Y+10	; 0x0a
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	3f ef       	ldi	r19, 0xFF	; 255
    194a:	4f e7       	ldi	r20, 0x7F	; 127
    194c:	57 e4       	ldi	r21, 0x47	; 71
    194e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1952:	18 16       	cp	r1, r24
    1954:	4c f5       	brge	.+82     	; 0x19a8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1956:	6b 85       	ldd	r22, Y+11	; 0x0b
    1958:	7c 85       	ldd	r23, Y+12	; 0x0c
    195a:	8d 85       	ldd	r24, Y+13	; 0x0d
    195c:	9e 85       	ldd	r25, Y+14	; 0x0e
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e2       	ldi	r20, 0x20	; 32
    1964:	51 e4       	ldi	r21, 0x41	; 65
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	bc 01       	movw	r22, r24
    1970:	cd 01       	movw	r24, r26
    1972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9e 83       	std	Y+6, r25	; 0x06
    197c:	8d 83       	std	Y+5, r24	; 0x05
    197e:	0f c0       	rjmp	.+30     	; 0x199e <LCD_init+0xda>
    1980:	80 e9       	ldi	r24, 0x90	; 144
    1982:	91 e0       	ldi	r25, 0x01	; 1
    1984:	9c 83       	std	Y+4, r25	; 0x04
    1986:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	9c 81       	ldd	r25, Y+4	; 0x04
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <LCD_init+0xc8>
    1990:	9c 83       	std	Y+4, r25	; 0x04
    1992:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
    1996:	9e 81       	ldd	r25, Y+6	; 0x06
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	9e 83       	std	Y+6, r25	; 0x06
    199c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	69 f7       	brne	.-38     	; 0x1980 <LCD_init+0xbc>
    19a6:	14 c0       	rjmp	.+40     	; 0x19d0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a8:	6f 81       	ldd	r22, Y+7	; 0x07
    19aa:	78 85       	ldd	r23, Y+8	; 0x08
    19ac:	89 85       	ldd	r24, Y+9	; 0x09
    19ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	9e 83       	std	Y+6, r25	; 0x06
    19ba:	8d 83       	std	Y+5, r24	; 0x05
    19bc:	8d 81       	ldd	r24, Y+5	; 0x05
    19be:	9e 81       	ldd	r25, Y+6	; 0x06
    19c0:	9a 83       	std	Y+2, r25	; 0x02
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <LCD_init+0x104>
    19cc:	9a 83       	std	Y+2, r25	; 0x02
    19ce:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	63 e0       	ldi	r22, 0x03	; 3
    19d4:	41 e0       	ldi	r20, 0x01	; 1
    19d6:	0e 94 b4 07 	call	0xf68	; 0xf68 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	64 e0       	ldi	r22, 0x04	; 4
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 b4 07 	call	0xf68	; 0xf68 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	65 e0       	ldi	r22, 0x05	; 5
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 b4 07 	call	0xf68	; 0xf68 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	66 e0       	ldi	r22, 0x06	; 6
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 b4 07 	call	0xf68	; 0xf68 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    19f8:	83 e3       	ldi	r24, 0x33	; 51
    19fa:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    19fe:	82 e3       	ldi	r24, 0x32	; 50
    1a00:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1a04:	88 e2       	ldi	r24, 0x28	; 40
    1a06:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a0a:	8c e0       	ldi	r24, 0x0C	; 12
    1a0c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_sendCommand>
}
    1a16:	2e 96       	adiw	r28, 0x0e	; 14
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	c3 56       	subi	r28, 0x63	; 99
    1a36:	d0 40       	sbci	r29, 0x00	; 0
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	fe 01       	movw	r30, r28
    1a44:	ed 59       	subi	r30, 0x9D	; 157
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	61 e0       	ldi	r22, 0x01	; 1
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    1a54:	fe 01       	movw	r30, r28
    1a56:	e1 5a       	subi	r30, 0xA1	; 161
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a0 e8       	ldi	r26, 0x80	; 128
    1a60:	bf e3       	ldi	r27, 0x3F	; 63
    1a62:	80 83       	st	Z, r24
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	a2 83       	std	Z+2, r26	; 0x02
    1a68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6a:	8e 01       	movw	r16, r28
    1a6c:	05 5a       	subi	r16, 0xA5	; 165
    1a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a70:	fe 01       	movw	r30, r28
    1a72:	e1 5a       	subi	r30, 0xA1	; 161
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a e7       	ldi	r20, 0x7A	; 122
    1a84:	55 e4       	ldi	r21, 0x45	; 69
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	f8 01       	movw	r30, r16
    1a90:	80 83       	st	Z, r24
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	a2 83       	std	Z+2, r26	; 0x02
    1a96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e5 5a       	subi	r30, 0xA5	; 165
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	93 81       	ldd	r25, Z+3	; 0x03
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	44 f4       	brge	.+16     	; 0x1ac6 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e7 5a       	subi	r30, 0xA7	; 167
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
    1ac4:	64 c0       	rjmp	.+200    	; 0x1b8e <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e5 5a       	subi	r30, 0xA5	; 165
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	60 81       	ld	r22, Z
    1ace:	71 81       	ldd	r23, Z+1	; 0x01
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	3f ef       	ldi	r19, 0xFF	; 255
    1ad8:	4f e7       	ldi	r20, 0x7F	; 127
    1ada:	57 e4       	ldi	r21, 0x47	; 71
    1adc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae0:	18 16       	cp	r1, r24
    1ae2:	0c f0       	brlt	.+2      	; 0x1ae6 <LCD_sendCommand+0xbe>
    1ae4:	43 c0       	rjmp	.+134    	; 0x1b6c <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e1 5a       	subi	r30, 0xA1	; 161
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e2       	ldi	r20, 0x20	; 32
    1afa:	51 e4       	ldi	r21, 0x41	; 65
    1afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	8e 01       	movw	r16, r28
    1b06:	07 5a       	subi	r16, 0xA7	; 167
    1b08:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0a:	bc 01       	movw	r22, r24
    1b0c:	cd 01       	movw	r24, r26
    1b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	f8 01       	movw	r30, r16
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	80 83       	st	Z, r24
    1b1c:	1f c0       	rjmp	.+62     	; 0x1b5c <LCD_sendCommand+0x134>
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e9 5a       	subi	r30, 0xA9	; 169
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 e9       	ldi	r24, 0x90	; 144
    1b26:	91 e0       	ldi	r25, 0x01	; 1
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	80 83       	st	Z, r24
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e9 5a       	subi	r30, 0xA9	; 169
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <LCD_sendCommand+0x10e>
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e9 5a       	subi	r30, 0xA9	; 169
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b44:	de 01       	movw	r26, r28
    1b46:	a7 5a       	subi	r26, 0xA7	; 167
    1b48:	bf 4f       	sbci	r27, 0xFF	; 255
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e7 5a       	subi	r30, 0xA7	; 167
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	11 96       	adiw	r26, 0x01	; 1
    1b58:	9c 93       	st	X, r25
    1b5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e7 5a       	subi	r30, 0xA7	; 167
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	d1 f6       	brne	.-76     	; 0x1b1e <LCD_sendCommand+0xf6>
    1b6a:	27 c0       	rjmp	.+78     	; 0x1bba <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6c:	8e 01       	movw	r16, r28
    1b6e:	07 5a       	subi	r16, 0xA7	; 167
    1b70:	1f 4f       	sbci	r17, 0xFF	; 255
    1b72:	fe 01       	movw	r30, r28
    1b74:	e5 5a       	subi	r30, 0xA5	; 165
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	93 81       	ldd	r25, Z+3	; 0x03
    1b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	f8 01       	movw	r30, r16
    1b8a:	91 83       	std	Z+1, r25	; 0x01
    1b8c:	80 83       	st	Z, r24
    1b8e:	de 01       	movw	r26, r28
    1b90:	ab 5a       	subi	r26, 0xAB	; 171
    1b92:	bf 4f       	sbci	r27, 0xFF	; 255
    1b94:	fe 01       	movw	r30, r28
    1b96:	e7 5a       	subi	r30, 0xA7	; 167
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	8d 93       	st	X+, r24
    1ba0:	9c 93       	st	X, r25
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	eb 5a       	subi	r30, 0xAB	; 171
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	80 81       	ld	r24, Z
    1baa:	91 81       	ldd	r25, Z+1	; 0x01
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_sendCommand+0x184>
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	eb 5a       	subi	r30, 0xAB	; 171
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	62 e0       	ldi	r22, 0x02	; 2
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ef 5a       	subi	r30, 0xAF	; 175
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	a0 e8       	ldi	r26, 0x80	; 128
    1bd0:	bf e3       	ldi	r27, 0x3F	; 63
    1bd2:	80 83       	st	Z, r24
    1bd4:	91 83       	std	Z+1, r25	; 0x01
    1bd6:	a2 83       	std	Z+2, r26	; 0x02
    1bd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bda:	8e 01       	movw	r16, r28
    1bdc:	03 5b       	subi	r16, 0xB3	; 179
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
    1be0:	fe 01       	movw	r30, r28
    1be2:	ef 5a       	subi	r30, 0xAF	; 175
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a e7       	ldi	r20, 0x7A	; 122
    1bf4:	55 e4       	ldi	r21, 0x45	; 69
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	f8 01       	movw	r30, r16
    1c00:	80 83       	st	Z, r24
    1c02:	91 83       	std	Z+1, r25	; 0x01
    1c04:	a2 83       	std	Z+2, r26	; 0x02
    1c06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e3 5b       	subi	r30, 0xB3	; 179
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e8       	ldi	r20, 0x80	; 128
    1c1c:	5f e3       	ldi	r21, 0x3F	; 63
    1c1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c22:	88 23       	and	r24, r24
    1c24:	44 f4       	brge	.+16     	; 0x1c36 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1c26:	fe 01       	movw	r30, r28
    1c28:	e5 5b       	subi	r30, 0xB5	; 181
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	80 83       	st	Z, r24
    1c34:	64 c0       	rjmp	.+200    	; 0x1cfe <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1c36:	fe 01       	movw	r30, r28
    1c38:	e3 5b       	subi	r30, 0xB3	; 179
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	82 81       	ldd	r24, Z+2	; 0x02
    1c42:	93 81       	ldd	r25, Z+3	; 0x03
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	3f ef       	ldi	r19, 0xFF	; 255
    1c48:	4f e7       	ldi	r20, 0x7F	; 127
    1c4a:	57 e4       	ldi	r21, 0x47	; 71
    1c4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c50:	18 16       	cp	r1, r24
    1c52:	0c f0       	brlt	.+2      	; 0x1c56 <LCD_sendCommand+0x22e>
    1c54:	43 c0       	rjmp	.+134    	; 0x1cdc <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	fe 01       	movw	r30, r28
    1c58:	ef 5a       	subi	r30, 0xAF	; 175
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e2       	ldi	r20, 0x20	; 32
    1c6a:	51 e4       	ldi	r21, 0x41	; 65
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	8e 01       	movw	r16, r28
    1c76:	05 5b       	subi	r16, 0xB5	; 181
    1c78:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	f8 01       	movw	r30, r16
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	80 83       	st	Z, r24
    1c8c:	1f c0       	rjmp	.+62     	; 0x1ccc <LCD_sendCommand+0x2a4>
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e7 5b       	subi	r30, 0xB7	; 183
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 e9       	ldi	r24, 0x90	; 144
    1c96:	91 e0       	ldi	r25, 0x01	; 1
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	80 83       	st	Z, r24
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e7 5b       	subi	r30, 0xB7	; 183
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <LCD_sendCommand+0x27e>
    1caa:	fe 01       	movw	r30, r28
    1cac:	e7 5b       	subi	r30, 0xB7	; 183
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	de 01       	movw	r26, r28
    1cb6:	a5 5b       	subi	r26, 0xB5	; 181
    1cb8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e5 5b       	subi	r30, 0xB5	; 181
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 81       	ld	r24, Z
    1cc2:	91 81       	ldd	r25, Z+1	; 0x01
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	11 96       	adiw	r26, 0x01	; 1
    1cc8:	9c 93       	st	X, r25
    1cca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e5 5b       	subi	r30, 0xB5	; 181
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	91 81       	ldd	r25, Z+1	; 0x01
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	d1 f6       	brne	.-76     	; 0x1c8e <LCD_sendCommand+0x266>
    1cda:	27 c0       	rjmp	.+78     	; 0x1d2a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cdc:	8e 01       	movw	r16, r28
    1cde:	05 5b       	subi	r16, 0xB5	; 181
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e3 5b       	subi	r30, 0xB3	; 179
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	80 83       	st	Z, r24
    1cfe:	de 01       	movw	r26, r28
    1d00:	a9 5b       	subi	r26, 0xB9	; 185
    1d02:	bf 4f       	sbci	r27, 0xFF	; 255
    1d04:	fe 01       	movw	r30, r28
    1d06:	e5 5b       	subi	r30, 0xB5	; 181
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	8d 93       	st	X+, r24
    1d10:	9c 93       	st	X, r25
    1d12:	fe 01       	movw	r30, r28
    1d14:	e9 5b       	subi	r30, 0xB9	; 185
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	80 81       	ld	r24, Z
    1d1a:	91 81       	ldd	r25, Z+1	; 0x01
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_sendCommand+0x2f4>
    1d20:	fe 01       	movw	r30, r28
    1d22:	e9 5b       	subi	r30, 0xB9	; 185
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	91 83       	std	Z+1, r25	; 0x01
    1d28:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	ed 59       	subi	r30, 0x9D	; 157
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	80 81       	ld	r24, Z
    1d32:	88 2f       	mov	r24, r24
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	80 71       	andi	r24, 0x10	; 16
    1d38:	90 70       	andi	r25, 0x00	; 0
    1d3a:	95 95       	asr	r25
    1d3c:	87 95       	ror	r24
    1d3e:	95 95       	asr	r25
    1d40:	87 95       	ror	r24
    1d42:	95 95       	asr	r25
    1d44:	87 95       	ror	r24
    1d46:	95 95       	asr	r25
    1d48:	87 95       	ror	r24
    1d4a:	98 2f       	mov	r25, r24
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	63 e0       	ldi	r22, 0x03	; 3
    1d50:	49 2f       	mov	r20, r25
    1d52:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1d56:	fe 01       	movw	r30, r28
    1d58:	ed 59       	subi	r30, 0x9D	; 157
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	88 2f       	mov	r24, r24
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	80 72       	andi	r24, 0x20	; 32
    1d64:	90 70       	andi	r25, 0x00	; 0
    1d66:	95 95       	asr	r25
    1d68:	87 95       	ror	r24
    1d6a:	95 95       	asr	r25
    1d6c:	87 95       	ror	r24
    1d6e:	95 95       	asr	r25
    1d70:	87 95       	ror	r24
    1d72:	95 95       	asr	r25
    1d74:	87 95       	ror	r24
    1d76:	95 95       	asr	r25
    1d78:	87 95       	ror	r24
    1d7a:	98 2f       	mov	r25, r24
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	64 e0       	ldi	r22, 0x04	; 4
    1d80:	49 2f       	mov	r20, r25
    1d82:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1d86:	fe 01       	movw	r30, r28
    1d88:	ed 59       	subi	r30, 0x9D	; 157
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	80 74       	andi	r24, 0x40	; 64
    1d94:	90 70       	andi	r25, 0x00	; 0
    1d96:	08 2e       	mov	r0, r24
    1d98:	89 2f       	mov	r24, r25
    1d9a:	00 0c       	add	r0, r0
    1d9c:	88 1f       	adc	r24, r24
    1d9e:	99 0b       	sbc	r25, r25
    1da0:	00 0c       	add	r0, r0
    1da2:	88 1f       	adc	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	98 2f       	mov	r25, r24
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	65 e0       	ldi	r22, 0x05	; 5
    1dac:	49 2f       	mov	r20, r25
    1dae:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1db2:	fe 01       	movw	r30, r28
    1db4:	ed 59       	subi	r30, 0x9D	; 157
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	98 2f       	mov	r25, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	99 27       	eor	r25, r25
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	66 e0       	ldi	r22, 0x06	; 6
    1dc6:	49 2f       	mov	r20, r25
    1dc8:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    1dcc:	fe 01       	movw	r30, r28
    1dce:	ed 5b       	subi	r30, 0xBD	; 189
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e8       	ldi	r26, 0x80	; 128
    1dd8:	bf e3       	ldi	r27, 0x3F	; 63
    1dda:	80 83       	st	Z, r24
    1ddc:	91 83       	std	Z+1, r25	; 0x01
    1dde:	a2 83       	std	Z+2, r26	; 0x02
    1de0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	8e 01       	movw	r16, r28
    1de4:	01 5c       	subi	r16, 0xC1	; 193
    1de6:	1f 4f       	sbci	r17, 0xFF	; 255
    1de8:	fe 01       	movw	r30, r28
    1dea:	ed 5b       	subi	r30, 0xBD	; 189
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	4a e7       	ldi	r20, 0x7A	; 122
    1dfc:	55 e4       	ldi	r21, 0x45	; 69
    1dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	f8 01       	movw	r30, r16
    1e08:	80 83       	st	Z, r24
    1e0a:	91 83       	std	Z+1, r25	; 0x01
    1e0c:	a2 83       	std	Z+2, r26	; 0x02
    1e0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e10:	fe 01       	movw	r30, r28
    1e12:	ff 96       	adiw	r30, 0x3f	; 63
    1e14:	60 81       	ld	r22, Z
    1e16:	71 81       	ldd	r23, Z+1	; 0x01
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e8       	ldi	r20, 0x80	; 128
    1e22:	5f e3       	ldi	r21, 0x3F	; 63
    1e24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e28:	88 23       	and	r24, r24
    1e2a:	2c f4       	brge	.+10     	; 0x1e36 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9e af       	std	Y+62, r25	; 0x3e
    1e32:	8d af       	std	Y+61, r24	; 0x3d
    1e34:	46 c0       	rjmp	.+140    	; 0x1ec2 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1e36:	fe 01       	movw	r30, r28
    1e38:	ff 96       	adiw	r30, 0x3f	; 63
    1e3a:	60 81       	ld	r22, Z
    1e3c:	71 81       	ldd	r23, Z+1	; 0x01
    1e3e:	82 81       	ldd	r24, Z+2	; 0x02
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	3f ef       	ldi	r19, 0xFF	; 255
    1e46:	4f e7       	ldi	r20, 0x7F	; 127
    1e48:	57 e4       	ldi	r21, 0x47	; 71
    1e4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e4e:	18 16       	cp	r1, r24
    1e50:	64 f5       	brge	.+88     	; 0x1eaa <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e52:	fe 01       	movw	r30, r28
    1e54:	ed 5b       	subi	r30, 0xBD	; 189
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	93 81       	ldd	r25, Z+3	; 0x03
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e2       	ldi	r20, 0x20	; 32
    1e66:	51 e4       	ldi	r21, 0x41	; 65
    1e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	bc 01       	movw	r22, r24
    1e72:	cd 01       	movw	r24, r26
    1e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	9e af       	std	Y+62, r25	; 0x3e
    1e7e:	8d af       	std	Y+61, r24	; 0x3d
    1e80:	0f c0       	rjmp	.+30     	; 0x1ea0 <LCD_sendCommand+0x478>
    1e82:	80 e9       	ldi	r24, 0x90	; 144
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	9c af       	std	Y+60, r25	; 0x3c
    1e88:	8b af       	std	Y+59, r24	; 0x3b
    1e8a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e8c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <LCD_sendCommand+0x466>
    1e92:	9c af       	std	Y+60, r25	; 0x3c
    1e94:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e96:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e98:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	9e af       	std	Y+62, r25	; 0x3e
    1e9e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ea2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	69 f7       	brne	.-38     	; 0x1e82 <LCD_sendCommand+0x45a>
    1ea8:	16 c0       	rjmp	.+44     	; 0x1ed6 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eaa:	fe 01       	movw	r30, r28
    1eac:	ff 96       	adiw	r30, 0x3f	; 63
    1eae:	60 81       	ld	r22, Z
    1eb0:	71 81       	ldd	r23, Z+1	; 0x01
    1eb2:	82 81       	ldd	r24, Z+2	; 0x02
    1eb4:	93 81       	ldd	r25, Z+3	; 0x03
    1eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	9e af       	std	Y+62, r25	; 0x3e
    1ec0:	8d af       	std	Y+61, r24	; 0x3d
    1ec2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ec4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ec6:	9a af       	std	Y+58, r25	; 0x3a
    1ec8:	89 af       	std	Y+57, r24	; 0x39
    1eca:	89 ad       	ldd	r24, Y+57	; 0x39
    1ecc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <LCD_sendCommand+0x4a6>
    1ed2:	9a af       	std	Y+58, r25	; 0x3a
    1ed4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	62 e0       	ldi	r22, 0x02	; 2
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	a0 e8       	ldi	r26, 0x80	; 128
    1ee6:	bf e3       	ldi	r27, 0x3F	; 63
    1ee8:	8d ab       	std	Y+53, r24	; 0x35
    1eea:	9e ab       	std	Y+54, r25	; 0x36
    1eec:	af ab       	std	Y+55, r26	; 0x37
    1eee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ef2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ef4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ef6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a e7       	ldi	r20, 0x7A	; 122
    1efe:	55 e4       	ldi	r21, 0x45	; 69
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	89 ab       	std	Y+49, r24	; 0x31
    1f0a:	9a ab       	std	Y+50, r25	; 0x32
    1f0c:	ab ab       	std	Y+51, r26	; 0x33
    1f0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f10:	69 a9       	ldd	r22, Y+49	; 0x31
    1f12:	7a a9       	ldd	r23, Y+50	; 0x32
    1f14:	8b a9       	ldd	r24, Y+51	; 0x33
    1f16:	9c a9       	ldd	r25, Y+52	; 0x34
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	5f e3       	ldi	r21, 0x3F	; 63
    1f20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f24:	88 23       	and	r24, r24
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	98 ab       	std	Y+48, r25	; 0x30
    1f2e:	8f a7       	std	Y+47, r24	; 0x2f
    1f30:	3f c0       	rjmp	.+126    	; 0x1fb0 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1f32:	69 a9       	ldd	r22, Y+49	; 0x31
    1f34:	7a a9       	ldd	r23, Y+50	; 0x32
    1f36:	8b a9       	ldd	r24, Y+51	; 0x33
    1f38:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	4c f5       	brge	.+82     	; 0x1f9c <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f4c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f4e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f50:	98 ad       	ldd	r25, Y+56	; 0x38
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	98 ab       	std	Y+48, r25	; 0x30
    1f70:	8f a7       	std	Y+47, r24	; 0x2f
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <LCD_sendCommand+0x56a>
    1f74:	80 e9       	ldi	r24, 0x90	; 144
    1f76:	91 e0       	ldi	r25, 0x01	; 1
    1f78:	9e a7       	std	Y+46, r25	; 0x2e
    1f7a:	8d a7       	std	Y+45, r24	; 0x2d
    1f7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LCD_sendCommand+0x558>
    1f84:	9e a7       	std	Y+46, r25	; 0x2e
    1f86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	98 ab       	std	Y+48, r25	; 0x30
    1f90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f94:	98 a9       	ldd	r25, Y+48	; 0x30
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <LCD_sendCommand+0x54c>
    1f9a:	14 c0       	rjmp	.+40     	; 0x1fc4 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	98 ab       	std	Y+48, r25	; 0x30
    1fae:	8f a7       	std	Y+47, r24	; 0x2f
    1fb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb4:	9c a7       	std	Y+44, r25	; 0x2c
    1fb6:	8b a7       	std	Y+43, r24	; 0x2b
    1fb8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fba:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_sendCommand+0x594>
    1fc0:	9c a7       	std	Y+44, r25	; 0x2c
    1fc2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	62 e0       	ldi	r22, 0x02	; 2
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a0 e8       	ldi	r26, 0x80	; 128
    1fd4:	bf e3       	ldi	r27, 0x3F	; 63
    1fd6:	8f a3       	std	Y+39, r24	; 0x27
    1fd8:	98 a7       	std	Y+40, r25	; 0x28
    1fda:	a9 a7       	std	Y+41, r26	; 0x29
    1fdc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	6f a1       	ldd	r22, Y+39	; 0x27
    1fe0:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe2:	89 a5       	ldd	r24, Y+41	; 0x29
    1fe4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	4a e7       	ldi	r20, 0x7A	; 122
    1fec:	55 e4       	ldi	r21, 0x45	; 69
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	8b a3       	std	Y+35, r24	; 0x23
    1ff8:	9c a3       	std	Y+36, r25	; 0x24
    1ffa:	ad a3       	std	Y+37, r26	; 0x25
    1ffc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ffe:	6b a1       	ldd	r22, Y+35	; 0x23
    2000:	7c a1       	ldd	r23, Y+36	; 0x24
    2002:	8d a1       	ldd	r24, Y+37	; 0x25
    2004:	9e a1       	ldd	r25, Y+38	; 0x26
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	2c f4       	brge	.+10     	; 0x2020 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	9a a3       	std	Y+34, r25	; 0x22
    201c:	89 a3       	std	Y+33, r24	; 0x21
    201e:	3f c0       	rjmp	.+126    	; 0x209e <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2020:	6b a1       	ldd	r22, Y+35	; 0x23
    2022:	7c a1       	ldd	r23, Y+36	; 0x24
    2024:	8d a1       	ldd	r24, Y+37	; 0x25
    2026:	9e a1       	ldd	r25, Y+38	; 0x26
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	3f ef       	ldi	r19, 0xFF	; 255
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	57 e4       	ldi	r21, 0x47	; 71
    2030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2034:	18 16       	cp	r1, r24
    2036:	4c f5       	brge	.+82     	; 0x208a <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2038:	6f a1       	ldd	r22, Y+39	; 0x27
    203a:	78 a5       	ldd	r23, Y+40	; 0x28
    203c:	89 a5       	ldd	r24, Y+41	; 0x29
    203e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e2       	ldi	r20, 0x20	; 32
    2046:	51 e4       	ldi	r21, 0x41	; 65
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	9a a3       	std	Y+34, r25	; 0x22
    205e:	89 a3       	std	Y+33, r24	; 0x21
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <LCD_sendCommand+0x658>
    2062:	80 e9       	ldi	r24, 0x90	; 144
    2064:	91 e0       	ldi	r25, 0x01	; 1
    2066:	98 a3       	std	Y+32, r25	; 0x20
    2068:	8f 8f       	std	Y+31, r24	; 0x1f
    206a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    206c:	98 a1       	ldd	r25, Y+32	; 0x20
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_sendCommand+0x646>
    2072:	98 a3       	std	Y+32, r25	; 0x20
    2074:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2076:	89 a1       	ldd	r24, Y+33	; 0x21
    2078:	9a a1       	ldd	r25, Y+34	; 0x22
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	9a a3       	std	Y+34, r25	; 0x22
    207e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2080:	89 a1       	ldd	r24, Y+33	; 0x21
    2082:	9a a1       	ldd	r25, Y+34	; 0x22
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	69 f7       	brne	.-38     	; 0x2062 <LCD_sendCommand+0x63a>
    2088:	14 c0       	rjmp	.+40     	; 0x20b2 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208a:	6b a1       	ldd	r22, Y+35	; 0x23
    208c:	7c a1       	ldd	r23, Y+36	; 0x24
    208e:	8d a1       	ldd	r24, Y+37	; 0x25
    2090:	9e a1       	ldd	r25, Y+38	; 0x26
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9a a3       	std	Y+34, r25	; 0x22
    209c:	89 a3       	std	Y+33, r24	; 0x21
    209e:	89 a1       	ldd	r24, Y+33	; 0x21
    20a0:	9a a1       	ldd	r25, Y+34	; 0x22
    20a2:	9e 8f       	std	Y+30, r25	; 0x1e
    20a4:	8d 8f       	std	Y+29, r24	; 0x1d
    20a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_sendCommand+0x682>
    20ae:	9e 8f       	std	Y+30, r25	; 0x1e
    20b0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    20b2:	fe 01       	movw	r30, r28
    20b4:	ed 59       	subi	r30, 0x9D	; 157
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 81       	ld	r24, Z
    20ba:	98 2f       	mov	r25, r24
    20bc:	91 70       	andi	r25, 0x01	; 1
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	63 e0       	ldi	r22, 0x03	; 3
    20c2:	49 2f       	mov	r20, r25
    20c4:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    20c8:	fe 01       	movw	r30, r28
    20ca:	ed 59       	subi	r30, 0x9D	; 157
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	80 81       	ld	r24, Z
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	82 70       	andi	r24, 0x02	; 2
    20d6:	90 70       	andi	r25, 0x00	; 0
    20d8:	95 95       	asr	r25
    20da:	87 95       	ror	r24
    20dc:	98 2f       	mov	r25, r24
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	64 e0       	ldi	r22, 0x04	; 4
    20e2:	49 2f       	mov	r20, r25
    20e4:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    20e8:	fe 01       	movw	r30, r28
    20ea:	ed 59       	subi	r30, 0x9D	; 157
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	80 81       	ld	r24, Z
    20f0:	88 2f       	mov	r24, r24
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	84 70       	andi	r24, 0x04	; 4
    20f6:	90 70       	andi	r25, 0x00	; 0
    20f8:	95 95       	asr	r25
    20fa:	87 95       	ror	r24
    20fc:	95 95       	asr	r25
    20fe:	87 95       	ror	r24
    2100:	98 2f       	mov	r25, r24
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	65 e0       	ldi	r22, 0x05	; 5
    2106:	49 2f       	mov	r20, r25
    2108:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    210c:	fe 01       	movw	r30, r28
    210e:	ed 59       	subi	r30, 0x9D	; 157
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	80 81       	ld	r24, Z
    2114:	88 2f       	mov	r24, r24
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	88 70       	andi	r24, 0x08	; 8
    211a:	90 70       	andi	r25, 0x00	; 0
    211c:	95 95       	asr	r25
    211e:	87 95       	ror	r24
    2120:	95 95       	asr	r25
    2122:	87 95       	ror	r24
    2124:	95 95       	asr	r25
    2126:	87 95       	ror	r24
    2128:	98 2f       	mov	r25, r24
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	66 e0       	ldi	r22, 0x06	; 6
    212e:	49 2f       	mov	r20, r25
    2130:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e8       	ldi	r26, 0x80	; 128
    213a:	bf e3       	ldi	r27, 0x3F	; 63
    213c:	89 8f       	std	Y+25, r24	; 0x19
    213e:	9a 8f       	std	Y+26, r25	; 0x1a
    2140:	ab 8f       	std	Y+27, r26	; 0x1b
    2142:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2144:	69 8d       	ldd	r22, Y+25	; 0x19
    2146:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2148:	8b 8d       	ldd	r24, Y+27	; 0x1b
    214a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a e7       	ldi	r20, 0x7A	; 122
    2152:	55 e4       	ldi	r21, 0x45	; 69
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8d 8b       	std	Y+21, r24	; 0x15
    215e:	9e 8b       	std	Y+22, r25	; 0x16
    2160:	af 8b       	std	Y+23, r26	; 0x17
    2162:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2164:	6d 89       	ldd	r22, Y+21	; 0x15
    2166:	7e 89       	ldd	r23, Y+22	; 0x16
    2168:	8f 89       	ldd	r24, Y+23	; 0x17
    216a:	98 8d       	ldd	r25, Y+24	; 0x18
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	2c f4       	brge	.+10     	; 0x2186 <LCD_sendCommand+0x75e>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9c 8b       	std	Y+20, r25	; 0x14
    2182:	8b 8b       	std	Y+19, r24	; 0x13
    2184:	3f c0       	rjmp	.+126    	; 0x2204 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2186:	6d 89       	ldd	r22, Y+21	; 0x15
    2188:	7e 89       	ldd	r23, Y+22	; 0x16
    218a:	8f 89       	ldd	r24, Y+23	; 0x17
    218c:	98 8d       	ldd	r25, Y+24	; 0x18
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    219a:	18 16       	cp	r1, r24
    219c:	4c f5       	brge	.+82     	; 0x21f0 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219e:	69 8d       	ldd	r22, Y+25	; 0x19
    21a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9c 8b       	std	Y+20, r25	; 0x14
    21c4:	8b 8b       	std	Y+19, r24	; 0x13
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <LCD_sendCommand+0x7be>
    21c8:	80 e9       	ldi	r24, 0x90	; 144
    21ca:	91 e0       	ldi	r25, 0x01	; 1
    21cc:	9a 8b       	std	Y+18, r25	; 0x12
    21ce:	89 8b       	std	Y+17, r24	; 0x11
    21d0:	89 89       	ldd	r24, Y+17	; 0x11
    21d2:	9a 89       	ldd	r25, Y+18	; 0x12
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_sendCommand+0x7ac>
    21d8:	9a 8b       	std	Y+18, r25	; 0x12
    21da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21dc:	8b 89       	ldd	r24, Y+19	; 0x13
    21de:	9c 89       	ldd	r25, Y+20	; 0x14
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	9c 8b       	std	Y+20, r25	; 0x14
    21e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	8b 89       	ldd	r24, Y+19	; 0x13
    21e8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	69 f7       	brne	.-38     	; 0x21c8 <LCD_sendCommand+0x7a0>
    21ee:	14 c0       	rjmp	.+40     	; 0x2218 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f0:	6d 89       	ldd	r22, Y+21	; 0x15
    21f2:	7e 89       	ldd	r23, Y+22	; 0x16
    21f4:	8f 89       	ldd	r24, Y+23	; 0x17
    21f6:	98 8d       	ldd	r25, Y+24	; 0x18
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9c 8b       	std	Y+20, r25	; 0x14
    2202:	8b 8b       	std	Y+19, r24	; 0x13
    2204:	8b 89       	ldd	r24, Y+19	; 0x13
    2206:	9c 89       	ldd	r25, Y+20	; 0x14
    2208:	98 8b       	std	Y+16, r25	; 0x10
    220a:	8f 87       	std	Y+15, r24	; 0x0f
    220c:	8f 85       	ldd	r24, Y+15	; 0x0f
    220e:	98 89       	ldd	r25, Y+16	; 0x10
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_sendCommand+0x7e8>
    2214:	98 8b       	std	Y+16, r25	; 0x10
    2216:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	62 e0       	ldi	r22, 0x02	; 2
    221c:	40 e0       	ldi	r20, 0x00	; 0
    221e:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	a0 e8       	ldi	r26, 0x80	; 128
    2228:	bf e3       	ldi	r27, 0x3F	; 63
    222a:	8b 87       	std	Y+11, r24	; 0x0b
    222c:	9c 87       	std	Y+12, r25	; 0x0c
    222e:	ad 87       	std	Y+13, r26	; 0x0d
    2230:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2232:	6b 85       	ldd	r22, Y+11	; 0x0b
    2234:	7c 85       	ldd	r23, Y+12	; 0x0c
    2236:	8d 85       	ldd	r24, Y+13	; 0x0d
    2238:	9e 85       	ldd	r25, Y+14	; 0x0e
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	4a e7       	ldi	r20, 0x7A	; 122
    2240:	55 e4       	ldi	r21, 0x45	; 69
    2242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	8f 83       	std	Y+7, r24	; 0x07
    224c:	98 87       	std	Y+8, r25	; 0x08
    224e:	a9 87       	std	Y+9, r26	; 0x09
    2250:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2252:	6f 81       	ldd	r22, Y+7	; 0x07
    2254:	78 85       	ldd	r23, Y+8	; 0x08
    2256:	89 85       	ldd	r24, Y+9	; 0x09
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e8       	ldi	r20, 0x80	; 128
    2260:	5f e3       	ldi	r21, 0x3F	; 63
    2262:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2266:	88 23       	and	r24, r24
    2268:	2c f4       	brge	.+10     	; 0x2274 <LCD_sendCommand+0x84c>
		__ticks = 1;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
    2272:	3f c0       	rjmp	.+126    	; 0x22f2 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2274:	6f 81       	ldd	r22, Y+7	; 0x07
    2276:	78 85       	ldd	r23, Y+8	; 0x08
    2278:	89 85       	ldd	r24, Y+9	; 0x09
    227a:	9a 85       	ldd	r25, Y+10	; 0x0a
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	3f ef       	ldi	r19, 0xFF	; 255
    2280:	4f e7       	ldi	r20, 0x7F	; 127
    2282:	57 e4       	ldi	r21, 0x47	; 71
    2284:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2288:	18 16       	cp	r1, r24
    228a:	4c f5       	brge	.+82     	; 0x22de <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	6b 85       	ldd	r22, Y+11	; 0x0b
    228e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2290:	8d 85       	ldd	r24, Y+13	; 0x0d
    2292:	9e 85       	ldd	r25, Y+14	; 0x0e
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e2       	ldi	r20, 0x20	; 32
    229a:	51 e4       	ldi	r21, 0x41	; 65
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
    22b4:	0f c0       	rjmp	.+30     	; 0x22d4 <LCD_sendCommand+0x8ac>
    22b6:	80 e9       	ldi	r24, 0x90	; 144
    22b8:	91 e0       	ldi	r25, 0x01	; 1
    22ba:	9c 83       	std	Y+4, r25	; 0x04
    22bc:	8b 83       	std	Y+3, r24	; 0x03
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <LCD_sendCommand+0x89a>
    22c6:	9c 83       	std	Y+4, r25	; 0x04
    22c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ca:	8d 81       	ldd	r24, Y+5	; 0x05
    22cc:	9e 81       	ldd	r25, Y+6	; 0x06
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d4:	8d 81       	ldd	r24, Y+5	; 0x05
    22d6:	9e 81       	ldd	r25, Y+6	; 0x06
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	69 f7       	brne	.-38     	; 0x22b6 <LCD_sendCommand+0x88e>
    22dc:	14 c0       	rjmp	.+40     	; 0x2306 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	9a 83       	std	Y+2, r25	; 0x02
    22f8:	89 83       	std	Y+1, r24	; 0x01
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	9a 81       	ldd	r25, Y+2	; 0x02
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_sendCommand+0x8d6>
    2302:	9a 83       	std	Y+2, r25	; 0x02
    2304:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2306:	cd 59       	subi	r28, 0x9D	; 157
    2308:	df 4f       	sbci	r29, 0xFF	; 255
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	1f 91       	pop	r17
    231a:	0f 91       	pop	r16
    231c:	08 95       	ret

0000231e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	c3 56       	subi	r28, 0x63	; 99
    232c:	d0 40       	sbci	r29, 0x00	; 0
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	fe 01       	movw	r30, r28
    233a:	ed 59       	subi	r30, 0x9D	; 157
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	61 e0       	ldi	r22, 0x01	; 1
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    234a:	fe 01       	movw	r30, r28
    234c:	e1 5a       	subi	r30, 0xA1	; 161
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a0 e8       	ldi	r26, 0x80	; 128
    2356:	bf e3       	ldi	r27, 0x3F	; 63
    2358:	80 83       	st	Z, r24
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	a2 83       	std	Z+2, r26	; 0x02
    235e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2360:	8e 01       	movw	r16, r28
    2362:	05 5a       	subi	r16, 0xA5	; 165
    2364:	1f 4f       	sbci	r17, 0xFF	; 255
    2366:	fe 01       	movw	r30, r28
    2368:	e1 5a       	subi	r30, 0xA1	; 161
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	4a e7       	ldi	r20, 0x7A	; 122
    237a:	55 e4       	ldi	r21, 0x45	; 69
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	f8 01       	movw	r30, r16
    2386:	80 83       	st	Z, r24
    2388:	91 83       	std	Z+1, r25	; 0x01
    238a:	a2 83       	std	Z+2, r26	; 0x02
    238c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    238e:	fe 01       	movw	r30, r28
    2390:	e5 5a       	subi	r30, 0xA5	; 165
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23a8:	88 23       	and	r24, r24
    23aa:	44 f4       	brge	.+16     	; 0x23bc <LCD_displayCharacter+0x9e>
		__ticks = 1;
    23ac:	fe 01       	movw	r30, r28
    23ae:	e7 5a       	subi	r30, 0xA7	; 167
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	80 83       	st	Z, r24
    23ba:	64 c0       	rjmp	.+200    	; 0x2484 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    23bc:	fe 01       	movw	r30, r28
    23be:	e5 5a       	subi	r30, 0xA5	; 165
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	60 81       	ld	r22, Z
    23c4:	71 81       	ldd	r23, Z+1	; 0x01
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	93 81       	ldd	r25, Z+3	; 0x03
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	3f ef       	ldi	r19, 0xFF	; 255
    23ce:	4f e7       	ldi	r20, 0x7F	; 127
    23d0:	57 e4       	ldi	r21, 0x47	; 71
    23d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23d6:	18 16       	cp	r1, r24
    23d8:	0c f0       	brlt	.+2      	; 0x23dc <LCD_displayCharacter+0xbe>
    23da:	43 c0       	rjmp	.+134    	; 0x2462 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23dc:	fe 01       	movw	r30, r28
    23de:	e1 5a       	subi	r30, 0xA1	; 161
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	60 81       	ld	r22, Z
    23e4:	71 81       	ldd	r23, Z+1	; 0x01
    23e6:	82 81       	ldd	r24, Z+2	; 0x02
    23e8:	93 81       	ldd	r25, Z+3	; 0x03
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e2       	ldi	r20, 0x20	; 32
    23f0:	51 e4       	ldi	r21, 0x41	; 65
    23f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	8e 01       	movw	r16, r28
    23fc:	07 5a       	subi	r16, 0xA7	; 167
    23fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	f8 01       	movw	r30, r16
    240e:	91 83       	std	Z+1, r25	; 0x01
    2410:	80 83       	st	Z, r24
    2412:	1f c0       	rjmp	.+62     	; 0x2452 <LCD_displayCharacter+0x134>
    2414:	fe 01       	movw	r30, r28
    2416:	e9 5a       	subi	r30, 0xA9	; 169
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 e9       	ldi	r24, 0x90	; 144
    241c:	91 e0       	ldi	r25, 0x01	; 1
    241e:	91 83       	std	Z+1, r25	; 0x01
    2420:	80 83       	st	Z, r24
    2422:	fe 01       	movw	r30, r28
    2424:	e9 5a       	subi	r30, 0xA9	; 169
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	80 81       	ld	r24, Z
    242a:	91 81       	ldd	r25, Z+1	; 0x01
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <LCD_displayCharacter+0x10e>
    2430:	fe 01       	movw	r30, r28
    2432:	e9 5a       	subi	r30, 0xA9	; 169
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	91 83       	std	Z+1, r25	; 0x01
    2438:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243a:	de 01       	movw	r26, r28
    243c:	a7 5a       	subi	r26, 0xA7	; 167
    243e:	bf 4f       	sbci	r27, 0xFF	; 255
    2440:	fe 01       	movw	r30, r28
    2442:	e7 5a       	subi	r30, 0xA7	; 167
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	80 81       	ld	r24, Z
    2448:	91 81       	ldd	r25, Z+1	; 0x01
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	11 96       	adiw	r26, 0x01	; 1
    244e:	9c 93       	st	X, r25
    2450:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2452:	fe 01       	movw	r30, r28
    2454:	e7 5a       	subi	r30, 0xA7	; 167
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	d1 f6       	brne	.-76     	; 0x2414 <LCD_displayCharacter+0xf6>
    2460:	27 c0       	rjmp	.+78     	; 0x24b0 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2462:	8e 01       	movw	r16, r28
    2464:	07 5a       	subi	r16, 0xA7	; 167
    2466:	1f 4f       	sbci	r17, 0xFF	; 255
    2468:	fe 01       	movw	r30, r28
    246a:	e5 5a       	subi	r30, 0xA5	; 165
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	60 81       	ld	r22, Z
    2470:	71 81       	ldd	r23, Z+1	; 0x01
    2472:	82 81       	ldd	r24, Z+2	; 0x02
    2474:	93 81       	ldd	r25, Z+3	; 0x03
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	f8 01       	movw	r30, r16
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	80 83       	st	Z, r24
    2484:	de 01       	movw	r26, r28
    2486:	ab 5a       	subi	r26, 0xAB	; 171
    2488:	bf 4f       	sbci	r27, 0xFF	; 255
    248a:	fe 01       	movw	r30, r28
    248c:	e7 5a       	subi	r30, 0xA7	; 167
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	8d 93       	st	X+, r24
    2496:	9c 93       	st	X, r25
    2498:	fe 01       	movw	r30, r28
    249a:	eb 5a       	subi	r30, 0xAB	; 171
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	80 81       	ld	r24, Z
    24a0:	91 81       	ldd	r25, Z+1	; 0x01
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <LCD_displayCharacter+0x184>
    24a6:	fe 01       	movw	r30, r28
    24a8:	eb 5a       	subi	r30, 0xAB	; 171
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	91 83       	std	Z+1, r25	; 0x01
    24ae:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	62 e0       	ldi	r22, 0x02	; 2
    24b4:	41 e0       	ldi	r20, 0x01	; 1
    24b6:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    24ba:	fe 01       	movw	r30, r28
    24bc:	ef 5a       	subi	r30, 0xAF	; 175
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	a0 e8       	ldi	r26, 0x80	; 128
    24c6:	bf e3       	ldi	r27, 0x3F	; 63
    24c8:	80 83       	st	Z, r24
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	a2 83       	std	Z+2, r26	; 0x02
    24ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d0:	8e 01       	movw	r16, r28
    24d2:	03 5b       	subi	r16, 0xB3	; 179
    24d4:	1f 4f       	sbci	r17, 0xFF	; 255
    24d6:	fe 01       	movw	r30, r28
    24d8:	ef 5a       	subi	r30, 0xAF	; 175
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	60 81       	ld	r22, Z
    24de:	71 81       	ldd	r23, Z+1	; 0x01
    24e0:	82 81       	ldd	r24, Z+2	; 0x02
    24e2:	93 81       	ldd	r25, Z+3	; 0x03
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	4a e7       	ldi	r20, 0x7A	; 122
    24ea:	55 e4       	ldi	r21, 0x45	; 69
    24ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	f8 01       	movw	r30, r16
    24f6:	80 83       	st	Z, r24
    24f8:	91 83       	std	Z+1, r25	; 0x01
    24fa:	a2 83       	std	Z+2, r26	; 0x02
    24fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24fe:	fe 01       	movw	r30, r28
    2500:	e3 5b       	subi	r30, 0xB3	; 179
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	60 81       	ld	r22, Z
    2506:	71 81       	ldd	r23, Z+1	; 0x01
    2508:	82 81       	ldd	r24, Z+2	; 0x02
    250a:	93 81       	ldd	r25, Z+3	; 0x03
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e8       	ldi	r20, 0x80	; 128
    2512:	5f e3       	ldi	r21, 0x3F	; 63
    2514:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2518:	88 23       	and	r24, r24
    251a:	44 f4       	brge	.+16     	; 0x252c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    251c:	fe 01       	movw	r30, r28
    251e:	e5 5b       	subi	r30, 0xB5	; 181
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	80 83       	st	Z, r24
    252a:	64 c0       	rjmp	.+200    	; 0x25f4 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    252c:	fe 01       	movw	r30, r28
    252e:	e3 5b       	subi	r30, 0xB3	; 179
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	60 81       	ld	r22, Z
    2534:	71 81       	ldd	r23, Z+1	; 0x01
    2536:	82 81       	ldd	r24, Z+2	; 0x02
    2538:	93 81       	ldd	r25, Z+3	; 0x03
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	3f ef       	ldi	r19, 0xFF	; 255
    253e:	4f e7       	ldi	r20, 0x7F	; 127
    2540:	57 e4       	ldi	r21, 0x47	; 71
    2542:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2546:	18 16       	cp	r1, r24
    2548:	0c f0       	brlt	.+2      	; 0x254c <LCD_displayCharacter+0x22e>
    254a:	43 c0       	rjmp	.+134    	; 0x25d2 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254c:	fe 01       	movw	r30, r28
    254e:	ef 5a       	subi	r30, 0xAF	; 175
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	60 81       	ld	r22, Z
    2554:	71 81       	ldd	r23, Z+1	; 0x01
    2556:	82 81       	ldd	r24, Z+2	; 0x02
    2558:	93 81       	ldd	r25, Z+3	; 0x03
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e2       	ldi	r20, 0x20	; 32
    2560:	51 e4       	ldi	r21, 0x41	; 65
    2562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	8e 01       	movw	r16, r28
    256c:	05 5b       	subi	r16, 0xB5	; 181
    256e:	1f 4f       	sbci	r17, 0xFF	; 255
    2570:	bc 01       	movw	r22, r24
    2572:	cd 01       	movw	r24, r26
    2574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	f8 01       	movw	r30, r16
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	80 83       	st	Z, r24
    2582:	1f c0       	rjmp	.+62     	; 0x25c2 <LCD_displayCharacter+0x2a4>
    2584:	fe 01       	movw	r30, r28
    2586:	e7 5b       	subi	r30, 0xB7	; 183
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 e9       	ldi	r24, 0x90	; 144
    258c:	91 e0       	ldi	r25, 0x01	; 1
    258e:	91 83       	std	Z+1, r25	; 0x01
    2590:	80 83       	st	Z, r24
    2592:	fe 01       	movw	r30, r28
    2594:	e7 5b       	subi	r30, 0xB7	; 183
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <LCD_displayCharacter+0x27e>
    25a0:	fe 01       	movw	r30, r28
    25a2:	e7 5b       	subi	r30, 0xB7	; 183
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	91 83       	std	Z+1, r25	; 0x01
    25a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25aa:	de 01       	movw	r26, r28
    25ac:	a5 5b       	subi	r26, 0xB5	; 181
    25ae:	bf 4f       	sbci	r27, 0xFF	; 255
    25b0:	fe 01       	movw	r30, r28
    25b2:	e5 5b       	subi	r30, 0xB5	; 181
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 81       	ld	r24, Z
    25b8:	91 81       	ldd	r25, Z+1	; 0x01
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	11 96       	adiw	r26, 0x01	; 1
    25be:	9c 93       	st	X, r25
    25c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c2:	fe 01       	movw	r30, r28
    25c4:	e5 5b       	subi	r30, 0xB5	; 181
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	91 81       	ldd	r25, Z+1	; 0x01
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	d1 f6       	brne	.-76     	; 0x2584 <LCD_displayCharacter+0x266>
    25d0:	27 c0       	rjmp	.+78     	; 0x2620 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d2:	8e 01       	movw	r16, r28
    25d4:	05 5b       	subi	r16, 0xB5	; 181
    25d6:	1f 4f       	sbci	r17, 0xFF	; 255
    25d8:	fe 01       	movw	r30, r28
    25da:	e3 5b       	subi	r30, 0xB3	; 179
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	60 81       	ld	r22, Z
    25e0:	71 81       	ldd	r23, Z+1	; 0x01
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	f8 01       	movw	r30, r16
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	80 83       	st	Z, r24
    25f4:	de 01       	movw	r26, r28
    25f6:	a9 5b       	subi	r26, 0xB9	; 185
    25f8:	bf 4f       	sbci	r27, 0xFF	; 255
    25fa:	fe 01       	movw	r30, r28
    25fc:	e5 5b       	subi	r30, 0xB5	; 181
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	91 81       	ldd	r25, Z+1	; 0x01
    2604:	8d 93       	st	X+, r24
    2606:	9c 93       	st	X, r25
    2608:	fe 01       	movw	r30, r28
    260a:	e9 5b       	subi	r30, 0xB9	; 185
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	f1 f7       	brne	.-4      	; 0x2612 <LCD_displayCharacter+0x2f4>
    2616:	fe 01       	movw	r30, r28
    2618:	e9 5b       	subi	r30, 0xB9	; 185
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	91 83       	std	Z+1, r25	; 0x01
    261e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2620:	fe 01       	movw	r30, r28
    2622:	ed 59       	subi	r30, 0x9D	; 157
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 81       	ld	r24, Z
    2628:	88 2f       	mov	r24, r24
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	80 71       	andi	r24, 0x10	; 16
    262e:	90 70       	andi	r25, 0x00	; 0
    2630:	95 95       	asr	r25
    2632:	87 95       	ror	r24
    2634:	95 95       	asr	r25
    2636:	87 95       	ror	r24
    2638:	95 95       	asr	r25
    263a:	87 95       	ror	r24
    263c:	95 95       	asr	r25
    263e:	87 95       	ror	r24
    2640:	98 2f       	mov	r25, r24
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	63 e0       	ldi	r22, 0x03	; 3
    2646:	49 2f       	mov	r20, r25
    2648:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    264c:	fe 01       	movw	r30, r28
    264e:	ed 59       	subi	r30, 0x9D	; 157
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	80 81       	ld	r24, Z
    2654:	88 2f       	mov	r24, r24
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	80 72       	andi	r24, 0x20	; 32
    265a:	90 70       	andi	r25, 0x00	; 0
    265c:	95 95       	asr	r25
    265e:	87 95       	ror	r24
    2660:	95 95       	asr	r25
    2662:	87 95       	ror	r24
    2664:	95 95       	asr	r25
    2666:	87 95       	ror	r24
    2668:	95 95       	asr	r25
    266a:	87 95       	ror	r24
    266c:	95 95       	asr	r25
    266e:	87 95       	ror	r24
    2670:	98 2f       	mov	r25, r24
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	64 e0       	ldi	r22, 0x04	; 4
    2676:	49 2f       	mov	r20, r25
    2678:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    267c:	fe 01       	movw	r30, r28
    267e:	ed 59       	subi	r30, 0x9D	; 157
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	80 81       	ld	r24, Z
    2684:	88 2f       	mov	r24, r24
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	80 74       	andi	r24, 0x40	; 64
    268a:	90 70       	andi	r25, 0x00	; 0
    268c:	08 2e       	mov	r0, r24
    268e:	89 2f       	mov	r24, r25
    2690:	00 0c       	add	r0, r0
    2692:	88 1f       	adc	r24, r24
    2694:	99 0b       	sbc	r25, r25
    2696:	00 0c       	add	r0, r0
    2698:	88 1f       	adc	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	98 2f       	mov	r25, r24
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	65 e0       	ldi	r22, 0x05	; 5
    26a2:	49 2f       	mov	r20, r25
    26a4:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    26a8:	fe 01       	movw	r30, r28
    26aa:	ed 59       	subi	r30, 0x9D	; 157
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	80 81       	ld	r24, Z
    26b0:	98 2f       	mov	r25, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	99 27       	eor	r25, r25
    26b6:	99 1f       	adc	r25, r25
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	66 e0       	ldi	r22, 0x06	; 6
    26bc:	49 2f       	mov	r20, r25
    26be:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    26c2:	fe 01       	movw	r30, r28
    26c4:	ed 5b       	subi	r30, 0xBD	; 189
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	a0 e8       	ldi	r26, 0x80	; 128
    26ce:	bf e3       	ldi	r27, 0x3F	; 63
    26d0:	80 83       	st	Z, r24
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	a2 83       	std	Z+2, r26	; 0x02
    26d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d8:	8e 01       	movw	r16, r28
    26da:	01 5c       	subi	r16, 0xC1	; 193
    26dc:	1f 4f       	sbci	r17, 0xFF	; 255
    26de:	fe 01       	movw	r30, r28
    26e0:	ed 5b       	subi	r30, 0xBD	; 189
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a e7       	ldi	r20, 0x7A	; 122
    26f2:	55 e4       	ldi	r21, 0x45	; 69
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	f8 01       	movw	r30, r16
    26fe:	80 83       	st	Z, r24
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	a2 83       	std	Z+2, r26	; 0x02
    2704:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2706:	fe 01       	movw	r30, r28
    2708:	ff 96       	adiw	r30, 0x3f	; 63
    270a:	60 81       	ld	r22, Z
    270c:	71 81       	ldd	r23, Z+1	; 0x01
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	93 81       	ldd	r25, Z+3	; 0x03
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e8       	ldi	r20, 0x80	; 128
    2718:	5f e3       	ldi	r21, 0x3F	; 63
    271a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    271e:	88 23       	and	r24, r24
    2720:	2c f4       	brge	.+10     	; 0x272c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9e af       	std	Y+62, r25	; 0x3e
    2728:	8d af       	std	Y+61, r24	; 0x3d
    272a:	46 c0       	rjmp	.+140    	; 0x27b8 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    272c:	fe 01       	movw	r30, r28
    272e:	ff 96       	adiw	r30, 0x3f	; 63
    2730:	60 81       	ld	r22, Z
    2732:	71 81       	ldd	r23, Z+1	; 0x01
    2734:	82 81       	ldd	r24, Z+2	; 0x02
    2736:	93 81       	ldd	r25, Z+3	; 0x03
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	3f ef       	ldi	r19, 0xFF	; 255
    273c:	4f e7       	ldi	r20, 0x7F	; 127
    273e:	57 e4       	ldi	r21, 0x47	; 71
    2740:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2744:	18 16       	cp	r1, r24
    2746:	64 f5       	brge	.+88     	; 0x27a0 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2748:	fe 01       	movw	r30, r28
    274a:	ed 5b       	subi	r30, 0xBD	; 189
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9e af       	std	Y+62, r25	; 0x3e
    2774:	8d af       	std	Y+61, r24	; 0x3d
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <LCD_displayCharacter+0x478>
    2778:	80 e9       	ldi	r24, 0x90	; 144
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	9c af       	std	Y+60, r25	; 0x3c
    277e:	8b af       	std	Y+59, r24	; 0x3b
    2780:	8b ad       	ldd	r24, Y+59	; 0x3b
    2782:	9c ad       	ldd	r25, Y+60	; 0x3c
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <LCD_displayCharacter+0x466>
    2788:	9c af       	std	Y+60, r25	; 0x3c
    278a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	8d ad       	ldd	r24, Y+61	; 0x3d
    278e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9e af       	std	Y+62, r25	; 0x3e
    2794:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	8d ad       	ldd	r24, Y+61	; 0x3d
    2798:	9e ad       	ldd	r25, Y+62	; 0x3e
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <LCD_displayCharacter+0x45a>
    279e:	16 c0       	rjmp	.+44     	; 0x27cc <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	fe 01       	movw	r30, r28
    27a2:	ff 96       	adiw	r30, 0x3f	; 63
    27a4:	60 81       	ld	r22, Z
    27a6:	71 81       	ldd	r23, Z+1	; 0x01
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	93 81       	ldd	r25, Z+3	; 0x03
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9e af       	std	Y+62, r25	; 0x3e
    27b6:	8d af       	std	Y+61, r24	; 0x3d
    27b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    27ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    27bc:	9a af       	std	Y+58, r25	; 0x3a
    27be:	89 af       	std	Y+57, r24	; 0x39
    27c0:	89 ad       	ldd	r24, Y+57	; 0x39
    27c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <LCD_displayCharacter+0x4a6>
    27c8:	9a af       	std	Y+58, r25	; 0x3a
    27ca:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	62 e0       	ldi	r22, 0x02	; 2
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	a0 e8       	ldi	r26, 0x80	; 128
    27dc:	bf e3       	ldi	r27, 0x3F	; 63
    27de:	8d ab       	std	Y+53, r24	; 0x35
    27e0:	9e ab       	std	Y+54, r25	; 0x36
    27e2:	af ab       	std	Y+55, r26	; 0x37
    27e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e6:	6d a9       	ldd	r22, Y+53	; 0x35
    27e8:	7e a9       	ldd	r23, Y+54	; 0x36
    27ea:	8f a9       	ldd	r24, Y+55	; 0x37
    27ec:	98 ad       	ldd	r25, Y+56	; 0x38
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	4a e7       	ldi	r20, 0x7A	; 122
    27f4:	55 e4       	ldi	r21, 0x45	; 69
    27f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	89 ab       	std	Y+49, r24	; 0x31
    2800:	9a ab       	std	Y+50, r25	; 0x32
    2802:	ab ab       	std	Y+51, r26	; 0x33
    2804:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2806:	69 a9       	ldd	r22, Y+49	; 0x31
    2808:	7a a9       	ldd	r23, Y+50	; 0x32
    280a:	8b a9       	ldd	r24, Y+51	; 0x33
    280c:	9c a9       	ldd	r25, Y+52	; 0x34
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e8       	ldi	r20, 0x80	; 128
    2814:	5f e3       	ldi	r21, 0x3F	; 63
    2816:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    281a:	88 23       	and	r24, r24
    281c:	2c f4       	brge	.+10     	; 0x2828 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	98 ab       	std	Y+48, r25	; 0x30
    2824:	8f a7       	std	Y+47, r24	; 0x2f
    2826:	3f c0       	rjmp	.+126    	; 0x28a6 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2828:	69 a9       	ldd	r22, Y+49	; 0x31
    282a:	7a a9       	ldd	r23, Y+50	; 0x32
    282c:	8b a9       	ldd	r24, Y+51	; 0x33
    282e:	9c a9       	ldd	r25, Y+52	; 0x34
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	3f ef       	ldi	r19, 0xFF	; 255
    2834:	4f e7       	ldi	r20, 0x7F	; 127
    2836:	57 e4       	ldi	r21, 0x47	; 71
    2838:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    283c:	18 16       	cp	r1, r24
    283e:	4c f5       	brge	.+82     	; 0x2892 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2840:	6d a9       	ldd	r22, Y+53	; 0x35
    2842:	7e a9       	ldd	r23, Y+54	; 0x36
    2844:	8f a9       	ldd	r24, Y+55	; 0x37
    2846:	98 ad       	ldd	r25, Y+56	; 0x38
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e2       	ldi	r20, 0x20	; 32
    284e:	51 e4       	ldi	r21, 0x41	; 65
    2850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	bc 01       	movw	r22, r24
    285a:	cd 01       	movw	r24, r26
    285c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	98 ab       	std	Y+48, r25	; 0x30
    2866:	8f a7       	std	Y+47, r24	; 0x2f
    2868:	0f c0       	rjmp	.+30     	; 0x2888 <LCD_displayCharacter+0x56a>
    286a:	80 e9       	ldi	r24, 0x90	; 144
    286c:	91 e0       	ldi	r25, 0x01	; 1
    286e:	9e a7       	std	Y+46, r25	; 0x2e
    2870:	8d a7       	std	Y+45, r24	; 0x2d
    2872:	8d a5       	ldd	r24, Y+45	; 0x2d
    2874:	9e a5       	ldd	r25, Y+46	; 0x2e
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <LCD_displayCharacter+0x558>
    287a:	9e a7       	std	Y+46, r25	; 0x2e
    287c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    287e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2880:	98 a9       	ldd	r25, Y+48	; 0x30
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	98 ab       	std	Y+48, r25	; 0x30
    2886:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2888:	8f a5       	ldd	r24, Y+47	; 0x2f
    288a:	98 a9       	ldd	r25, Y+48	; 0x30
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	69 f7       	brne	.-38     	; 0x286a <LCD_displayCharacter+0x54c>
    2890:	14 c0       	rjmp	.+40     	; 0x28ba <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2892:	69 a9       	ldd	r22, Y+49	; 0x31
    2894:	7a a9       	ldd	r23, Y+50	; 0x32
    2896:	8b a9       	ldd	r24, Y+51	; 0x33
    2898:	9c a9       	ldd	r25, Y+52	; 0x34
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	98 ab       	std	Y+48, r25	; 0x30
    28a4:	8f a7       	std	Y+47, r24	; 0x2f
    28a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28a8:	98 a9       	ldd	r25, Y+48	; 0x30
    28aa:	9c a7       	std	Y+44, r25	; 0x2c
    28ac:	8b a7       	std	Y+43, r24	; 0x2b
    28ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    28b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <LCD_displayCharacter+0x594>
    28b6:	9c a7       	std	Y+44, r25	; 0x2c
    28b8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	62 e0       	ldi	r22, 0x02	; 2
    28be:	41 e0       	ldi	r20, 0x01	; 1
    28c0:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	a0 e8       	ldi	r26, 0x80	; 128
    28ca:	bf e3       	ldi	r27, 0x3F	; 63
    28cc:	8f a3       	std	Y+39, r24	; 0x27
    28ce:	98 a7       	std	Y+40, r25	; 0x28
    28d0:	a9 a7       	std	Y+41, r26	; 0x29
    28d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d4:	6f a1       	ldd	r22, Y+39	; 0x27
    28d6:	78 a5       	ldd	r23, Y+40	; 0x28
    28d8:	89 a5       	ldd	r24, Y+41	; 0x29
    28da:	9a a5       	ldd	r25, Y+42	; 0x2a
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	4a e7       	ldi	r20, 0x7A	; 122
    28e2:	55 e4       	ldi	r21, 0x45	; 69
    28e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	8b a3       	std	Y+35, r24	; 0x23
    28ee:	9c a3       	std	Y+36, r25	; 0x24
    28f0:	ad a3       	std	Y+37, r26	; 0x25
    28f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28f4:	6b a1       	ldd	r22, Y+35	; 0x23
    28f6:	7c a1       	ldd	r23, Y+36	; 0x24
    28f8:	8d a1       	ldd	r24, Y+37	; 0x25
    28fa:	9e a1       	ldd	r25, Y+38	; 0x26
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	40 e8       	ldi	r20, 0x80	; 128
    2902:	5f e3       	ldi	r21, 0x3F	; 63
    2904:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2908:	88 23       	and	r24, r24
    290a:	2c f4       	brge	.+10     	; 0x2916 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	9a a3       	std	Y+34, r25	; 0x22
    2912:	89 a3       	std	Y+33, r24	; 0x21
    2914:	3f c0       	rjmp	.+126    	; 0x2994 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2916:	6b a1       	ldd	r22, Y+35	; 0x23
    2918:	7c a1       	ldd	r23, Y+36	; 0x24
    291a:	8d a1       	ldd	r24, Y+37	; 0x25
    291c:	9e a1       	ldd	r25, Y+38	; 0x26
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	3f ef       	ldi	r19, 0xFF	; 255
    2922:	4f e7       	ldi	r20, 0x7F	; 127
    2924:	57 e4       	ldi	r21, 0x47	; 71
    2926:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    292a:	18 16       	cp	r1, r24
    292c:	4c f5       	brge	.+82     	; 0x2980 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292e:	6f a1       	ldd	r22, Y+39	; 0x27
    2930:	78 a5       	ldd	r23, Y+40	; 0x28
    2932:	89 a5       	ldd	r24, Y+41	; 0x29
    2934:	9a a5       	ldd	r25, Y+42	; 0x2a
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e2       	ldi	r20, 0x20	; 32
    293c:	51 e4       	ldi	r21, 0x41	; 65
    293e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	bc 01       	movw	r22, r24
    2948:	cd 01       	movw	r24, r26
    294a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	9a a3       	std	Y+34, r25	; 0x22
    2954:	89 a3       	std	Y+33, r24	; 0x21
    2956:	0f c0       	rjmp	.+30     	; 0x2976 <LCD_displayCharacter+0x658>
    2958:	80 e9       	ldi	r24, 0x90	; 144
    295a:	91 e0       	ldi	r25, 0x01	; 1
    295c:	98 a3       	std	Y+32, r25	; 0x20
    295e:	8f 8f       	std	Y+31, r24	; 0x1f
    2960:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2962:	98 a1       	ldd	r25, Y+32	; 0x20
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <LCD_displayCharacter+0x646>
    2968:	98 a3       	std	Y+32, r25	; 0x20
    296a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296c:	89 a1       	ldd	r24, Y+33	; 0x21
    296e:	9a a1       	ldd	r25, Y+34	; 0x22
    2970:	01 97       	sbiw	r24, 0x01	; 1
    2972:	9a a3       	std	Y+34, r25	; 0x22
    2974:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2976:	89 a1       	ldd	r24, Y+33	; 0x21
    2978:	9a a1       	ldd	r25, Y+34	; 0x22
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	69 f7       	brne	.-38     	; 0x2958 <LCD_displayCharacter+0x63a>
    297e:	14 c0       	rjmp	.+40     	; 0x29a8 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2980:	6b a1       	ldd	r22, Y+35	; 0x23
    2982:	7c a1       	ldd	r23, Y+36	; 0x24
    2984:	8d a1       	ldd	r24, Y+37	; 0x25
    2986:	9e a1       	ldd	r25, Y+38	; 0x26
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	9a a3       	std	Y+34, r25	; 0x22
    2992:	89 a3       	std	Y+33, r24	; 0x21
    2994:	89 a1       	ldd	r24, Y+33	; 0x21
    2996:	9a a1       	ldd	r25, Y+34	; 0x22
    2998:	9e 8f       	std	Y+30, r25	; 0x1e
    299a:	8d 8f       	std	Y+29, r24	; 0x1d
    299c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    299e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	f1 f7       	brne	.-4      	; 0x29a0 <LCD_displayCharacter+0x682>
    29a4:	9e 8f       	std	Y+30, r25	; 0x1e
    29a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    29a8:	fe 01       	movw	r30, r28
    29aa:	ed 59       	subi	r30, 0x9D	; 157
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 81       	ld	r24, Z
    29b0:	98 2f       	mov	r25, r24
    29b2:	91 70       	andi	r25, 0x01	; 1
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	63 e0       	ldi	r22, 0x03	; 3
    29b8:	49 2f       	mov	r20, r25
    29ba:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    29be:	fe 01       	movw	r30, r28
    29c0:	ed 59       	subi	r30, 0x9D	; 157
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	80 81       	ld	r24, Z
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	82 70       	andi	r24, 0x02	; 2
    29cc:	90 70       	andi	r25, 0x00	; 0
    29ce:	95 95       	asr	r25
    29d0:	87 95       	ror	r24
    29d2:	98 2f       	mov	r25, r24
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	64 e0       	ldi	r22, 0x04	; 4
    29d8:	49 2f       	mov	r20, r25
    29da:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    29de:	fe 01       	movw	r30, r28
    29e0:	ed 59       	subi	r30, 0x9D	; 157
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	80 81       	ld	r24, Z
    29e6:	88 2f       	mov	r24, r24
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	84 70       	andi	r24, 0x04	; 4
    29ec:	90 70       	andi	r25, 0x00	; 0
    29ee:	95 95       	asr	r25
    29f0:	87 95       	ror	r24
    29f2:	95 95       	asr	r25
    29f4:	87 95       	ror	r24
    29f6:	98 2f       	mov	r25, r24
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	65 e0       	ldi	r22, 0x05	; 5
    29fc:	49 2f       	mov	r20, r25
    29fe:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2a02:	fe 01       	movw	r30, r28
    2a04:	ed 59       	subi	r30, 0x9D	; 157
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	80 81       	ld	r24, Z
    2a0a:	88 2f       	mov	r24, r24
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	88 70       	andi	r24, 0x08	; 8
    2a10:	90 70       	andi	r25, 0x00	; 0
    2a12:	95 95       	asr	r25
    2a14:	87 95       	ror	r24
    2a16:	95 95       	asr	r25
    2a18:	87 95       	ror	r24
    2a1a:	95 95       	asr	r25
    2a1c:	87 95       	ror	r24
    2a1e:	98 2f       	mov	r25, r24
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	66 e0       	ldi	r22, 0x06	; 6
    2a24:	49 2f       	mov	r20, r25
    2a26:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	a0 e8       	ldi	r26, 0x80	; 128
    2a30:	bf e3       	ldi	r27, 0x3F	; 63
    2a32:	89 8f       	std	Y+25, r24	; 0x19
    2a34:	9a 8f       	std	Y+26, r25	; 0x1a
    2a36:	ab 8f       	std	Y+27, r26	; 0x1b
    2a38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	4a e7       	ldi	r20, 0x7A	; 122
    2a48:	55 e4       	ldi	r21, 0x45	; 69
    2a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	8d 8b       	std	Y+21, r24	; 0x15
    2a54:	9e 8b       	std	Y+22, r25	; 0x16
    2a56:	af 8b       	std	Y+23, r26	; 0x17
    2a58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a60:	98 8d       	ldd	r25, Y+24	; 0x18
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e8       	ldi	r20, 0x80	; 128
    2a68:	5f e3       	ldi	r21, 0x3F	; 63
    2a6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a6e:	88 23       	and	r24, r24
    2a70:	2c f4       	brge	.+10     	; 0x2a7c <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	9c 8b       	std	Y+20, r25	; 0x14
    2a78:	8b 8b       	std	Y+19, r24	; 0x13
    2a7a:	3f c0       	rjmp	.+126    	; 0x2afa <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a80:	8f 89       	ldd	r24, Y+23	; 0x17
    2a82:	98 8d       	ldd	r25, Y+24	; 0x18
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	3f ef       	ldi	r19, 0xFF	; 255
    2a88:	4f e7       	ldi	r20, 0x7F	; 127
    2a8a:	57 e4       	ldi	r21, 0x47	; 71
    2a8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a90:	18 16       	cp	r1, r24
    2a92:	4c f5       	brge	.+82     	; 0x2ae6 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a94:	69 8d       	ldd	r22, Y+25	; 0x19
    2a96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e2       	ldi	r20, 0x20	; 32
    2aa2:	51 e4       	ldi	r21, 0x41	; 65
    2aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	bc 01       	movw	r22, r24
    2aae:	cd 01       	movw	r24, r26
    2ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	9c 8b       	std	Y+20, r25	; 0x14
    2aba:	8b 8b       	std	Y+19, r24	; 0x13
    2abc:	0f c0       	rjmp	.+30     	; 0x2adc <LCD_displayCharacter+0x7be>
    2abe:	80 e9       	ldi	r24, 0x90	; 144
    2ac0:	91 e0       	ldi	r25, 0x01	; 1
    2ac2:	9a 8b       	std	Y+18, r25	; 0x12
    2ac4:	89 8b       	std	Y+17, r24	; 0x11
    2ac6:	89 89       	ldd	r24, Y+17	; 0x11
    2ac8:	9a 89       	ldd	r25, Y+18	; 0x12
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <LCD_displayCharacter+0x7ac>
    2ace:	9a 8b       	std	Y+18, r25	; 0x12
    2ad0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	9c 8b       	std	Y+20, r25	; 0x14
    2ada:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2adc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ade:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	69 f7       	brne	.-38     	; 0x2abe <LCD_displayCharacter+0x7a0>
    2ae4:	14 c0       	rjmp	.+40     	; 0x2b0e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae8:	7e 89       	ldd	r23, Y+22	; 0x16
    2aea:	8f 89       	ldd	r24, Y+23	; 0x17
    2aec:	98 8d       	ldd	r25, Y+24	; 0x18
    2aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	9c 8b       	std	Y+20, r25	; 0x14
    2af8:	8b 8b       	std	Y+19, r24	; 0x13
    2afa:	8b 89       	ldd	r24, Y+19	; 0x13
    2afc:	9c 89       	ldd	r25, Y+20	; 0x14
    2afe:	98 8b       	std	Y+16, r25	; 0x10
    2b00:	8f 87       	std	Y+15, r24	; 0x0f
    2b02:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b04:	98 89       	ldd	r25, Y+16	; 0x10
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <LCD_displayCharacter+0x7e8>
    2b0a:	98 8b       	std	Y+16, r25	; 0x10
    2b0c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	62 e0       	ldi	r22, 0x02	; 2
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_writePin>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	a0 e8       	ldi	r26, 0x80	; 128
    2b1e:	bf e3       	ldi	r27, 0x3F	; 63
    2b20:	8b 87       	std	Y+11, r24	; 0x0b
    2b22:	9c 87       	std	Y+12, r25	; 0x0c
    2b24:	ad 87       	std	Y+13, r26	; 0x0d
    2b26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4a e7       	ldi	r20, 0x7A	; 122
    2b36:	55 e4       	ldi	r21, 0x45	; 69
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8f 83       	std	Y+7, r24	; 0x07
    2b42:	98 87       	std	Y+8, r25	; 0x08
    2b44:	a9 87       	std	Y+9, r26	; 0x09
    2b46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e8       	ldi	r20, 0x80	; 128
    2b56:	5f e3       	ldi	r21, 0x3F	; 63
    2b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b5c:	88 23       	and	r24, r24
    2b5e:	2c f4       	brge	.+10     	; 0x2b6a <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6c:	78 85       	ldd	r23, Y+8	; 0x08
    2b6e:	89 85       	ldd	r24, Y+9	; 0x09
    2b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	4c f5       	brge	.+82     	; 0x2bd4 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e2       	ldi	r20, 0x20	; 32
    2b90:	51 e4       	ldi	r21, 0x41	; 65
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9e 83       	std	Y+6, r25	; 0x06
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <LCD_displayCharacter+0x8ac>
    2bac:	80 e9       	ldi	r24, 0x90	; 144
    2bae:	91 e0       	ldi	r25, 0x01	; 1
    2bb0:	9c 83       	std	Y+4, r25	; 0x04
    2bb2:	8b 83       	std	Y+3, r24	; 0x03
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <LCD_displayCharacter+0x89a>
    2bbc:	9c 83       	std	Y+4, r25	; 0x04
    2bbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	8d 81       	ldd	r24, Y+5	; 0x05
    2bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	69 f7       	brne	.-38     	; 0x2bac <LCD_displayCharacter+0x88e>
    2bd2:	14 c0       	rjmp	.+40     	; 0x2bfc <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd6:	78 85       	ldd	r23, Y+8	; 0x08
    2bd8:	89 85       	ldd	r24, Y+9	; 0x09
    2bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9e 83       	std	Y+6, r25	; 0x06
    2be6:	8d 83       	std	Y+5, r24	; 0x05
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	9e 81       	ldd	r25, Y+6	; 0x06
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	89 83       	std	Y+1, r24	; 0x01
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <LCD_displayCharacter+0x8d6>
    2bf8:	9a 83       	std	Y+2, r25	; 0x02
    2bfa:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2bfc:	cd 59       	subi	r28, 0x9D	; 157
    2bfe:	df 4f       	sbci	r29, 0xFF	; 255
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	08 95       	ret

00002c14 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <LCD_displayString+0x6>
    2c1a:	0f 92       	push	r0
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    2c20:	9b 83       	std	Y+3, r25	; 0x03
    2c22:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c24:	19 82       	std	Y+1, r1	; 0x01
    2c26:	0e c0       	rjmp	.+28     	; 0x2c44 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	9b 81       	ldd	r25, Y+3	; 0x03
    2c32:	fc 01       	movw	r30, r24
    2c34:	e2 0f       	add	r30, r18
    2c36:	f3 1f       	adc	r31, r19
    2c38:	80 81       	ld	r24, Z
    2c3a:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_displayCharacter>
		i++;
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	8f 5f       	subi	r24, 0xFF	; 255
    2c42:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e2 0f       	add	r30, r18
    2c52:	f3 1f       	adc	r31, r19
    2c54:	80 81       	ld	r24, Z
    2c56:	88 23       	and	r24, r24
    2c58:	39 f7       	brne	.-50     	; 0x2c28 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	00 d0       	rcall	.+0      	; 0x2c6c <LCD_moveCursor+0x6>
    2c6c:	00 d0       	rcall	.+0      	; 0x2c6e <LCD_moveCursor+0x8>
    2c6e:	0f 92       	push	r0
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	8a 83       	std	Y+2, r24	; 0x02
    2c76:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	28 2f       	mov	r18, r24
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	3d 83       	std	Y+5, r19	; 0x05
    2c80:	2c 83       	std	Y+4, r18	; 0x04
    2c82:	8c 81       	ldd	r24, Y+4	; 0x04
    2c84:	9d 81       	ldd	r25, Y+5	; 0x05
    2c86:	81 30       	cpi	r24, 0x01	; 1
    2c88:	91 05       	cpc	r25, r1
    2c8a:	c1 f0       	breq	.+48     	; 0x2cbc <LCD_moveCursor+0x56>
    2c8c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c8e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c90:	22 30       	cpi	r18, 0x02	; 2
    2c92:	31 05       	cpc	r19, r1
    2c94:	2c f4       	brge	.+10     	; 0x2ca0 <LCD_moveCursor+0x3a>
    2c96:	8c 81       	ldd	r24, Y+4	; 0x04
    2c98:	9d 81       	ldd	r25, Y+5	; 0x05
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	61 f0       	breq	.+24     	; 0x2cb6 <LCD_moveCursor+0x50>
    2c9e:	19 c0       	rjmp	.+50     	; 0x2cd2 <LCD_moveCursor+0x6c>
    2ca0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ca2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ca4:	22 30       	cpi	r18, 0x02	; 2
    2ca6:	31 05       	cpc	r19, r1
    2ca8:	69 f0       	breq	.+26     	; 0x2cc4 <LCD_moveCursor+0x5e>
    2caa:	8c 81       	ldd	r24, Y+4	; 0x04
    2cac:	9d 81       	ldd	r25, Y+5	; 0x05
    2cae:	83 30       	cpi	r24, 0x03	; 3
    2cb0:	91 05       	cpc	r25, r1
    2cb2:	61 f0       	breq	.+24     	; 0x2ccc <LCD_moveCursor+0x66>
    2cb4:	0e c0       	rjmp	.+28     	; 0x2cd2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb8:	89 83       	std	Y+1, r24	; 0x01
    2cba:	0b c0       	rjmp	.+22     	; 0x2cd2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbe:	80 5c       	subi	r24, 0xC0	; 192
    2cc0:	89 83       	std	Y+1, r24	; 0x01
    2cc2:	07 c0       	rjmp	.+14     	; 0x2cd2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	80 5f       	subi	r24, 0xF0	; 240
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	03 c0       	rjmp	.+6      	; 0x2cd2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cce:	80 5b       	subi	r24, 0xB0	; 176
    2cd0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	80 68       	ori	r24, 0x80	; 128
    2cd6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_sendCommand>
}
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	cf 91       	pop	r28
    2ce6:	df 91       	pop	r29
    2ce8:	08 95       	ret

00002cea <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2cea:	df 93       	push	r29
    2cec:	cf 93       	push	r28
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <LCD_displayStringRowColumn+0x6>
    2cf0:	00 d0       	rcall	.+0      	; 0x2cf2 <LCD_displayStringRowColumn+0x8>
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	89 83       	std	Y+1, r24	; 0x01
    2cf8:	6a 83       	std	Y+2, r22	; 0x02
    2cfa:	5c 83       	std	Y+4, r21	; 0x04
    2cfc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	6a 81       	ldd	r22, Y+2	; 0x02
    2d02:	0e 94 33 16 	call	0x2c66	; 0x2c66 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0a:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <LCD_displayString>
}
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	cf 91       	pop	r28
    2d18:	df 91       	pop	r29
    2d1a:	08 95       	ret

00002d1c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2d1c:	df 93       	push	r29
    2d1e:	cf 93       	push	r28
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	62 97       	sbiw	r28, 0x12	; 18
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	9a 8b       	std	Y+18, r25	; 0x12
    2d32:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2d34:	89 89       	ldd	r24, Y+17	; 0x11
    2d36:	9a 89       	ldd	r25, Y+18	; 0x12
    2d38:	9e 01       	movw	r18, r28
    2d3a:	2f 5f       	subi	r18, 0xFF	; 255
    2d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3e:	b9 01       	movw	r22, r18
    2d40:	4a e0       	ldi	r20, 0x0A	; 10
    2d42:	50 e0       	ldi	r21, 0x00	; 0
    2d44:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <itoa>
   LCD_displayString(buff); /* Display the string */
    2d48:	ce 01       	movw	r24, r28
    2d4a:	01 96       	adiw	r24, 0x01	; 1
    2d4c:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <LCD_displayString>
}
    2d50:	62 96       	adiw	r28, 0x12	; 18
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_sendCommand>
}
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	08 95       	ret

00002d76 <LM35_getTemperature>:
 *      Author: shredan abdullah
 */
#include "adc.h"
#include "lm35_sensor.h"

uint8 LM35_getTemperature(void){
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <LM35_getTemperature+0x6>
    2d7c:	0f 92       	push	r0
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
	    uint8 temp_value = 0;
    2d82:	1b 82       	std	Y+3, r1	; 0x03

		uint16 adc_value = 0;
    2d84:	1a 82       	std	Y+2, r1	; 0x02
    2d86:	19 82       	std	Y+1, r1	; 0x01

//		/* Read ADC channel where the temperature sensor is connected */
//		adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);

		/* Calculate the temperature from the ADC value*/
		temp_value = (uint8)(((uint32)g_ADC_RETURN_VALU*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLTAGE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_TEMPERATURE_READ));
    2d88:	80 91 74 01 	lds	r24, 0x0174
    2d8c:	90 91 75 01 	lds	r25, 0x0175
    2d90:	cc 01       	movw	r24, r24
    2d92:	a0 e0       	ldi	r26, 0x00	; 0
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	2e ee       	ldi	r18, 0xEE	; 238
    2d98:	32 e0       	ldi	r19, 0x02	; 2
    2d9a:	40 e0       	ldi	r20, 0x00	; 0
    2d9c:	50 e0       	ldi	r21, 0x00	; 0
    2d9e:	bc 01       	movw	r22, r24
    2da0:	cd 01       	movw	r24, r26
    2da2:	0e 94 23 17 	call	0x2e46	; 0x2e46 <__mulsi3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	bc 01       	movw	r22, r24
    2db8:	cd 01       	movw	r24, r26
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 ed       	ldi	r19, 0xD0	; 208
    2dbe:	4f eb       	ldi	r20, 0xBF	; 191
    2dc0:	54 e4       	ldi	r21, 0x44	; 68
    2dc2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	8b 83       	std	Y+3, r24	; 0x03

		return temp_value;
    2dd8:	8b 81       	ldd	r24, Y+3	; 0x03
	//return uint8 temperature = (uint8)( ( (uint32)ADC_readChannel(SENSOR_CHANNEL_ID)* MAX_TEMPERATURE * REF_ADC_VOLTAGE) / (MAX_TEMPERATURE_READ * ADC_MAXIMUM_VALUE) );
}
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	08 95       	ret

00002de6 <main>:
#include "adc.h"
#include "lcd.h"
#include "lm35_sensor.h"

int main(void)
{
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <main+0x6>
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
	uint16 temp;

	SREG |= (1<<7);/* Enable Global Interrupts */
    2df0:	af e5       	ldi	r26, 0x5F	; 95
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	ef e5       	ldi	r30, 0x5F	; 95
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	80 68       	ori	r24, 0x80	; 128
    2dfc:	8c 93       	st	X, r24

	LCD_init(); /* initialize LCD driver */
    2dfe:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_init>
	ADC_init(); /* initialize ADC driver */
    2e02:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>

	/* Display this string "Temp =   C" only once on LCD at the first row */
	LCD_displayString("Temp =    C");
    2e06:	80 e6       	ldi	r24, 0x60	; 96
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <LCD_displayString>
    while(1)
    {
    	temp = LM35_getTemperature();
    2e0e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LM35_getTemperature>
    2e12:	88 2f       	mov	r24, r24
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	9a 83       	std	Y+2, r25	; 0x02
    2e18:	89 83       	std	Y+1, r24	; 0x01

		/* Display the temperature value every time at same position */
		LCD_moveCursor(0,7);
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	67 e0       	ldi	r22, 0x07	; 7
    2e1e:	0e 94 33 16 	call	0x2c66	; 0x2c66 <LCD_moveCursor>
		if(temp >= 100)
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
    2e26:	84 36       	cpi	r24, 0x64	; 100
    2e28:	91 05       	cpc	r25, r1
    2e2a:	28 f0       	brcs	.+10     	; 0x2e36 <main+0x50>
		{
			LCD_intgerToString(temp);
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e30:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <LCD_intgerToString>
    2e34:	ec cf       	rjmp	.-40     	; 0x2e0e <main+0x28>
		}
		else
		{
			LCD_intgerToString(temp);
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <LCD_intgerToString>
			/* In case the digital value is two or one digits print space in the next digit place */
			LCD_displayCharacter(' ');
    2e3e:	80 e2       	ldi	r24, 0x20	; 32
    2e40:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_displayCharacter>
    2e44:	e4 cf       	rjmp	.-56     	; 0x2e0e <main+0x28>

00002e46 <__mulsi3>:
    2e46:	62 9f       	mul	r22, r18
    2e48:	d0 01       	movw	r26, r0
    2e4a:	73 9f       	mul	r23, r19
    2e4c:	f0 01       	movw	r30, r0
    2e4e:	82 9f       	mul	r24, r18
    2e50:	e0 0d       	add	r30, r0
    2e52:	f1 1d       	adc	r31, r1
    2e54:	64 9f       	mul	r22, r20
    2e56:	e0 0d       	add	r30, r0
    2e58:	f1 1d       	adc	r31, r1
    2e5a:	92 9f       	mul	r25, r18
    2e5c:	f0 0d       	add	r31, r0
    2e5e:	83 9f       	mul	r24, r19
    2e60:	f0 0d       	add	r31, r0
    2e62:	74 9f       	mul	r23, r20
    2e64:	f0 0d       	add	r31, r0
    2e66:	65 9f       	mul	r22, r21
    2e68:	f0 0d       	add	r31, r0
    2e6a:	99 27       	eor	r25, r25
    2e6c:	72 9f       	mul	r23, r18
    2e6e:	b0 0d       	add	r27, r0
    2e70:	e1 1d       	adc	r30, r1
    2e72:	f9 1f       	adc	r31, r25
    2e74:	63 9f       	mul	r22, r19
    2e76:	b0 0d       	add	r27, r0
    2e78:	e1 1d       	adc	r30, r1
    2e7a:	f9 1f       	adc	r31, r25
    2e7c:	bd 01       	movw	r22, r26
    2e7e:	cf 01       	movw	r24, r30
    2e80:	11 24       	eor	r1, r1
    2e82:	08 95       	ret

00002e84 <__prologue_saves__>:
    2e84:	2f 92       	push	r2
    2e86:	3f 92       	push	r3
    2e88:	4f 92       	push	r4
    2e8a:	5f 92       	push	r5
    2e8c:	6f 92       	push	r6
    2e8e:	7f 92       	push	r7
    2e90:	8f 92       	push	r8
    2e92:	9f 92       	push	r9
    2e94:	af 92       	push	r10
    2e96:	bf 92       	push	r11
    2e98:	cf 92       	push	r12
    2e9a:	df 92       	push	r13
    2e9c:	ef 92       	push	r14
    2e9e:	ff 92       	push	r15
    2ea0:	0f 93       	push	r16
    2ea2:	1f 93       	push	r17
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	ca 1b       	sub	r28, r26
    2eae:	db 0b       	sbc	r29, r27
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	f8 94       	cli
    2eb4:	de bf       	out	0x3e, r29	; 62
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	cd bf       	out	0x3d, r28	; 61
    2eba:	09 94       	ijmp

00002ebc <__epilogue_restores__>:
    2ebc:	2a 88       	ldd	r2, Y+18	; 0x12
    2ebe:	39 88       	ldd	r3, Y+17	; 0x11
    2ec0:	48 88       	ldd	r4, Y+16	; 0x10
    2ec2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ec4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ec6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ec8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eca:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ecc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ece:	b9 84       	ldd	r11, Y+9	; 0x09
    2ed0:	c8 84       	ldd	r12, Y+8	; 0x08
    2ed2:	df 80       	ldd	r13, Y+7	; 0x07
    2ed4:	ee 80       	ldd	r14, Y+6	; 0x06
    2ed6:	fd 80       	ldd	r15, Y+5	; 0x05
    2ed8:	0c 81       	ldd	r16, Y+4	; 0x04
    2eda:	1b 81       	ldd	r17, Y+3	; 0x03
    2edc:	aa 81       	ldd	r26, Y+2	; 0x02
    2ede:	b9 81       	ldd	r27, Y+1	; 0x01
    2ee0:	ce 0f       	add	r28, r30
    2ee2:	d1 1d       	adc	r29, r1
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	f8 94       	cli
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	0f be       	out	0x3f, r0	; 63
    2eec:	cd bf       	out	0x3d, r28	; 61
    2eee:	ed 01       	movw	r28, r26
    2ef0:	08 95       	ret

00002ef2 <itoa>:
    2ef2:	fb 01       	movw	r30, r22
    2ef4:	9f 01       	movw	r18, r30
    2ef6:	e8 94       	clt
    2ef8:	42 30       	cpi	r20, 0x02	; 2
    2efa:	c4 f0       	brlt	.+48     	; 0x2f2c <itoa+0x3a>
    2efc:	45 32       	cpi	r20, 0x25	; 37
    2efe:	b4 f4       	brge	.+44     	; 0x2f2c <itoa+0x3a>
    2f00:	4a 30       	cpi	r20, 0x0A	; 10
    2f02:	29 f4       	brne	.+10     	; 0x2f0e <itoa+0x1c>
    2f04:	97 fb       	bst	r25, 7
    2f06:	1e f4       	brtc	.+6      	; 0x2f0e <itoa+0x1c>
    2f08:	90 95       	com	r25
    2f0a:	81 95       	neg	r24
    2f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f0e:	64 2f       	mov	r22, r20
    2f10:	77 27       	eor	r23, r23
    2f12:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
    2f16:	80 5d       	subi	r24, 0xD0	; 208
    2f18:	8a 33       	cpi	r24, 0x3A	; 58
    2f1a:	0c f0       	brlt	.+2      	; 0x2f1e <itoa+0x2c>
    2f1c:	89 5d       	subi	r24, 0xD9	; 217
    2f1e:	81 93       	st	Z+, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	a1 f7       	brne	.-24     	; 0x2f0e <itoa+0x1c>
    2f26:	16 f4       	brtc	.+4      	; 0x2f2c <itoa+0x3a>
    2f28:	5d e2       	ldi	r21, 0x2D	; 45
    2f2a:	51 93       	st	Z+, r21
    2f2c:	10 82       	st	Z, r1
    2f2e:	c9 01       	movw	r24, r18
    2f30:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <strrev>

00002f34 <strrev>:
    2f34:	dc 01       	movw	r26, r24
    2f36:	fc 01       	movw	r30, r24
    2f38:	67 2f       	mov	r22, r23
    2f3a:	71 91       	ld	r23, Z+
    2f3c:	77 23       	and	r23, r23
    2f3e:	e1 f7       	brne	.-8      	; 0x2f38 <strrev+0x4>
    2f40:	32 97       	sbiw	r30, 0x02	; 2
    2f42:	04 c0       	rjmp	.+8      	; 0x2f4c <strrev+0x18>
    2f44:	7c 91       	ld	r23, X
    2f46:	6d 93       	st	X+, r22
    2f48:	70 83       	st	Z, r23
    2f4a:	62 91       	ld	r22, -Z
    2f4c:	ae 17       	cp	r26, r30
    2f4e:	bf 07       	cpc	r27, r31
    2f50:	c8 f3       	brcs	.-14     	; 0x2f44 <strrev+0x10>
    2f52:	08 95       	ret

00002f54 <__udivmodhi4>:
    2f54:	aa 1b       	sub	r26, r26
    2f56:	bb 1b       	sub	r27, r27
    2f58:	51 e1       	ldi	r21, 0x11	; 17
    2f5a:	07 c0       	rjmp	.+14     	; 0x2f6a <__udivmodhi4_ep>

00002f5c <__udivmodhi4_loop>:
    2f5c:	aa 1f       	adc	r26, r26
    2f5e:	bb 1f       	adc	r27, r27
    2f60:	a6 17       	cp	r26, r22
    2f62:	b7 07       	cpc	r27, r23
    2f64:	10 f0       	brcs	.+4      	; 0x2f6a <__udivmodhi4_ep>
    2f66:	a6 1b       	sub	r26, r22
    2f68:	b7 0b       	sbc	r27, r23

00002f6a <__udivmodhi4_ep>:
    2f6a:	88 1f       	adc	r24, r24
    2f6c:	99 1f       	adc	r25, r25
    2f6e:	5a 95       	dec	r21
    2f70:	a9 f7       	brne	.-22     	; 0x2f5c <__udivmodhi4_loop>
    2f72:	80 95       	com	r24
    2f74:	90 95       	com	r25
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	08 95       	ret

00002f7c <_exit>:
    2f7c:	f8 94       	cli

00002f7e <__stop_program>:
    2f7e:	ff cf       	rjmp	.-2      	; 0x2f7e <__stop_program>
