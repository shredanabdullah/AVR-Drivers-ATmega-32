
LCD_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a56  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002a56  00002aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000019ec  00000000  00000000  00002ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000aff  00000000  00000000  000044c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005103  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005273  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007da7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000970f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a2 14 	call	0x2944	; 0x2944 <main>
      7a:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e6       	ldi	r26, 0x66	; 102
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e6       	ldi	r24, 0x66	; 102
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 bd 14 	jmp	0x297a	; 0x297a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <GPIO_setupPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <GPIO_setupPinDirection+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	88 30       	cpi	r24, 0x08	; 8
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <GPIO_setupPinDirection+0x1c>
     b50:	d5 c0       	rjmp	.+426    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	84 30       	cpi	r24, 0x04	; 4
     b56:	08 f0       	brcs	.+2      	; 0xb5a <GPIO_setupPinDirection+0x24>
     b58:	d1 c0       	rjmp	.+418    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <GPIO_setupPinDirection+0x3a>
     b6e:	43 c0       	rjmp	.+134    	; 0xbf6 <GPIO_setupPinDirection+0xc0>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <GPIO_setupPinDirection+0x4e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	71 f0       	breq	.+28     	; 0xb9e <GPIO_setupPinDirection+0x68>
     b82:	bc c0       	rjmp	.+376    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <GPIO_setupPinDirection+0x5a>
     b8e:	5f c0       	rjmp	.+190    	; 0xc4e <GPIO_setupPinDirection+0x118>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <GPIO_setupPinDirection+0x66>
     b9a:	85 c0       	rjmp	.+266    	; 0xca6 <GPIO_setupPinDirection+0x170>
     b9c:	af c0       	rjmp	.+350    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	a1 f4       	brne	.+40     	; 0xbcc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ba4:	aa e3       	ldi	r26, 0x3A	; 58
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <GPIO_setupPinDirection+0x8c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <GPIO_setupPinDirection+0x88>
     bc6:	84 2b       	or	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	98 c0       	rjmp	.+304    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bcc:	aa e3       	ldi	r26, 0x3A	; 58
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e3       	ldi	r30, 0x3A	; 58
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	48 2f       	mov	r20, r24
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <GPIO_setupPinDirection+0xb4>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <GPIO_setupPinDirection+0xb0>
     bee:	80 95       	com	r24
     bf0:	84 23       	and	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	83 c0       	rjmp	.+262    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	a1 f4       	brne	.+40     	; 0xc24 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     bfc:	a7 e3       	ldi	r26, 0x37	; 55
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <GPIO_setupPinDirection+0xe4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <GPIO_setupPinDirection+0xe0>
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	6c c0       	rjmp	.+216    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c24:	a7 e3       	ldi	r26, 0x37	; 55
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e3       	ldi	r30, 0x37	; 55
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <GPIO_setupPinDirection+0x10c>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <GPIO_setupPinDirection+0x108>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	57 c0       	rjmp	.+174    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	a1 f4       	brne	.+40     	; 0xc7c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c54:	a4 e3       	ldi	r26, 0x34	; 52
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e4 e3       	ldi	r30, 0x34	; 52
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <GPIO_setupPinDirection+0x13c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <GPIO_setupPinDirection+0x138>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c7c:	a4 e3       	ldi	r26, 0x34	; 52
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e4 e3       	ldi	r30, 0x34	; 52
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <GPIO_setupPinDirection+0x164>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <GPIO_setupPinDirection+0x160>
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	2b c0       	rjmp	.+86     	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	a1 f4       	brne	.+40     	; 0xcd4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cac:	a1 e3       	ldi	r26, 0x31	; 49
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e1 e3       	ldi	r30, 0x31	; 49
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <GPIO_setupPinDirection+0x194>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <GPIO_setupPinDirection+0x190>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     cd4:	a1 e3       	ldi	r26, 0x31	; 49
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e1 e3       	ldi	r30, 0x31	; 49
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <GPIO_setupPinDirection+0x1bc>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <GPIO_setupPinDirection+0x1b8>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <GPIO_writePin+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <GPIO_writePin+0x8>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	6a 83       	std	Y+2, r22	; 0x02
     d1e:	4b 83       	std	Y+3, r20	; 0x03
    if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	88 30       	cpi	r24, 0x08	; 8
     d24:	08 f0       	brcs	.+2      	; 0xd28 <GPIO_writePin+0x1c>
     d26:	21 c2       	rjmp	.+1090   	; 0x116a <GPIO_writePin+0x45e>
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	84 30       	cpi	r24, 0x04	; 4
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <GPIO_writePin+0x24>
     d2e:	1d c2       	rjmp	.+1082   	; 0x116a <GPIO_writePin+0x45e>
	{
		/* Do Nothing */
	}
	else{
         switch(port_num){
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	3d 83       	std	Y+5, r19	; 0x05
     d38:	2c 83       	std	Y+4, r18	; 0x04
     d3a:	4c 81       	ldd	r20, Y+4	; 0x04
     d3c:	5d 81       	ldd	r21, Y+5	; 0x05
     d3e:	41 30       	cpi	r20, 0x01	; 1
     d40:	51 05       	cpc	r21, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <GPIO_writePin+0x3a>
     d44:	97 c0       	rjmp	.+302    	; 0xe74 <GPIO_writePin+0x168>
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	9d 81       	ldd	r25, Y+5	; 0x05
     d4a:	82 30       	cpi	r24, 0x02	; 2
     d4c:	91 05       	cpc	r25, r1
     d4e:	34 f4       	brge	.+12     	; 0xd5c <GPIO_writePin+0x50>
     d50:	2c 81       	ldd	r18, Y+4	; 0x04
     d52:	3d 81       	ldd	r19, Y+5	; 0x05
     d54:	21 15       	cp	r18, r1
     d56:	31 05       	cpc	r19, r1
     d58:	71 f0       	breq	.+28     	; 0xd76 <GPIO_writePin+0x6a>
     d5a:	07 c2       	rjmp	.+1038   	; 0x116a <GPIO_writePin+0x45e>
     d5c:	4c 81       	ldd	r20, Y+4	; 0x04
     d5e:	5d 81       	ldd	r21, Y+5	; 0x05
     d60:	42 30       	cpi	r20, 0x02	; 2
     d62:	51 05       	cpc	r21, r1
     d64:	09 f4       	brne	.+2      	; 0xd68 <GPIO_writePin+0x5c>
     d66:	05 c1       	rjmp	.+522    	; 0xf72 <GPIO_writePin+0x266>
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	9d 81       	ldd	r25, Y+5	; 0x05
     d6c:	83 30       	cpi	r24, 0x03	; 3
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <GPIO_writePin+0x68>
     d72:	7e c1       	rjmp	.+764    	; 0x1070 <GPIO_writePin+0x364>
     d74:	fa c1       	rjmp	.+1012   	; 0x116a <GPIO_writePin+0x45e>
        case PORTA_ID:
            if(!(DDRA&(1<<pin_num))){
     d76:	ea e3       	ldi	r30, 0x3A	; 58
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a9 01       	movw	r20, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <GPIO_writePin+0x82>
     d8a:	55 95       	asr	r21
     d8c:	47 95       	ror	r20
     d8e:	8a 95       	dec	r24
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <GPIO_writePin+0x7e>
     d92:	ca 01       	movw	r24, r20
     d94:	81 70       	andi	r24, 0x01	; 1
     d96:	90 70       	andi	r25, 0x00	; 0
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	61 f5       	brne	.+88     	; 0xdf4 <GPIO_writePin+0xe8>
            	if(value==LOGIC_HIGH){
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	a1 f4       	brne	.+40     	; 0xdca <GPIO_writePin+0xbe>
            	       SET_BIT(PORTA,pin_num);
     da2:	ab e3       	ldi	r26, 0x3B	; 59
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	eb e3       	ldi	r30, 0x3B	; 59
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <GPIO_writePin+0xb4>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <GPIO_writePin+0xb0>
     dc4:	84 2b       	or	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	d0 c1       	rjmp	.+928    	; 0x116a <GPIO_writePin+0x45e>
            	   }
            	else{
            	     CLEAR_BIT(PORTA,pin_num);
     dca:	ab e3       	ldi	r26, 0x3B	; 59
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	eb e3       	ldi	r30, 0x3B	; 59
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <GPIO_writePin+0xdc>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <GPIO_writePin+0xd8>
     dec:	80 95       	com	r24
     dee:	84 23       	and	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	bb c1       	rjmp	.+886    	; 0x116a <GPIO_writePin+0x45e>
            	  }
            }
            else if((DDRA&(1<<pin_num))){
     df4:	ea e3       	ldi	r30, 0x3A	; 58
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	88 2f       	mov	r24, r24
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a9 01       	movw	r20, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <GPIO_writePin+0x100>
     e08:	55 95       	asr	r21
     e0a:	47 95       	ror	r20
     e0c:	8a 95       	dec	r24
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <GPIO_writePin+0xfc>
     e10:	ca 01       	movw	r24, r20
     e12:	81 70       	andi	r24, 0x01	; 1
     e14:	90 70       	andi	r25, 0x00	; 0
     e16:	88 23       	and	r24, r24
     e18:	09 f4       	brne	.+2      	; 0xe1c <GPIO_writePin+0x110>
     e1a:	a7 c1       	rjmp	.+846    	; 0x116a <GPIO_writePin+0x45e>

            	if(value==LOGIC_HIGH){
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	a1 f4       	brne	.+40     	; 0xe4a <GPIO_writePin+0x13e>
            	      SET_BIT(PORTA,pin_num);
     e22:	ab e3       	ldi	r26, 0x3B	; 59
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	eb e3       	ldi	r30, 0x3B	; 59
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <GPIO_writePin+0x134>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <GPIO_writePin+0x130>
     e44:	84 2b       	or	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	90 c1       	rjmp	.+800    	; 0x116a <GPIO_writePin+0x45e>
            	   }
            	else{
            	    CLEAR_BIT(PORTA,pin_num);
     e4a:	ab e3       	ldi	r26, 0x3B	; 59
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	eb e3       	ldi	r30, 0x3B	; 59
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <GPIO_writePin+0x15c>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <GPIO_writePin+0x158>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	7b c1       	rjmp	.+758    	; 0x116a <GPIO_writePin+0x45e>
             }
            }
            break;
        case PORTB_ID:
        	if(!(DDRB&(1<<pin_num))){
     e74:	e7 e3       	ldi	r30, 0x37	; 55
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a9 01       	movw	r20, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <GPIO_writePin+0x180>
     e88:	55 95       	asr	r21
     e8a:	47 95       	ror	r20
     e8c:	8a 95       	dec	r24
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <GPIO_writePin+0x17c>
     e90:	ca 01       	movw	r24, r20
     e92:	81 70       	andi	r24, 0x01	; 1
     e94:	90 70       	andi	r25, 0x00	; 0
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	61 f5       	brne	.+88     	; 0xef2 <GPIO_writePin+0x1e6>
        	            	if(value==LOGIC_HIGH){
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	a1 f4       	brne	.+40     	; 0xec8 <GPIO_writePin+0x1bc>
        	            	       SET_BIT(PORTB,pin_num);
     ea0:	a8 e3       	ldi	r26, 0x38	; 56
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e8 e3       	ldi	r30, 0x38	; 56
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <GPIO_writePin+0x1b2>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <GPIO_writePin+0x1ae>
     ec2:	84 2b       	or	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	51 c1       	rjmp	.+674    	; 0x116a <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	     CLEAR_BIT(PORTB,pin_num);
     ec8:	a8 e3       	ldi	r26, 0x38	; 56
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e8 e3       	ldi	r30, 0x38	; 56
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <GPIO_writePin+0x1da>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <GPIO_writePin+0x1d6>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	3c c1       	rjmp	.+632    	; 0x116a <GPIO_writePin+0x45e>
        	            	  }
        	            }
        	            else if((DDRB&(1<<pin_num))){
     ef2:	e7 e3       	ldi	r30, 0x37	; 55
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	a9 01       	movw	r20, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <GPIO_writePin+0x1fe>
     f06:	55 95       	asr	r21
     f08:	47 95       	ror	r20
     f0a:	8a 95       	dec	r24
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <GPIO_writePin+0x1fa>
     f0e:	ca 01       	movw	r24, r20
     f10:	81 70       	andi	r24, 0x01	; 1
     f12:	90 70       	andi	r25, 0x00	; 0
     f14:	88 23       	and	r24, r24
     f16:	09 f4       	brne	.+2      	; 0xf1a <GPIO_writePin+0x20e>
     f18:	28 c1       	rjmp	.+592    	; 0x116a <GPIO_writePin+0x45e>

        	            	if(value==LOGIC_HIGH){
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	a1 f4       	brne	.+40     	; 0xf48 <GPIO_writePin+0x23c>
        	            	      SET_BIT(PORTB,pin_num);
     f20:	a8 e3       	ldi	r26, 0x38	; 56
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e8 e3       	ldi	r30, 0x38	; 56
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <GPIO_writePin+0x232>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <GPIO_writePin+0x22e>
     f42:	84 2b       	or	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	11 c1       	rjmp	.+546    	; 0x116a <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	    CLEAR_BIT(PORTB,pin_num);
     f48:	a8 e3       	ldi	r26, 0x38	; 56
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e8 e3       	ldi	r30, 0x38	; 56
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <GPIO_writePin+0x25a>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <GPIO_writePin+0x256>
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	fc c0       	rjmp	.+504    	; 0x116a <GPIO_writePin+0x45e>
        	             }
        	            }
            break;
        case PORTC_ID:
        	if(!(DDRC&(1<<pin_num))){
     f72:	e4 e3       	ldi	r30, 0x34	; 52
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	a9 01       	movw	r20, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <GPIO_writePin+0x27e>
     f86:	55 95       	asr	r21
     f88:	47 95       	ror	r20
     f8a:	8a 95       	dec	r24
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <GPIO_writePin+0x27a>
     f8e:	ca 01       	movw	r24, r20
     f90:	81 70       	andi	r24, 0x01	; 1
     f92:	90 70       	andi	r25, 0x00	; 0
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	61 f5       	brne	.+88     	; 0xff0 <GPIO_writePin+0x2e4>
        	            	if(value==LOGIC_HIGH){
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	a1 f4       	brne	.+40     	; 0xfc6 <GPIO_writePin+0x2ba>
        	            	       SET_BIT(PORTC,pin_num);
     f9e:	a5 e3       	ldi	r26, 0x35	; 53
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 e3       	ldi	r30, 0x35	; 53
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <GPIO_writePin+0x2b0>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <GPIO_writePin+0x2ac>
     fc0:	84 2b       	or	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	d2 c0       	rjmp	.+420    	; 0x116a <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	     CLEAR_BIT(PORTC,pin_num);
     fc6:	a5 e3       	ldi	r26, 0x35	; 53
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e5 e3       	ldi	r30, 0x35	; 53
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <GPIO_writePin+0x2d8>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <GPIO_writePin+0x2d4>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	bd c0       	rjmp	.+378    	; 0x116a <GPIO_writePin+0x45e>
        	            	  }
        	            }
        	            else if((DDRC&(1<<pin_num))){
     ff0:	e4 e3       	ldi	r30, 0x34	; 52
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a9 01       	movw	r20, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <GPIO_writePin+0x2fc>
    1004:	55 95       	asr	r21
    1006:	47 95       	ror	r20
    1008:	8a 95       	dec	r24
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <GPIO_writePin+0x2f8>
    100c:	ca 01       	movw	r24, r20
    100e:	81 70       	andi	r24, 0x01	; 1
    1010:	90 70       	andi	r25, 0x00	; 0
    1012:	88 23       	and	r24, r24
    1014:	09 f4       	brne	.+2      	; 0x1018 <GPIO_writePin+0x30c>
    1016:	a9 c0       	rjmp	.+338    	; 0x116a <GPIO_writePin+0x45e>

        	            	if(value==LOGIC_HIGH){
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	a1 f4       	brne	.+40     	; 0x1046 <GPIO_writePin+0x33a>
        	            	      SET_BIT(PORTC,pin_num);
    101e:	a5 e3       	ldi	r26, 0x35	; 53
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e5 e3       	ldi	r30, 0x35	; 53
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_writePin+0x330>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_writePin+0x32c>
    1040:	84 2b       	or	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	92 c0       	rjmp	.+292    	; 0x116a <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	    CLEAR_BIT(PORTC,pin_num);
    1046:	a5 e3       	ldi	r26, 0x35	; 53
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e5 e3       	ldi	r30, 0x35	; 53
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <GPIO_writePin+0x358>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <GPIO_writePin+0x354>
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	7d c0       	rjmp	.+250    	; 0x116a <GPIO_writePin+0x45e>
        	             }
        	            }
            break;
        case PORTD_ID:
        	if(!(DDRD&(1<<pin_num))){
    1070:	e1 e3       	ldi	r30, 0x31	; 49
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a9 01       	movw	r20, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <GPIO_writePin+0x37c>
    1084:	55 95       	asr	r21
    1086:	47 95       	ror	r20
    1088:	8a 95       	dec	r24
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <GPIO_writePin+0x378>
    108c:	ca 01       	movw	r24, r20
    108e:	81 70       	andi	r24, 0x01	; 1
    1090:	90 70       	andi	r25, 0x00	; 0
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	61 f5       	brne	.+88     	; 0x10ee <GPIO_writePin+0x3e2>
        	            	if(value==LOGIC_HIGH){
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	a1 f4       	brne	.+40     	; 0x10c4 <GPIO_writePin+0x3b8>
        	            	       SET_BIT(PORTD,pin_num);
    109c:	a2 e3       	ldi	r26, 0x32	; 50
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e2 e3       	ldi	r30, 0x32	; 50
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <GPIO_writePin+0x3ae>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <GPIO_writePin+0x3aa>
    10be:	84 2b       	or	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	53 c0       	rjmp	.+166    	; 0x116a <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	     CLEAR_BIT(PORTD,pin_num);
    10c4:	a2 e3       	ldi	r26, 0x32	; 50
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e2 e3       	ldi	r30, 0x32	; 50
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <GPIO_writePin+0x3d6>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <GPIO_writePin+0x3d2>
    10e6:	80 95       	com	r24
    10e8:	84 23       	and	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	3e c0       	rjmp	.+124    	; 0x116a <GPIO_writePin+0x45e>
        	            	  }
        	            }
        	            else if((DDRD&(1<<pin_num))){
    10ee:	e1 e3       	ldi	r30, 0x31	; 49
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a9 01       	movw	r20, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <GPIO_writePin+0x3fa>
    1102:	55 95       	asr	r21
    1104:	47 95       	ror	r20
    1106:	8a 95       	dec	r24
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <GPIO_writePin+0x3f6>
    110a:	ca 01       	movw	r24, r20
    110c:	81 70       	andi	r24, 0x01	; 1
    110e:	90 70       	andi	r25, 0x00	; 0
    1110:	88 23       	and	r24, r24
    1112:	59 f1       	breq	.+86     	; 0x116a <GPIO_writePin+0x45e>

        	            	if(value==LOGIC_HIGH){
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	a1 f4       	brne	.+40     	; 0x1142 <GPIO_writePin+0x436>
        	            	      SET_BIT(PORTD,pin_num);
    111a:	a2 e3       	ldi	r26, 0x32	; 50
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e2 e3       	ldi	r30, 0x32	; 50
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <GPIO_writePin+0x42c>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <GPIO_writePin+0x428>
    113c:	84 2b       	or	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	14 c0       	rjmp	.+40     	; 0x116a <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	    CLEAR_BIT(PORTD,pin_num);
    1142:	a2 e3       	ldi	r26, 0x32	; 50
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e2 e3       	ldi	r30, 0x32	; 50
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <GPIO_writePin+0x454>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <GPIO_writePin+0x450>
    1164:	80 95       	com	r24
    1166:	84 23       	and	r24, r20
    1168:	8c 93       	st	X, r24
        	             }
        	            }
            break;
      }
	}
}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <GPIO_readPin+0x6>
    1180:	00 d0       	rcall	.+0      	; 0x1182 <GPIO_readPin+0x8>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <GPIO_readPin+0xa>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	6a 83       	std	Y+2, r22	; 0x02
    if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	88 30       	cpi	r24, 0x08	; 8
    1190:	18 f4       	brcc	.+6      	; 0x1198 <GPIO_readPin+0x1e>
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	84 30       	cpi	r24, 0x04	; 4
    1196:	10 f0       	brcs	.+4      	; 0x119c <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    1198:	1d 82       	std	Y+5, r1	; 0x05
    119a:	9b c0       	rjmp	.+310    	; 0x12d2 <GPIO_readPin+0x158>
	}
	else{
        switch(port_num){
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	3c 83       	std	Y+4, r19	; 0x04
    11a4:	2b 83       	std	Y+3, r18	; 0x03
    11a6:	4b 81       	ldd	r20, Y+3	; 0x03
    11a8:	5c 81       	ldd	r21, Y+4	; 0x04
    11aa:	41 30       	cpi	r20, 0x01	; 1
    11ac:	51 05       	cpc	r21, r1
    11ae:	b1 f1       	breq	.+108    	; 0x121c <GPIO_readPin+0xa2>
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	82 30       	cpi	r24, 0x02	; 2
    11b6:	91 05       	cpc	r25, r1
    11b8:	34 f4       	brge	.+12     	; 0x11c6 <GPIO_readPin+0x4c>
    11ba:	2b 81       	ldd	r18, Y+3	; 0x03
    11bc:	3c 81       	ldd	r19, Y+4	; 0x04
    11be:	21 15       	cp	r18, r1
    11c0:	31 05       	cpc	r19, r1
    11c2:	71 f0       	breq	.+28     	; 0x11e0 <GPIO_readPin+0x66>
    11c4:	85 c0       	rjmp	.+266    	; 0x12d0 <GPIO_readPin+0x156>
    11c6:	4b 81       	ldd	r20, Y+3	; 0x03
    11c8:	5c 81       	ldd	r21, Y+4	; 0x04
    11ca:	42 30       	cpi	r20, 0x02	; 2
    11cc:	51 05       	cpc	r21, r1
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <GPIO_readPin+0x58>
    11d0:	43 c0       	rjmp	.+134    	; 0x1258 <GPIO_readPin+0xde>
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	91 05       	cpc	r25, r1
    11da:	09 f4       	brne	.+2      	; 0x11de <GPIO_readPin+0x64>
    11dc:	5b c0       	rjmp	.+182    	; 0x1294 <GPIO_readPin+0x11a>
    11de:	78 c0       	rjmp	.+240    	; 0x12d0 <GPIO_readPin+0x156>
                case PORTA_ID:return (PINA&(1<<pin_num))>>pin_num;break;
    11e0:	e9 e3       	ldi	r30, 0x39	; 57
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <GPIO_readPin+0x80>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	2a 95       	dec	r18
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <GPIO_readPin+0x7c>
    11fe:	9a 01       	movw	r18, r20
    1200:	28 23       	and	r18, r24
    1202:	39 23       	and	r19, r25
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <GPIO_readPin+0x98>
    120e:	55 95       	asr	r21
    1210:	47 95       	ror	r20
    1212:	8a 95       	dec	r24
    1214:	e2 f7       	brpl	.-8      	; 0x120e <GPIO_readPin+0x94>
    1216:	ca 01       	movw	r24, r20
    1218:	8d 83       	std	Y+5, r24	; 0x05
    121a:	5b c0       	rjmp	.+182    	; 0x12d2 <GPIO_readPin+0x158>
                case PORTB_ID:return (PINB&(1<<pin_num))>>pin_num;break;
    121c:	e6 e3       	ldi	r30, 0x36	; 54
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <GPIO_readPin+0xbc>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	2a 95       	dec	r18
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <GPIO_readPin+0xb8>
    123a:	9a 01       	movw	r18, r20
    123c:	28 23       	and	r18, r24
    123e:	39 23       	and	r19, r25
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a9 01       	movw	r20, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <GPIO_readPin+0xd4>
    124a:	55 95       	asr	r21
    124c:	47 95       	ror	r20
    124e:	8a 95       	dec	r24
    1250:	e2 f7       	brpl	.-8      	; 0x124a <GPIO_readPin+0xd0>
    1252:	ca 01       	movw	r24, r20
    1254:	8d 83       	std	Y+5, r24	; 0x05
    1256:	3d c0       	rjmp	.+122    	; 0x12d2 <GPIO_readPin+0x158>
                case PORTC_ID:return (PINC&(1<<pin_num))>>pin_num;break;
    1258:	e3 e3       	ldi	r30, 0x33	; 51
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <GPIO_readPin+0xf8>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	2a 95       	dec	r18
    1274:	e2 f7       	brpl	.-8      	; 0x126e <GPIO_readPin+0xf4>
    1276:	9a 01       	movw	r18, r20
    1278:	28 23       	and	r18, r24
    127a:	39 23       	and	r19, r25
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	a9 01       	movw	r20, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <GPIO_readPin+0x110>
    1286:	55 95       	asr	r21
    1288:	47 95       	ror	r20
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <GPIO_readPin+0x10c>
    128e:	ca 01       	movw	r24, r20
    1290:	8d 83       	std	Y+5, r24	; 0x05
    1292:	1f c0       	rjmp	.+62     	; 0x12d2 <GPIO_readPin+0x158>
                case PORTD_ID:return (PIND&(1<<pin_num))>>pin_num;break;
    1294:	e0 e3       	ldi	r30, 0x30	; 48
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <GPIO_readPin+0x134>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	2a 95       	dec	r18
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <GPIO_readPin+0x130>
    12b2:	9a 01       	movw	r18, r20
    12b4:	28 23       	and	r18, r24
    12b6:	39 23       	and	r19, r25
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <GPIO_readPin+0x14c>
    12c2:	55 95       	asr	r21
    12c4:	47 95       	ror	r20
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <GPIO_readPin+0x148>
    12ca:	ca 01       	movw	r24, r20
    12cc:	8d 83       	std	Y+5, r24	; 0x05
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <GPIO_readPin+0x158>
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <GPIO_readPin+0x15c>
            }
	}
}
    12d2:	5d 81       	ldd	r21, Y+5	; 0x05
    12d4:	5e 83       	std	Y+6, r21	; 0x06
    12d6:	8e 81       	ldd	r24, Y+6	; 0x06
    12d8:	26 96       	adiw	r28, 0x06	; 6
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <GPIO_setupPortDirection+0x6>
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <GPIO_setupPortDirection+0x8>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	90 f5       	brcc	.+100    	; 0x1364 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3c 83       	std	Y+4, r19	; 0x04
    1308:	2b 83       	std	Y+3, r18	; 0x03
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	d1 f0       	breq	.+52     	; 0x1348 <GPIO_setupPortDirection+0x5e>
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	3c 81       	ldd	r19, Y+4	; 0x04
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <GPIO_setupPortDirection+0x3e>
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <GPIO_setupPortDirection+0x54>
    1326:	1e c0       	rjmp	.+60     	; 0x1364 <GPIO_setupPortDirection+0x7a>
    1328:	2b 81       	ldd	r18, Y+3	; 0x03
    132a:	3c 81       	ldd	r19, Y+4	; 0x04
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <GPIO_setupPortDirection+0x68>
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <GPIO_setupPortDirection+0x72>
    133c:	13 c0       	rjmp	.+38     	; 0x1364 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    133e:	ea e3       	ldi	r30, 0x3A	; 58
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	80 83       	st	Z, r24
    1346:	0e c0       	rjmp	.+28     	; 0x1364 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1348:	e7 e3       	ldi	r30, 0x37	; 55
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	80 83       	st	Z, r24
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	80 83       	st	Z, r24
    135a:	04 c0       	rjmp	.+8      	; 0x1364 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    135c:	e1 e3       	ldi	r30, 0x31	; 49
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	80 83       	st	Z, r24
			break;
		}
	}
}
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <GPIO_writePort+0x6>
    1378:	00 d0       	rcall	.+0      	; 0x137a <GPIO_writePort+0x8>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	84 30       	cpi	r24, 0x04	; 4
    1386:	90 f5       	brcc	.+100    	; 0x13ec <GPIO_writePort+0x7a>
			{

			}
		else{
        switch(port_num){
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3c 83       	std	Y+4, r19	; 0x04
    1390:	2b 83       	std	Y+3, r18	; 0x03
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	d1 f0       	breq	.+52     	; 0x13d0 <GPIO_writePort+0x5e>
    139c:	2b 81       	ldd	r18, Y+3	; 0x03
    139e:	3c 81       	ldd	r19, Y+4	; 0x04
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <GPIO_writePort+0x3e>
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <GPIO_writePort+0x54>
    13ae:	1e c0       	rjmp	.+60     	; 0x13ec <GPIO_writePort+0x7a>
    13b0:	2b 81       	ldd	r18, Y+3	; 0x03
    13b2:	3c 81       	ldd	r19, Y+4	; 0x04
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	81 f0       	breq	.+32     	; 0x13da <GPIO_writePort+0x68>
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	91 05       	cpc	r25, r1
    13c2:	81 f0       	breq	.+32     	; 0x13e4 <GPIO_writePort+0x72>
    13c4:	13 c0       	rjmp	.+38     	; 0x13ec <GPIO_writePort+0x7a>
                case PORTA_ID: PORTA= value;break;
    13c6:	eb e3       	ldi	r30, 0x3B	; 59
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	80 83       	st	Z, r24
    13ce:	0e c0       	rjmp	.+28     	; 0x13ec <GPIO_writePort+0x7a>
                case PORTB_ID: PORTB= value;break;
    13d0:	e8 e3       	ldi	r30, 0x38	; 56
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	80 83       	st	Z, r24
    13d8:	09 c0       	rjmp	.+18     	; 0x13ec <GPIO_writePort+0x7a>
                case PORTC_ID: PORTC= value;break;
    13da:	e5 e3       	ldi	r30, 0x35	; 53
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	80 83       	st	Z, r24
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <GPIO_writePort+0x7a>
                case PORTD_ID: PORTD= value;break;
    13e4:	e2 e3       	ldi	r30, 0x32	; 50
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	80 83       	st	Z, r24
        }    }
}
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <GPIO_readPort+0x6>
    1400:	00 d0       	rcall	.+0      	; 0x1402 <GPIO_readPort+0x8>
    1402:	0f 92       	push	r0
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	89 83       	std	Y+1, r24	; 0x01
	if((port_num >= NUM_OF_PORTS))
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	84 30       	cpi	r24, 0x04	; 4
    140e:	10 f0       	brcs	.+4      	; 0x1414 <GPIO_readPort+0x1a>
		{
			return LOGIC_LOW;
    1410:	1c 82       	std	Y+4, r1	; 0x04
    1412:	34 c0       	rjmp	.+104    	; 0x147c <GPIO_readPort+0x82>
		}
	else{
        switch(port_num){
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	3b 83       	std	Y+3, r19	; 0x03
    141c:	2a 83       	std	Y+2, r18	; 0x02
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	9b 81       	ldd	r25, Y+3	; 0x03
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	91 05       	cpc	r25, r1
    1426:	d1 f0       	breq	.+52     	; 0x145c <GPIO_readPort+0x62>
    1428:	2a 81       	ldd	r18, Y+2	; 0x02
    142a:	3b 81       	ldd	r19, Y+3	; 0x03
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	2c f4       	brge	.+10     	; 0x143c <GPIO_readPort+0x42>
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	9b 81       	ldd	r25, Y+3	; 0x03
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	61 f0       	breq	.+24     	; 0x1452 <GPIO_readPort+0x58>
    143a:	1f c0       	rjmp	.+62     	; 0x147a <GPIO_readPort+0x80>
    143c:	2a 81       	ldd	r18, Y+2	; 0x02
    143e:	3b 81       	ldd	r19, Y+3	; 0x03
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	81 f0       	breq	.+32     	; 0x1466 <GPIO_readPort+0x6c>
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	9b 81       	ldd	r25, Y+3	; 0x03
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	91 05       	cpc	r25, r1
    144e:	81 f0       	breq	.+32     	; 0x1470 <GPIO_readPort+0x76>
    1450:	14 c0       	rjmp	.+40     	; 0x147a <GPIO_readPort+0x80>
                case PORTA_ID:return PINA;break;
    1452:	e9 e3       	ldi	r30, 0x39	; 57
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	90 81       	ld	r25, Z
    1458:	9c 83       	std	Y+4, r25	; 0x04
    145a:	10 c0       	rjmp	.+32     	; 0x147c <GPIO_readPort+0x82>
                case PORTB_ID:return PINB;break;
    145c:	e6 e3       	ldi	r30, 0x36	; 54
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	20 81       	ld	r18, Z
    1462:	2c 83       	std	Y+4, r18	; 0x04
    1464:	0b c0       	rjmp	.+22     	; 0x147c <GPIO_readPort+0x82>
                case PORTC_ID:return PINC;break;
    1466:	e3 e3       	ldi	r30, 0x33	; 51
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	30 81       	ld	r19, Z
    146c:	3c 83       	std	Y+4, r19	; 0x04
    146e:	06 c0       	rjmp	.+12     	; 0x147c <GPIO_readPort+0x82>
                case PORTD_ID:return PIND;break;
    1470:	e0 e3       	ldi	r30, 0x30	; 48
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	8c 83       	std	Y+4, r24	; 0x04
    1478:	01 c0       	rjmp	.+2      	; 0x147c <GPIO_readPort+0x82>
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <GPIO_readPort+0x86>
            }
}}
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	9d 83       	std	Y+5, r25	; 0x05
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <LCD_init>:
* Initialize the LCD:
* 1. Setup the LCD pins directions by use the GPIO driver.
* 2. Setup the LCD Data Mode 4-bits or 8-bits.
*/
void LCD_init(void)
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	2e 97       	sbiw	r28, 0x0e	; 14
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	61 e0       	ldi	r22, 0x01	; 1
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	62 e0       	ldi	r22, 0x02	; 2
    14b4:	41 e0       	ldi	r20, 0x01	; 1
    14b6:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a0 ea       	ldi	r26, 0xA0	; 160
    14c0:	b1 e4       	ldi	r27, 0x41	; 65
    14c2:	8b 87       	std	Y+11, r24	; 0x0b
    14c4:	9c 87       	std	Y+12, r25	; 0x0c
    14c6:	ad 87       	std	Y+13, r26	; 0x0d
    14c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    14cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	4a e7       	ldi	r20, 0x7A	; 122
    14d8:	53 e4       	ldi	r21, 0x43	; 67
    14da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8f 83       	std	Y+7, r24	; 0x07
    14e4:	98 87       	std	Y+8, r25	; 0x08
    14e6:	a9 87       	std	Y+9, r26	; 0x09
    14e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ea:	6f 81       	ldd	r22, Y+7	; 0x07
    14ec:	78 85       	ldd	r23, Y+8	; 0x08
    14ee:	89 85       	ldd	r24, Y+9	; 0x09
    14f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	5f e3       	ldi	r21, 0x3F	; 63
    14fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14fe:	88 23       	and	r24, r24
    1500:	2c f4       	brge	.+10     	; 0x150c <LCD_init+0x7a>
		__ticks = 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
    150a:	3f c0       	rjmp	.+126    	; 0x158a <LCD_init+0xf8>
	else if (__tmp > 65535)
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1520:	18 16       	cp	r1, r24
    1522:	4c f5       	brge	.+82     	; 0x1576 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1524:	6b 85       	ldd	r22, Y+11	; 0x0b
    1526:	7c 85       	ldd	r23, Y+12	; 0x0c
    1528:	8d 85       	ldd	r24, Y+13	; 0x0d
    152a:	9e 85       	ldd	r25, Y+14	; 0x0e
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e2       	ldi	r20, 0x20	; 32
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	0f c0       	rjmp	.+30     	; 0x156c <LCD_init+0xda>
    154e:	89 e1       	ldi	r24, 0x19	; 25
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9c 83       	std	Y+4, r25	; 0x04
    1554:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <LCD_init+0xc8>
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	69 f7       	brne	.-38     	; 0x154e <LCD_init+0xbc>
    1574:	14 c0       	rjmp	.+40     	; 0x159e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1576:	6f 81       	ldd	r22, Y+7	; 0x07
    1578:	78 85       	ldd	r23, Y+8	; 0x08
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	9a 85       	ldd	r25, Y+10	; 0x0a
    157e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 83       	std	Y+5, r24	; 0x05
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <LCD_init+0x104>
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	63 e0       	ldi	r22, 0x03	; 3
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	64 e0       	ldi	r22, 0x04	; 4
    15ac:	41 e0       	ldi	r20, 0x01	; 1
    15ae:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	65 e0       	ldi	r22, 0x05	; 5
    15b6:	41 e0       	ldi	r20, 0x01	; 1
    15b8:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	66 e0       	ldi	r22, 0x06	; 6
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    15c6:	83 e3       	ldi	r24, 0x33	; 51
    15c8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    15cc:	82 e3       	ldi	r24, 0x32	; 50
    15ce:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    15d2:	88 e2       	ldi	r24, 0x28	; 40
    15d4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    15d8:	8c e0       	ldi	r24, 0x0C	; 12
    15da:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
}
    15e4:	2e 96       	adiw	r28, 0x0e	; 14
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <LCD_sendCommand>:
/*
* Description :
* Send the required command to the screen
*/
void LCD_sendCommand(uint8 command)
{
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	c3 56       	subi	r28, 0x63	; 99
    1604:	d0 40       	sbci	r29, 0x00	; 0
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	fe 01       	movw	r30, r28
    1612:	ed 59       	subi	r30, 0x9D	; 157
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1622:	fe 01       	movw	r30, r28
    1624:	e1 5a       	subi	r30, 0xA1	; 161
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a0 e8       	ldi	r26, 0x80	; 128
    162e:	bf e3       	ldi	r27, 0x3F	; 63
    1630:	80 83       	st	Z, r24
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	a2 83       	std	Z+2, r26	; 0x02
    1636:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1638:	8e 01       	movw	r16, r28
    163a:	05 5a       	subi	r16, 0xA5	; 165
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	fe 01       	movw	r30, r28
    1640:	e1 5a       	subi	r30, 0xA1	; 161
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	82 81       	ldd	r24, Z+2	; 0x02
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	4a e7       	ldi	r20, 0x7A	; 122
    1652:	53 e4       	ldi	r21, 0x43	; 67
    1654:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	f8 01       	movw	r30, r16
    165e:	80 83       	st	Z, r24
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	a2 83       	std	Z+2, r26	; 0x02
    1664:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1666:	fe 01       	movw	r30, r28
    1668:	e5 5a       	subi	r30, 0xA5	; 165
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1680:	88 23       	and	r24, r24
    1682:	44 f4       	brge	.+16     	; 0x1694 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1684:	fe 01       	movw	r30, r28
    1686:	e7 5a       	subi	r30, 0xA7	; 167
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	91 83       	std	Z+1, r25	; 0x01
    1690:	80 83       	st	Z, r24
    1692:	64 c0       	rjmp	.+200    	; 0x175c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1694:	fe 01       	movw	r30, r28
    1696:	e5 5a       	subi	r30, 0xA5	; 165
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	60 81       	ld	r22, Z
    169c:	71 81       	ldd	r23, Z+1	; 0x01
    169e:	82 81       	ldd	r24, Z+2	; 0x02
    16a0:	93 81       	ldd	r25, Z+3	; 0x03
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	3f ef       	ldi	r19, 0xFF	; 255
    16a6:	4f e7       	ldi	r20, 0x7F	; 127
    16a8:	57 e4       	ldi	r21, 0x47	; 71
    16aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16ae:	18 16       	cp	r1, r24
    16b0:	0c f0       	brlt	.+2      	; 0x16b4 <LCD_sendCommand+0xbe>
    16b2:	43 c0       	rjmp	.+134    	; 0x173a <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b4:	fe 01       	movw	r30, r28
    16b6:	e1 5a       	subi	r30, 0xA1	; 161
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	60 81       	ld	r22, Z
    16bc:	71 81       	ldd	r23, Z+1	; 0x01
    16be:	82 81       	ldd	r24, Z+2	; 0x02
    16c0:	93 81       	ldd	r25, Z+3	; 0x03
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e2       	ldi	r20, 0x20	; 32
    16c8:	51 e4       	ldi	r21, 0x41	; 65
    16ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	8e 01       	movw	r16, r28
    16d4:	07 5a       	subi	r16, 0xA7	; 167
    16d6:	1f 4f       	sbci	r17, 0xFF	; 255
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	f8 01       	movw	r30, r16
    16e6:	91 83       	std	Z+1, r25	; 0x01
    16e8:	80 83       	st	Z, r24
    16ea:	1f c0       	rjmp	.+62     	; 0x172a <LCD_sendCommand+0x134>
    16ec:	fe 01       	movw	r30, r28
    16ee:	e9 5a       	subi	r30, 0xA9	; 169
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	89 e1       	ldi	r24, 0x19	; 25
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	80 83       	st	Z, r24
    16fa:	fe 01       	movw	r30, r28
    16fc:	e9 5a       	subi	r30, 0xA9	; 169
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	80 81       	ld	r24, Z
    1702:	91 81       	ldd	r25, Z+1	; 0x01
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <LCD_sendCommand+0x10e>
    1708:	fe 01       	movw	r30, r28
    170a:	e9 5a       	subi	r30, 0xA9	; 169
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	91 83       	std	Z+1, r25	; 0x01
    1710:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1712:	de 01       	movw	r26, r28
    1714:	a7 5a       	subi	r26, 0xA7	; 167
    1716:	bf 4f       	sbci	r27, 0xFF	; 255
    1718:	fe 01       	movw	r30, r28
    171a:	e7 5a       	subi	r30, 0xA7	; 167
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	80 81       	ld	r24, Z
    1720:	91 81       	ldd	r25, Z+1	; 0x01
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	11 96       	adiw	r26, 0x01	; 1
    1726:	9c 93       	st	X, r25
    1728:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	fe 01       	movw	r30, r28
    172c:	e7 5a       	subi	r30, 0xA7	; 167
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	80 81       	ld	r24, Z
    1732:	91 81       	ldd	r25, Z+1	; 0x01
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	d1 f6       	brne	.-76     	; 0x16ec <LCD_sendCommand+0xf6>
    1738:	27 c0       	rjmp	.+78     	; 0x1788 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173a:	8e 01       	movw	r16, r28
    173c:	07 5a       	subi	r16, 0xA7	; 167
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	fe 01       	movw	r30, r28
    1742:	e5 5a       	subi	r30, 0xA5	; 165
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	60 81       	ld	r22, Z
    1748:	71 81       	ldd	r23, Z+1	; 0x01
    174a:	82 81       	ldd	r24, Z+2	; 0x02
    174c:	93 81       	ldd	r25, Z+3	; 0x03
    174e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	f8 01       	movw	r30, r16
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
    175c:	de 01       	movw	r26, r28
    175e:	ab 5a       	subi	r26, 0xAB	; 171
    1760:	bf 4f       	sbci	r27, 0xFF	; 255
    1762:	fe 01       	movw	r30, r28
    1764:	e7 5a       	subi	r30, 0xA7	; 167
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	8d 93       	st	X+, r24
    176e:	9c 93       	st	X, r25
    1770:	fe 01       	movw	r30, r28
    1772:	eb 5a       	subi	r30, 0xAB	; 171
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <LCD_sendCommand+0x184>
    177e:	fe 01       	movw	r30, r28
    1780:	eb 5a       	subi	r30, 0xAB	; 171
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	62 e0       	ldi	r22, 0x02	; 2
    178c:	41 e0       	ldi	r20, 0x01	; 1
    178e:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1792:	fe 01       	movw	r30, r28
    1794:	ef 5a       	subi	r30, 0xAF	; 175
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 e8       	ldi	r26, 0x80	; 128
    179e:	bf e3       	ldi	r27, 0x3F	; 63
    17a0:	80 83       	st	Z, r24
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	a2 83       	std	Z+2, r26	; 0x02
    17a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	8e 01       	movw	r16, r28
    17aa:	03 5b       	subi	r16, 0xB3	; 179
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	fe 01       	movw	r30, r28
    17b0:	ef 5a       	subi	r30, 0xAF	; 175
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	60 81       	ld	r22, Z
    17b6:	71 81       	ldd	r23, Z+1	; 0x01
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	93 81       	ldd	r25, Z+3	; 0x03
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a e7       	ldi	r20, 0x7A	; 122
    17c2:	53 e4       	ldi	r21, 0x43	; 67
    17c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	f8 01       	movw	r30, r16
    17ce:	80 83       	st	Z, r24
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	a2 83       	std	Z+2, r26	; 0x02
    17d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d6:	fe 01       	movw	r30, r28
    17d8:	e3 5b       	subi	r30, 0xB3	; 179
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e8       	ldi	r20, 0x80	; 128
    17ea:	5f e3       	ldi	r21, 0x3F	; 63
    17ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17f0:	88 23       	and	r24, r24
    17f2:	44 f4       	brge	.+16     	; 0x1804 <LCD_sendCommand+0x20e>
		__ticks = 1;
    17f4:	fe 01       	movw	r30, r28
    17f6:	e5 5b       	subi	r30, 0xB5	; 181
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	64 c0       	rjmp	.+200    	; 0x18cc <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1804:	fe 01       	movw	r30, r28
    1806:	e3 5b       	subi	r30, 0xB3	; 179
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    181e:	18 16       	cp	r1, r24
    1820:	0c f0       	brlt	.+2      	; 0x1824 <LCD_sendCommand+0x22e>
    1822:	43 c0       	rjmp	.+134    	; 0x18aa <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	fe 01       	movw	r30, r28
    1826:	ef 5a       	subi	r30, 0xAF	; 175
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e2       	ldi	r20, 0x20	; 32
    1838:	51 e4       	ldi	r21, 0x41	; 65
    183a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	8e 01       	movw	r16, r28
    1844:	05 5b       	subi	r16, 0xB5	; 181
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	f8 01       	movw	r30, r16
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	80 83       	st	Z, r24
    185a:	1f c0       	rjmp	.+62     	; 0x189a <LCD_sendCommand+0x2a4>
    185c:	fe 01       	movw	r30, r28
    185e:	e7 5b       	subi	r30, 0xB7	; 183
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	89 e1       	ldi	r24, 0x19	; 25
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	80 83       	st	Z, r24
    186a:	fe 01       	movw	r30, r28
    186c:	e7 5b       	subi	r30, 0xB7	; 183
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_sendCommand+0x27e>
    1878:	fe 01       	movw	r30, r28
    187a:	e7 5b       	subi	r30, 0xB7	; 183
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	de 01       	movw	r26, r28
    1884:	a5 5b       	subi	r26, 0xB5	; 181
    1886:	bf 4f       	sbci	r27, 0xFF	; 255
    1888:	fe 01       	movw	r30, r28
    188a:	e5 5b       	subi	r30, 0xB5	; 181
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	11 96       	adiw	r26, 0x01	; 1
    1896:	9c 93       	st	X, r25
    1898:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189a:	fe 01       	movw	r30, r28
    189c:	e5 5b       	subi	r30, 0xB5	; 181
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	91 81       	ldd	r25, Z+1	; 0x01
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	d1 f6       	brne	.-76     	; 0x185c <LCD_sendCommand+0x266>
    18a8:	27 c0       	rjmp	.+78     	; 0x18f8 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18aa:	8e 01       	movw	r16, r28
    18ac:	05 5b       	subi	r16, 0xB5	; 181
    18ae:	1f 4f       	sbci	r17, 0xFF	; 255
    18b0:	fe 01       	movw	r30, r28
    18b2:	e3 5b       	subi	r30, 0xB3	; 179
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	f8 01       	movw	r30, r16
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
    18cc:	de 01       	movw	r26, r28
    18ce:	a9 5b       	subi	r26, 0xB9	; 185
    18d0:	bf 4f       	sbci	r27, 0xFF	; 255
    18d2:	fe 01       	movw	r30, r28
    18d4:	e5 5b       	subi	r30, 0xB5	; 181
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	80 81       	ld	r24, Z
    18da:	91 81       	ldd	r25, Z+1	; 0x01
    18dc:	8d 93       	st	X+, r24
    18de:	9c 93       	st	X, r25
    18e0:	fe 01       	movw	r30, r28
    18e2:	e9 5b       	subi	r30, 0xB9	; 185
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	80 81       	ld	r24, Z
    18e8:	91 81       	ldd	r25, Z+1	; 0x01
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <LCD_sendCommand+0x2f4>
    18ee:	fe 01       	movw	r30, r28
    18f0:	e9 5b       	subi	r30, 0xB9	; 185
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    18f8:	fe 01       	movw	r30, r28
    18fa:	ed 59       	subi	r30, 0x9D	; 157
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	80 81       	ld	r24, Z
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	80 71       	andi	r24, 0x10	; 16
    1906:	90 70       	andi	r25, 0x00	; 0
    1908:	95 95       	asr	r25
    190a:	87 95       	ror	r24
    190c:	95 95       	asr	r25
    190e:	87 95       	ror	r24
    1910:	95 95       	asr	r25
    1912:	87 95       	ror	r24
    1914:	95 95       	asr	r25
    1916:	87 95       	ror	r24
    1918:	98 2f       	mov	r25, r24
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	63 e0       	ldi	r22, 0x03	; 3
    191e:	49 2f       	mov	r20, r25
    1920:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1924:	fe 01       	movw	r30, r28
    1926:	ed 59       	subi	r30, 0x9D	; 157
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	80 81       	ld	r24, Z
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	80 72       	andi	r24, 0x20	; 32
    1932:	90 70       	andi	r25, 0x00	; 0
    1934:	95 95       	asr	r25
    1936:	87 95       	ror	r24
    1938:	95 95       	asr	r25
    193a:	87 95       	ror	r24
    193c:	95 95       	asr	r25
    193e:	87 95       	ror	r24
    1940:	95 95       	asr	r25
    1942:	87 95       	ror	r24
    1944:	95 95       	asr	r25
    1946:	87 95       	ror	r24
    1948:	98 2f       	mov	r25, r24
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	64 e0       	ldi	r22, 0x04	; 4
    194e:	49 2f       	mov	r20, r25
    1950:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1954:	fe 01       	movw	r30, r28
    1956:	ed 59       	subi	r30, 0x9D	; 157
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	80 81       	ld	r24, Z
    195c:	88 2f       	mov	r24, r24
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	80 74       	andi	r24, 0x40	; 64
    1962:	90 70       	andi	r25, 0x00	; 0
    1964:	08 2e       	mov	r0, r24
    1966:	89 2f       	mov	r24, r25
    1968:	00 0c       	add	r0, r0
    196a:	88 1f       	adc	r24, r24
    196c:	99 0b       	sbc	r25, r25
    196e:	00 0c       	add	r0, r0
    1970:	88 1f       	adc	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	98 2f       	mov	r25, r24
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	65 e0       	ldi	r22, 0x05	; 5
    197a:	49 2f       	mov	r20, r25
    197c:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1980:	fe 01       	movw	r30, r28
    1982:	ed 59       	subi	r30, 0x9D	; 157
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	80 81       	ld	r24, Z
    1988:	98 2f       	mov	r25, r24
    198a:	99 1f       	adc	r25, r25
    198c:	99 27       	eor	r25, r25
    198e:	99 1f       	adc	r25, r25
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	66 e0       	ldi	r22, 0x06	; 6
    1994:	49 2f       	mov	r20, r25
    1996:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    199a:	fe 01       	movw	r30, r28
    199c:	ed 5b       	subi	r30, 0xBD	; 189
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	a0 e8       	ldi	r26, 0x80	; 128
    19a6:	bf e3       	ldi	r27, 0x3F	; 63
    19a8:	80 83       	st	Z, r24
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	a2 83       	std	Z+2, r26	; 0x02
    19ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b0:	8e 01       	movw	r16, r28
    19b2:	01 5c       	subi	r16, 0xC1	; 193
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	fe 01       	movw	r30, r28
    19b8:	ed 5b       	subi	r30, 0xBD	; 189
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	60 81       	ld	r22, Z
    19be:	71 81       	ldd	r23, Z+1	; 0x01
    19c0:	82 81       	ldd	r24, Z+2	; 0x02
    19c2:	93 81       	ldd	r25, Z+3	; 0x03
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	4a e7       	ldi	r20, 0x7A	; 122
    19ca:	53 e4       	ldi	r21, 0x43	; 67
    19cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	f8 01       	movw	r30, r16
    19d6:	80 83       	st	Z, r24
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	a2 83       	std	Z+2, r26	; 0x02
    19dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19de:	fe 01       	movw	r30, r28
    19e0:	ff 96       	adiw	r30, 0x3f	; 63
    19e2:	60 81       	ld	r22, Z
    19e4:	71 81       	ldd	r23, Z+1	; 0x01
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e8       	ldi	r20, 0x80	; 128
    19f0:	5f e3       	ldi	r21, 0x3F	; 63
    19f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19f6:	88 23       	and	r24, r24
    19f8:	2c f4       	brge	.+10     	; 0x1a04 <LCD_sendCommand+0x40e>
		__ticks = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9e af       	std	Y+62, r25	; 0x3e
    1a00:	8d af       	std	Y+61, r24	; 0x3d
    1a02:	46 c0       	rjmp	.+140    	; 0x1a90 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1a04:	fe 01       	movw	r30, r28
    1a06:	ff 96       	adiw	r30, 0x3f	; 63
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	3f ef       	ldi	r19, 0xFF	; 255
    1a14:	4f e7       	ldi	r20, 0x7F	; 127
    1a16:	57 e4       	ldi	r21, 0x47	; 71
    1a18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	64 f5       	brge	.+88     	; 0x1a78 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a20:	fe 01       	movw	r30, r28
    1a22:	ed 5b       	subi	r30, 0xBD	; 189
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	60 81       	ld	r22, Z
    1a28:	71 81       	ldd	r23, Z+1	; 0x01
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e2       	ldi	r20, 0x20	; 32
    1a34:	51 e4       	ldi	r21, 0x41	; 65
    1a36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9e af       	std	Y+62, r25	; 0x3e
    1a4c:	8d af       	std	Y+61, r24	; 0x3d
    1a4e:	0f c0       	rjmp	.+30     	; 0x1a6e <LCD_sendCommand+0x478>
    1a50:	89 e1       	ldi	r24, 0x19	; 25
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9c af       	std	Y+60, r25	; 0x3c
    1a56:	8b af       	std	Y+59, r24	; 0x3b
    1a58:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a5a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCD_sendCommand+0x466>
    1a60:	9c af       	std	Y+60, r25	; 0x3c
    1a62:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a66:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	9e af       	std	Y+62, r25	; 0x3e
    1a6c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a70:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	69 f7       	brne	.-38     	; 0x1a50 <LCD_sendCommand+0x45a>
    1a76:	16 c0       	rjmp	.+44     	; 0x1aa4 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ff 96       	adiw	r30, 0x3f	; 63
    1a7c:	60 81       	ld	r22, Z
    1a7e:	71 81       	ldd	r23, Z+1	; 0x01
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	9e af       	std	Y+62, r25	; 0x3e
    1a8e:	8d af       	std	Y+61, r24	; 0x3d
    1a90:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a92:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a94:	9a af       	std	Y+58, r25	; 0x3a
    1a96:	89 af       	std	Y+57, r24	; 0x39
    1a98:	89 ad       	ldd	r24, Y+57	; 0x39
    1a9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <LCD_sendCommand+0x4a6>
    1aa0:	9a af       	std	Y+58, r25	; 0x3a
    1aa2:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	62 e0       	ldi	r22, 0x02	; 2
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a0 e8       	ldi	r26, 0x80	; 128
    1ab4:	bf e3       	ldi	r27, 0x3F	; 63
    1ab6:	8d ab       	std	Y+53, r24	; 0x35
    1ab8:	9e ab       	std	Y+54, r25	; 0x36
    1aba:	af ab       	std	Y+55, r26	; 0x37
    1abc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	6d a9       	ldd	r22, Y+53	; 0x35
    1ac0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ac2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ac4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a e7       	ldi	r20, 0x7A	; 122
    1acc:	53 e4       	ldi	r21, 0x43	; 67
    1ace:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	89 ab       	std	Y+49, r24	; 0x31
    1ad8:	9a ab       	std	Y+50, r25	; 0x32
    1ada:	ab ab       	std	Y+51, r26	; 0x33
    1adc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ade:	69 a9       	ldd	r22, Y+49	; 0x31
    1ae0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ae2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ae4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	98 ab       	std	Y+48, r25	; 0x30
    1afc:	8f a7       	std	Y+47, r24	; 0x2f
    1afe:	3f c0       	rjmp	.+126    	; 0x1b7e <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1b00:	69 a9       	ldd	r22, Y+49	; 0x31
    1b02:	7a a9       	ldd	r23, Y+50	; 0x32
    1b04:	8b a9       	ldd	r24, Y+51	; 0x33
    1b06:	9c a9       	ldd	r25, Y+52	; 0x34
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	4c f5       	brge	.+82     	; 0x1b6a <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b18:	6d a9       	ldd	r22, Y+53	; 0x35
    1b1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	98 ab       	std	Y+48, r25	; 0x30
    1b3e:	8f a7       	std	Y+47, r24	; 0x2f
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <LCD_sendCommand+0x56a>
    1b42:	89 e1       	ldi	r24, 0x19	; 25
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9e a7       	std	Y+46, r25	; 0x2e
    1b48:	8d a7       	std	Y+45, r24	; 0x2d
    1b4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <LCD_sendCommand+0x558>
    1b52:	9e a7       	std	Y+46, r25	; 0x2e
    1b54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b58:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	98 ab       	std	Y+48, r25	; 0x30
    1b5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b62:	98 a9       	ldd	r25, Y+48	; 0x30
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	69 f7       	brne	.-38     	; 0x1b42 <LCD_sendCommand+0x54c>
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b70:	9c a9       	ldd	r25, Y+52	; 0x34
    1b72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	98 ab       	std	Y+48, r25	; 0x30
    1b7c:	8f a7       	std	Y+47, r24	; 0x2f
    1b7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b80:	98 a9       	ldd	r25, Y+48	; 0x30
    1b82:	9c a7       	std	Y+44, r25	; 0x2c
    1b84:	8b a7       	std	Y+43, r24	; 0x2b
    1b86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b88:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LCD_sendCommand+0x594>
    1b8e:	9c a7       	std	Y+44, r25	; 0x2c
    1b90:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	62 e0       	ldi	r22, 0x02	; 2
    1b96:	41 e0       	ldi	r20, 0x01	; 1
    1b98:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	a0 e8       	ldi	r26, 0x80	; 128
    1ba2:	bf e3       	ldi	r27, 0x3F	; 63
    1ba4:	8f a3       	std	Y+39, r24	; 0x27
    1ba6:	98 a7       	std	Y+40, r25	; 0x28
    1ba8:	a9 a7       	std	Y+41, r26	; 0x29
    1baa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	6f a1       	ldd	r22, Y+39	; 0x27
    1bae:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb0:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a e7       	ldi	r20, 0x7A	; 122
    1bba:	53 e4       	ldi	r21, 0x43	; 67
    1bbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8b a3       	std	Y+35, r24	; 0x23
    1bc6:	9c a3       	std	Y+36, r25	; 0x24
    1bc8:	ad a3       	std	Y+37, r26	; 0x25
    1bca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bcc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bce:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1be0:	88 23       	and	r24, r24
    1be2:	2c f4       	brge	.+10     	; 0x1bee <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9a a3       	std	Y+34, r25	; 0x22
    1bea:	89 a3       	std	Y+33, r24	; 0x21
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1bee:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf0:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf2:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf4:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	4c f5       	brge	.+82     	; 0x1c58 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	6f a1       	ldd	r22, Y+39	; 0x27
    1c08:	78 a5       	ldd	r23, Y+40	; 0x28
    1c0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9a a3       	std	Y+34, r25	; 0x22
    1c2c:	89 a3       	std	Y+33, r24	; 0x21
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <LCD_sendCommand+0x658>
    1c30:	89 e1       	ldi	r24, 0x19	; 25
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	98 a3       	std	Y+32, r25	; 0x20
    1c36:	8f 8f       	std	Y+31, r24	; 0x1f
    1c38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c3a:	98 a1       	ldd	r25, Y+32	; 0x20
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_sendCommand+0x646>
    1c40:	98 a3       	std	Y+32, r25	; 0x20
    1c42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	89 a1       	ldd	r24, Y+33	; 0x21
    1c46:	9a a1       	ldd	r25, Y+34	; 0x22
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	9a a3       	std	Y+34, r25	; 0x22
    1c4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c50:	9a a1       	ldd	r25, Y+34	; 0x22
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <LCD_sendCommand+0x63a>
    1c56:	14 c0       	rjmp	.+40     	; 0x1c80 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9a a3       	std	Y+34, r25	; 0x22
    1c6a:	89 a3       	std	Y+33, r24	; 0x21
    1c6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c70:	9e 8f       	std	Y+30, r25	; 0x1e
    1c72:	8d 8f       	std	Y+29, r24	; 0x1d
    1c74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <LCD_sendCommand+0x682>
    1c7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1c80:	fe 01       	movw	r30, r28
    1c82:	ed 59       	subi	r30, 0x9D	; 157
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	80 81       	ld	r24, Z
    1c88:	98 2f       	mov	r25, r24
    1c8a:	91 70       	andi	r25, 0x01	; 1
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	63 e0       	ldi	r22, 0x03	; 3
    1c90:	49 2f       	mov	r20, r25
    1c92:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1c96:	fe 01       	movw	r30, r28
    1c98:	ed 59       	subi	r30, 0x9D	; 157
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	88 2f       	mov	r24, r24
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	82 70       	andi	r24, 0x02	; 2
    1ca4:	90 70       	andi	r25, 0x00	; 0
    1ca6:	95 95       	asr	r25
    1ca8:	87 95       	ror	r24
    1caa:	98 2f       	mov	r25, r24
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	64 e0       	ldi	r22, 0x04	; 4
    1cb0:	49 2f       	mov	r20, r25
    1cb2:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	ed 59       	subi	r30, 0x9D	; 157
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 81       	ld	r24, Z
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	84 70       	andi	r24, 0x04	; 4
    1cc4:	90 70       	andi	r25, 0x00	; 0
    1cc6:	95 95       	asr	r25
    1cc8:	87 95       	ror	r24
    1cca:	95 95       	asr	r25
    1ccc:	87 95       	ror	r24
    1cce:	98 2f       	mov	r25, r24
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	65 e0       	ldi	r22, 0x05	; 5
    1cd4:	49 2f       	mov	r20, r25
    1cd6:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1cda:	fe 01       	movw	r30, r28
    1cdc:	ed 59       	subi	r30, 0x9D	; 157
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	80 81       	ld	r24, Z
    1ce2:	88 2f       	mov	r24, r24
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	88 70       	andi	r24, 0x08	; 8
    1ce8:	90 70       	andi	r25, 0x00	; 0
    1cea:	95 95       	asr	r25
    1cec:	87 95       	ror	r24
    1cee:	95 95       	asr	r25
    1cf0:	87 95       	ror	r24
    1cf2:	95 95       	asr	r25
    1cf4:	87 95       	ror	r24
    1cf6:	98 2f       	mov	r25, r24
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	66 e0       	ldi	r22, 0x06	; 6
    1cfc:	49 2f       	mov	r20, r25
    1cfe:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a0 e8       	ldi	r26, 0x80	; 128
    1d08:	bf e3       	ldi	r27, 0x3F	; 63
    1d0a:	89 8f       	std	Y+25, r24	; 0x19
    1d0c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d0e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d12:	69 8d       	ldd	r22, Y+25	; 0x19
    1d14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	4a e7       	ldi	r20, 0x7A	; 122
    1d20:	53 e4       	ldi	r21, 0x43	; 67
    1d22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	8d 8b       	std	Y+21, r24	; 0x15
    1d2c:	9e 8b       	std	Y+22, r25	; 0x16
    1d2e:	af 8b       	std	Y+23, r26	; 0x17
    1d30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d32:	6d 89       	ldd	r22, Y+21	; 0x15
    1d34:	7e 89       	ldd	r23, Y+22	; 0x16
    1d36:	8f 89       	ldd	r24, Y+23	; 0x17
    1d38:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e8       	ldi	r20, 0x80	; 128
    1d40:	5f e3       	ldi	r21, 0x3F	; 63
    1d42:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d46:	88 23       	and	r24, r24
    1d48:	2c f4       	brge	.+10     	; 0x1d54 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	9c 8b       	std	Y+20, r25	; 0x14
    1d50:	8b 8b       	std	Y+19, r24	; 0x13
    1d52:	3f c0       	rjmp	.+126    	; 0x1dd2 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1d54:	6d 89       	ldd	r22, Y+21	; 0x15
    1d56:	7e 89       	ldd	r23, Y+22	; 0x16
    1d58:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	3f ef       	ldi	r19, 0xFF	; 255
    1d60:	4f e7       	ldi	r20, 0x7F	; 127
    1d62:	57 e4       	ldi	r21, 0x47	; 71
    1d64:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d68:	18 16       	cp	r1, r24
    1d6a:	4c f5       	brge	.+82     	; 0x1dbe <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e2       	ldi	r20, 0x20	; 32
    1d7a:	51 e4       	ldi	r21, 0x41	; 65
    1d7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9c 8b       	std	Y+20, r25	; 0x14
    1d92:	8b 8b       	std	Y+19, r24	; 0x13
    1d94:	0f c0       	rjmp	.+30     	; 0x1db4 <LCD_sendCommand+0x7be>
    1d96:	89 e1       	ldi	r24, 0x19	; 25
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	9a 8b       	std	Y+18, r25	; 0x12
    1d9c:	89 8b       	std	Y+17, r24	; 0x11
    1d9e:	89 89       	ldd	r24, Y+17	; 0x11
    1da0:	9a 89       	ldd	r25, Y+18	; 0x12
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_sendCommand+0x7ac>
    1da6:	9a 8b       	std	Y+18, r25	; 0x12
    1da8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1daa:	8b 89       	ldd	r24, Y+19	; 0x13
    1dac:	9c 89       	ldd	r25, Y+20	; 0x14
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	9c 8b       	std	Y+20, r25	; 0x14
    1db2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db4:	8b 89       	ldd	r24, Y+19	; 0x13
    1db6:	9c 89       	ldd	r25, Y+20	; 0x14
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	69 f7       	brne	.-38     	; 0x1d96 <LCD_sendCommand+0x7a0>
    1dbc:	14 c0       	rjmp	.+40     	; 0x1de6 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9c 8b       	std	Y+20, r25	; 0x14
    1dd0:	8b 8b       	std	Y+19, r24	; 0x13
    1dd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd6:	98 8b       	std	Y+16, r25	; 0x10
    1dd8:	8f 87       	std	Y+15, r24	; 0x0f
    1dda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ddc:	98 89       	ldd	r25, Y+16	; 0x10
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD_sendCommand+0x7e8>
    1de2:	98 8b       	std	Y+16, r25	; 0x10
    1de4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	62 e0       	ldi	r22, 0x02	; 2
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a0 e8       	ldi	r26, 0x80	; 128
    1df6:	bf e3       	ldi	r27, 0x3F	; 63
    1df8:	8b 87       	std	Y+11, r24	; 0x0b
    1dfa:	9c 87       	std	Y+12, r25	; 0x0c
    1dfc:	ad 87       	std	Y+13, r26	; 0x0d
    1dfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4a e7       	ldi	r20, 0x7A	; 122
    1e0e:	53 e4       	ldi	r21, 0x43	; 67
    1e10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	8f 83       	std	Y+7, r24	; 0x07
    1e1a:	98 87       	std	Y+8, r25	; 0x08
    1e1c:	a9 87       	std	Y+9, r26	; 0x09
    1e1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e20:	6f 81       	ldd	r22, Y+7	; 0x07
    1e22:	78 85       	ldd	r23, Y+8	; 0x08
    1e24:	89 85       	ldd	r24, Y+9	; 0x09
    1e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e8       	ldi	r20, 0x80	; 128
    1e2e:	5f e3       	ldi	r21, 0x3F	; 63
    1e30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e34:	88 23       	and	r24, r24
    1e36:	2c f4       	brge	.+10     	; 0x1e42 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	3f c0       	rjmp	.+126    	; 0x1ec0 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1e42:	6f 81       	ldd	r22, Y+7	; 0x07
    1e44:	78 85       	ldd	r23, Y+8	; 0x08
    1e46:	89 85       	ldd	r24, Y+9	; 0x09
    1e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	3f ef       	ldi	r19, 0xFF	; 255
    1e4e:	4f e7       	ldi	r20, 0x7F	; 127
    1e50:	57 e4       	ldi	r21, 0x47	; 71
    1e52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e56:	18 16       	cp	r1, r24
    1e58:	4c f5       	brge	.+82     	; 0x1eac <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e2       	ldi	r20, 0x20	; 32
    1e68:	51 e4       	ldi	r21, 0x41	; 65
    1e6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	bc 01       	movw	r22, r24
    1e74:	cd 01       	movw	r24, r26
    1e76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9e 83       	std	Y+6, r25	; 0x06
    1e80:	8d 83       	std	Y+5, r24	; 0x05
    1e82:	0f c0       	rjmp	.+30     	; 0x1ea2 <LCD_sendCommand+0x8ac>
    1e84:	89 e1       	ldi	r24, 0x19	; 25
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9c 83       	std	Y+4, r25	; 0x04
    1e8a:	8b 83       	std	Y+3, r24	; 0x03
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <LCD_sendCommand+0x89a>
    1e94:	9c 83       	std	Y+4, r25	; 0x04
    1e96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	69 f7       	brne	.-38     	; 0x1e84 <LCD_sendCommand+0x88e>
    1eaa:	14 c0       	rjmp	.+40     	; 0x1ed4 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eac:	6f 81       	ldd	r22, Y+7	; 0x07
    1eae:	78 85       	ldd	r23, Y+8	; 0x08
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	9a 83       	std	Y+2, r25	; 0x02
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <LCD_sendCommand+0x8d6>
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1ed4:	cd 59       	subi	r28, 0x9D	; 157
    1ed6:	df 4f       	sbci	r29, 0xFF	; 255
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	08 95       	ret

00001eec <LCD_displayCharacter>:
/*
* Description :
* Display the required character on the screen
*/
void LCD_displayCharacter(uint8 data)
{
    1eec:	0f 93       	push	r16
    1eee:	1f 93       	push	r17
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	c3 56       	subi	r28, 0x63	; 99
    1efa:	d0 40       	sbci	r29, 0x00	; 0
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	fe 01       	movw	r30, r28
    1f08:	ed 59       	subi	r30, 0x9D	; 157
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	61 e0       	ldi	r22, 0x01	; 1
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e1 5a       	subi	r30, 0xA1	; 161
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a0 e8       	ldi	r26, 0x80	; 128
    1f24:	bf e3       	ldi	r27, 0x3F	; 63
    1f26:	80 83       	st	Z, r24
    1f28:	91 83       	std	Z+1, r25	; 0x01
    1f2a:	a2 83       	std	Z+2, r26	; 0x02
    1f2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2e:	8e 01       	movw	r16, r28
    1f30:	05 5a       	subi	r16, 0xA5	; 165
    1f32:	1f 4f       	sbci	r17, 0xFF	; 255
    1f34:	fe 01       	movw	r30, r28
    1f36:	e1 5a       	subi	r30, 0xA1	; 161
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	4a e7       	ldi	r20, 0x7A	; 122
    1f48:	53 e4       	ldi	r21, 0x43	; 67
    1f4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	f8 01       	movw	r30, r16
    1f54:	80 83       	st	Z, r24
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	a2 83       	std	Z+2, r26	; 0x02
    1f5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e5 5a       	subi	r30, 0xA5	; 165
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	60 81       	ld	r22, Z
    1f64:	71 81       	ldd	r23, Z+1	; 0x01
    1f66:	82 81       	ldd	r24, Z+2	; 0x02
    1f68:	93 81       	ldd	r25, Z+3	; 0x03
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e8       	ldi	r20, 0x80	; 128
    1f70:	5f e3       	ldi	r21, 0x3F	; 63
    1f72:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f76:	88 23       	and	r24, r24
    1f78:	44 f4       	brge	.+16     	; 0x1f8a <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e7 5a       	subi	r30, 0xA7	; 167
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	91 83       	std	Z+1, r25	; 0x01
    1f86:	80 83       	st	Z, r24
    1f88:	64 c0       	rjmp	.+200    	; 0x2052 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e5 5a       	subi	r30, 0xA5	; 165
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	60 81       	ld	r22, Z
    1f92:	71 81       	ldd	r23, Z+1	; 0x01
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	3f ef       	ldi	r19, 0xFF	; 255
    1f9c:	4f e7       	ldi	r20, 0x7F	; 127
    1f9e:	57 e4       	ldi	r21, 0x47	; 71
    1fa0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	0c f0       	brlt	.+2      	; 0x1faa <LCD_displayCharacter+0xbe>
    1fa8:	43 c0       	rjmp	.+134    	; 0x2030 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1faa:	fe 01       	movw	r30, r28
    1fac:	e1 5a       	subi	r30, 0xA1	; 161
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	60 81       	ld	r22, Z
    1fb2:	71 81       	ldd	r23, Z+1	; 0x01
    1fb4:	82 81       	ldd	r24, Z+2	; 0x02
    1fb6:	93 81       	ldd	r25, Z+3	; 0x03
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e2       	ldi	r20, 0x20	; 32
    1fbe:	51 e4       	ldi	r21, 0x41	; 65
    1fc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	8e 01       	movw	r16, r28
    1fca:	07 5a       	subi	r16, 0xA7	; 167
    1fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	f8 01       	movw	r30, r16
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
    1fe0:	1f c0       	rjmp	.+62     	; 0x2020 <LCD_displayCharacter+0x134>
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e9 5a       	subi	r30, 0xA9	; 169
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	89 e1       	ldi	r24, 0x19	; 25
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e9 5a       	subi	r30, 0xA9	; 169
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_displayCharacter+0x10e>
    1ffe:	fe 01       	movw	r30, r28
    2000:	e9 5a       	subi	r30, 0xA9	; 169
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2008:	de 01       	movw	r26, r28
    200a:	a7 5a       	subi	r26, 0xA7	; 167
    200c:	bf 4f       	sbci	r27, 0xFF	; 255
    200e:	fe 01       	movw	r30, r28
    2010:	e7 5a       	subi	r30, 0xA7	; 167
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	91 81       	ldd	r25, Z+1	; 0x01
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	11 96       	adiw	r26, 0x01	; 1
    201c:	9c 93       	st	X, r25
    201e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2020:	fe 01       	movw	r30, r28
    2022:	e7 5a       	subi	r30, 0xA7	; 167
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	91 81       	ldd	r25, Z+1	; 0x01
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	d1 f6       	brne	.-76     	; 0x1fe2 <LCD_displayCharacter+0xf6>
    202e:	27 c0       	rjmp	.+78     	; 0x207e <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2030:	8e 01       	movw	r16, r28
    2032:	07 5a       	subi	r16, 0xA7	; 167
    2034:	1f 4f       	sbci	r17, 0xFF	; 255
    2036:	fe 01       	movw	r30, r28
    2038:	e5 5a       	subi	r30, 0xA5	; 165
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	60 81       	ld	r22, Z
    203e:	71 81       	ldd	r23, Z+1	; 0x01
    2040:	82 81       	ldd	r24, Z+2	; 0x02
    2042:	93 81       	ldd	r25, Z+3	; 0x03
    2044:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	f8 01       	movw	r30, r16
    204e:	91 83       	std	Z+1, r25	; 0x01
    2050:	80 83       	st	Z, r24
    2052:	de 01       	movw	r26, r28
    2054:	ab 5a       	subi	r26, 0xAB	; 171
    2056:	bf 4f       	sbci	r27, 0xFF	; 255
    2058:	fe 01       	movw	r30, r28
    205a:	e7 5a       	subi	r30, 0xA7	; 167
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 81       	ld	r24, Z
    2060:	91 81       	ldd	r25, Z+1	; 0x01
    2062:	8d 93       	st	X+, r24
    2064:	9c 93       	st	X, r25
    2066:	fe 01       	movw	r30, r28
    2068:	eb 5a       	subi	r30, 0xAB	; 171
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 81       	ld	r24, Z
    206e:	91 81       	ldd	r25, Z+1	; 0x01
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <LCD_displayCharacter+0x184>
    2074:	fe 01       	movw	r30, r28
    2076:	eb 5a       	subi	r30, 0xAB	; 171
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	91 83       	std	Z+1, r25	; 0x01
    207c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	62 e0       	ldi	r22, 0x02	; 2
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    2088:	fe 01       	movw	r30, r28
    208a:	ef 5a       	subi	r30, 0xAF	; 175
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 e8       	ldi	r26, 0x80	; 128
    2094:	bf e3       	ldi	r27, 0x3F	; 63
    2096:	80 83       	st	Z, r24
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	a2 83       	std	Z+2, r26	; 0x02
    209c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209e:	8e 01       	movw	r16, r28
    20a0:	03 5b       	subi	r16, 0xB3	; 179
    20a2:	1f 4f       	sbci	r17, 0xFF	; 255
    20a4:	fe 01       	movw	r30, r28
    20a6:	ef 5a       	subi	r30, 0xAF	; 175
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a e7       	ldi	r20, 0x7A	; 122
    20b8:	53 e4       	ldi	r21, 0x43	; 67
    20ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	f8 01       	movw	r30, r16
    20c4:	80 83       	st	Z, r24
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	a2 83       	std	Z+2, r26	; 0x02
    20ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20cc:	fe 01       	movw	r30, r28
    20ce:	e3 5b       	subi	r30, 0xB3	; 179
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	44 f4       	brge	.+16     	; 0x20fa <LCD_displayCharacter+0x20e>
		__ticks = 1;
    20ea:	fe 01       	movw	r30, r28
    20ec:	e5 5b       	subi	r30, 0xB5	; 181
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	91 83       	std	Z+1, r25	; 0x01
    20f6:	80 83       	st	Z, r24
    20f8:	64 c0       	rjmp	.+200    	; 0x21c2 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    20fa:	fe 01       	movw	r30, r28
    20fc:	e3 5b       	subi	r30, 0xB3	; 179
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	60 81       	ld	r22, Z
    2102:	71 81       	ldd	r23, Z+1	; 0x01
    2104:	82 81       	ldd	r24, Z+2	; 0x02
    2106:	93 81       	ldd	r25, Z+3	; 0x03
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	3f ef       	ldi	r19, 0xFF	; 255
    210c:	4f e7       	ldi	r20, 0x7F	; 127
    210e:	57 e4       	ldi	r21, 0x47	; 71
    2110:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2114:	18 16       	cp	r1, r24
    2116:	0c f0       	brlt	.+2      	; 0x211a <LCD_displayCharacter+0x22e>
    2118:	43 c0       	rjmp	.+134    	; 0x21a0 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211a:	fe 01       	movw	r30, r28
    211c:	ef 5a       	subi	r30, 0xAF	; 175
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	60 81       	ld	r22, Z
    2122:	71 81       	ldd	r23, Z+1	; 0x01
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	93 81       	ldd	r25, Z+3	; 0x03
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e2       	ldi	r20, 0x20	; 32
    212e:	51 e4       	ldi	r21, 0x41	; 65
    2130:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	8e 01       	movw	r16, r28
    213a:	05 5b       	subi	r16, 0xB5	; 181
    213c:	1f 4f       	sbci	r17, 0xFF	; 255
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	f8 01       	movw	r30, r16
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	80 83       	st	Z, r24
    2150:	1f c0       	rjmp	.+62     	; 0x2190 <LCD_displayCharacter+0x2a4>
    2152:	fe 01       	movw	r30, r28
    2154:	e7 5b       	subi	r30, 0xB7	; 183
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	89 e1       	ldi	r24, 0x19	; 25
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	91 83       	std	Z+1, r25	; 0x01
    215e:	80 83       	st	Z, r24
    2160:	fe 01       	movw	r30, r28
    2162:	e7 5b       	subi	r30, 0xB7	; 183
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <LCD_displayCharacter+0x27e>
    216e:	fe 01       	movw	r30, r28
    2170:	e7 5b       	subi	r30, 0xB7	; 183
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2178:	de 01       	movw	r26, r28
    217a:	a5 5b       	subi	r26, 0xB5	; 181
    217c:	bf 4f       	sbci	r27, 0xFF	; 255
    217e:	fe 01       	movw	r30, r28
    2180:	e5 5b       	subi	r30, 0xB5	; 181
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 81       	ld	r24, Z
    2186:	91 81       	ldd	r25, Z+1	; 0x01
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	11 96       	adiw	r26, 0x01	; 1
    218c:	9c 93       	st	X, r25
    218e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2190:	fe 01       	movw	r30, r28
    2192:	e5 5b       	subi	r30, 0xB5	; 181
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 81       	ld	r24, Z
    2198:	91 81       	ldd	r25, Z+1	; 0x01
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	d1 f6       	brne	.-76     	; 0x2152 <LCD_displayCharacter+0x266>
    219e:	27 c0       	rjmp	.+78     	; 0x21ee <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a0:	8e 01       	movw	r16, r28
    21a2:	05 5b       	subi	r16, 0xB5	; 181
    21a4:	1f 4f       	sbci	r17, 0xFF	; 255
    21a6:	fe 01       	movw	r30, r28
    21a8:	e3 5b       	subi	r30, 0xB3	; 179
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	60 81       	ld	r22, Z
    21ae:	71 81       	ldd	r23, Z+1	; 0x01
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	93 81       	ldd	r25, Z+3	; 0x03
    21b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	f8 01       	movw	r30, r16
    21be:	91 83       	std	Z+1, r25	; 0x01
    21c0:	80 83       	st	Z, r24
    21c2:	de 01       	movw	r26, r28
    21c4:	a9 5b       	subi	r26, 0xB9	; 185
    21c6:	bf 4f       	sbci	r27, 0xFF	; 255
    21c8:	fe 01       	movw	r30, r28
    21ca:	e5 5b       	subi	r30, 0xB5	; 181
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	8d 93       	st	X+, r24
    21d4:	9c 93       	st	X, r25
    21d6:	fe 01       	movw	r30, r28
    21d8:	e9 5b       	subi	r30, 0xB9	; 185
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	80 81       	ld	r24, Z
    21de:	91 81       	ldd	r25, Z+1	; 0x01
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <LCD_displayCharacter+0x2f4>
    21e4:	fe 01       	movw	r30, r28
    21e6:	e9 5b       	subi	r30, 0xB9	; 185
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    21ee:	fe 01       	movw	r30, r28
    21f0:	ed 59       	subi	r30, 0x9D	; 157
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 81       	ld	r24, Z
    21f6:	88 2f       	mov	r24, r24
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	80 71       	andi	r24, 0x10	; 16
    21fc:	90 70       	andi	r25, 0x00	; 0
    21fe:	95 95       	asr	r25
    2200:	87 95       	ror	r24
    2202:	95 95       	asr	r25
    2204:	87 95       	ror	r24
    2206:	95 95       	asr	r25
    2208:	87 95       	ror	r24
    220a:	95 95       	asr	r25
    220c:	87 95       	ror	r24
    220e:	98 2f       	mov	r25, r24
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	63 e0       	ldi	r22, 0x03	; 3
    2214:	49 2f       	mov	r20, r25
    2216:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    221a:	fe 01       	movw	r30, r28
    221c:	ed 59       	subi	r30, 0x9D	; 157
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	80 81       	ld	r24, Z
    2222:	88 2f       	mov	r24, r24
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	80 72       	andi	r24, 0x20	; 32
    2228:	90 70       	andi	r25, 0x00	; 0
    222a:	95 95       	asr	r25
    222c:	87 95       	ror	r24
    222e:	95 95       	asr	r25
    2230:	87 95       	ror	r24
    2232:	95 95       	asr	r25
    2234:	87 95       	ror	r24
    2236:	95 95       	asr	r25
    2238:	87 95       	ror	r24
    223a:	95 95       	asr	r25
    223c:	87 95       	ror	r24
    223e:	98 2f       	mov	r25, r24
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	64 e0       	ldi	r22, 0x04	; 4
    2244:	49 2f       	mov	r20, r25
    2246:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    224a:	fe 01       	movw	r30, r28
    224c:	ed 59       	subi	r30, 0x9D	; 157
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	80 74       	andi	r24, 0x40	; 64
    2258:	90 70       	andi	r25, 0x00	; 0
    225a:	08 2e       	mov	r0, r24
    225c:	89 2f       	mov	r24, r25
    225e:	00 0c       	add	r0, r0
    2260:	88 1f       	adc	r24, r24
    2262:	99 0b       	sbc	r25, r25
    2264:	00 0c       	add	r0, r0
    2266:	88 1f       	adc	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	98 2f       	mov	r25, r24
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	65 e0       	ldi	r22, 0x05	; 5
    2270:	49 2f       	mov	r20, r25
    2272:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2276:	fe 01       	movw	r30, r28
    2278:	ed 59       	subi	r30, 0x9D	; 157
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 81       	ld	r24, Z
    227e:	98 2f       	mov	r25, r24
    2280:	99 1f       	adc	r25, r25
    2282:	99 27       	eor	r25, r25
    2284:	99 1f       	adc	r25, r25
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	66 e0       	ldi	r22, 0x06	; 6
    228a:	49 2f       	mov	r20, r25
    228c:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    2290:	fe 01       	movw	r30, r28
    2292:	ed 5b       	subi	r30, 0xBD	; 189
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	a0 e8       	ldi	r26, 0x80	; 128
    229c:	bf e3       	ldi	r27, 0x3F	; 63
    229e:	80 83       	st	Z, r24
    22a0:	91 83       	std	Z+1, r25	; 0x01
    22a2:	a2 83       	std	Z+2, r26	; 0x02
    22a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a6:	8e 01       	movw	r16, r28
    22a8:	01 5c       	subi	r16, 0xC1	; 193
    22aa:	1f 4f       	sbci	r17, 0xFF	; 255
    22ac:	fe 01       	movw	r30, r28
    22ae:	ed 5b       	subi	r30, 0xBD	; 189
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	60 81       	ld	r22, Z
    22b4:	71 81       	ldd	r23, Z+1	; 0x01
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	93 81       	ldd	r25, Z+3	; 0x03
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	4a e7       	ldi	r20, 0x7A	; 122
    22c0:	53 e4       	ldi	r21, 0x43	; 67
    22c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	f8 01       	movw	r30, r16
    22cc:	80 83       	st	Z, r24
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	a2 83       	std	Z+2, r26	; 0x02
    22d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22d4:	fe 01       	movw	r30, r28
    22d6:	ff 96       	adiw	r30, 0x3f	; 63
    22d8:	60 81       	ld	r22, Z
    22da:	71 81       	ldd	r23, Z+1	; 0x01
    22dc:	82 81       	ldd	r24, Z+2	; 0x02
    22de:	93 81       	ldd	r25, Z+3	; 0x03
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e8       	ldi	r20, 0x80	; 128
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22ec:	88 23       	and	r24, r24
    22ee:	2c f4       	brge	.+10     	; 0x22fa <LCD_displayCharacter+0x40e>
		__ticks = 1;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9e af       	std	Y+62, r25	; 0x3e
    22f6:	8d af       	std	Y+61, r24	; 0x3d
    22f8:	46 c0       	rjmp	.+140    	; 0x2386 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    22fa:	fe 01       	movw	r30, r28
    22fc:	ff 96       	adiw	r30, 0x3f	; 63
    22fe:	60 81       	ld	r22, Z
    2300:	71 81       	ldd	r23, Z+1	; 0x01
    2302:	82 81       	ldd	r24, Z+2	; 0x02
    2304:	93 81       	ldd	r25, Z+3	; 0x03
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	3f ef       	ldi	r19, 0xFF	; 255
    230a:	4f e7       	ldi	r20, 0x7F	; 127
    230c:	57 e4       	ldi	r21, 0x47	; 71
    230e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2312:	18 16       	cp	r1, r24
    2314:	64 f5       	brge	.+88     	; 0x236e <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2316:	fe 01       	movw	r30, r28
    2318:	ed 5b       	subi	r30, 0xBD	; 189
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	60 81       	ld	r22, Z
    231e:	71 81       	ldd	r23, Z+1	; 0x01
    2320:	82 81       	ldd	r24, Z+2	; 0x02
    2322:	93 81       	ldd	r25, Z+3	; 0x03
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e2       	ldi	r20, 0x20	; 32
    232a:	51 e4       	ldi	r21, 0x41	; 65
    232c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	bc 01       	movw	r22, r24
    2336:	cd 01       	movw	r24, r26
    2338:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	9e af       	std	Y+62, r25	; 0x3e
    2342:	8d af       	std	Y+61, r24	; 0x3d
    2344:	0f c0       	rjmp	.+30     	; 0x2364 <LCD_displayCharacter+0x478>
    2346:	89 e1       	ldi	r24, 0x19	; 25
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	9c af       	std	Y+60, r25	; 0x3c
    234c:	8b af       	std	Y+59, r24	; 0x3b
    234e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2350:	9c ad       	ldd	r25, Y+60	; 0x3c
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <LCD_displayCharacter+0x466>
    2356:	9c af       	std	Y+60, r25	; 0x3c
    2358:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235a:	8d ad       	ldd	r24, Y+61	; 0x3d
    235c:	9e ad       	ldd	r25, Y+62	; 0x3e
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	9e af       	std	Y+62, r25	; 0x3e
    2362:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2364:	8d ad       	ldd	r24, Y+61	; 0x3d
    2366:	9e ad       	ldd	r25, Y+62	; 0x3e
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	69 f7       	brne	.-38     	; 0x2346 <LCD_displayCharacter+0x45a>
    236c:	16 c0       	rjmp	.+44     	; 0x239a <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236e:	fe 01       	movw	r30, r28
    2370:	ff 96       	adiw	r30, 0x3f	; 63
    2372:	60 81       	ld	r22, Z
    2374:	71 81       	ldd	r23, Z+1	; 0x01
    2376:	82 81       	ldd	r24, Z+2	; 0x02
    2378:	93 81       	ldd	r25, Z+3	; 0x03
    237a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	9e af       	std	Y+62, r25	; 0x3e
    2384:	8d af       	std	Y+61, r24	; 0x3d
    2386:	8d ad       	ldd	r24, Y+61	; 0x3d
    2388:	9e ad       	ldd	r25, Y+62	; 0x3e
    238a:	9a af       	std	Y+58, r25	; 0x3a
    238c:	89 af       	std	Y+57, r24	; 0x39
    238e:	89 ad       	ldd	r24, Y+57	; 0x39
    2390:	9a ad       	ldd	r25, Y+58	; 0x3a
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <LCD_displayCharacter+0x4a6>
    2396:	9a af       	std	Y+58, r25	; 0x3a
    2398:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	62 e0       	ldi	r22, 0x02	; 2
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	a0 e8       	ldi	r26, 0x80	; 128
    23aa:	bf e3       	ldi	r27, 0x3F	; 63
    23ac:	8d ab       	std	Y+53, r24	; 0x35
    23ae:	9e ab       	std	Y+54, r25	; 0x36
    23b0:	af ab       	std	Y+55, r26	; 0x37
    23b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b4:	6d a9       	ldd	r22, Y+53	; 0x35
    23b6:	7e a9       	ldd	r23, Y+54	; 0x36
    23b8:	8f a9       	ldd	r24, Y+55	; 0x37
    23ba:	98 ad       	ldd	r25, Y+56	; 0x38
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	4a e7       	ldi	r20, 0x7A	; 122
    23c2:	53 e4       	ldi	r21, 0x43	; 67
    23c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	89 ab       	std	Y+49, r24	; 0x31
    23ce:	9a ab       	std	Y+50, r25	; 0x32
    23d0:	ab ab       	std	Y+51, r26	; 0x33
    23d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23d4:	69 a9       	ldd	r22, Y+49	; 0x31
    23d6:	7a a9       	ldd	r23, Y+50	; 0x32
    23d8:	8b a9       	ldd	r24, Y+51	; 0x33
    23da:	9c a9       	ldd	r25, Y+52	; 0x34
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e8       	ldi	r20, 0x80	; 128
    23e2:	5f e3       	ldi	r21, 0x3F	; 63
    23e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23e8:	88 23       	and	r24, r24
    23ea:	2c f4       	brge	.+10     	; 0x23f6 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	98 ab       	std	Y+48, r25	; 0x30
    23f2:	8f a7       	std	Y+47, r24	; 0x2f
    23f4:	3f c0       	rjmp	.+126    	; 0x2474 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    23f6:	69 a9       	ldd	r22, Y+49	; 0x31
    23f8:	7a a9       	ldd	r23, Y+50	; 0x32
    23fa:	8b a9       	ldd	r24, Y+51	; 0x33
    23fc:	9c a9       	ldd	r25, Y+52	; 0x34
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	3f ef       	ldi	r19, 0xFF	; 255
    2402:	4f e7       	ldi	r20, 0x7F	; 127
    2404:	57 e4       	ldi	r21, 0x47	; 71
    2406:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    240a:	18 16       	cp	r1, r24
    240c:	4c f5       	brge	.+82     	; 0x2460 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240e:	6d a9       	ldd	r22, Y+53	; 0x35
    2410:	7e a9       	ldd	r23, Y+54	; 0x36
    2412:	8f a9       	ldd	r24, Y+55	; 0x37
    2414:	98 ad       	ldd	r25, Y+56	; 0x38
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e2       	ldi	r20, 0x20	; 32
    241c:	51 e4       	ldi	r21, 0x41	; 65
    241e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	98 ab       	std	Y+48, r25	; 0x30
    2434:	8f a7       	std	Y+47, r24	; 0x2f
    2436:	0f c0       	rjmp	.+30     	; 0x2456 <LCD_displayCharacter+0x56a>
    2438:	89 e1       	ldi	r24, 0x19	; 25
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	9e a7       	std	Y+46, r25	; 0x2e
    243e:	8d a7       	std	Y+45, r24	; 0x2d
    2440:	8d a5       	ldd	r24, Y+45	; 0x2d
    2442:	9e a5       	ldd	r25, Y+46	; 0x2e
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <LCD_displayCharacter+0x558>
    2448:	9e a7       	std	Y+46, r25	; 0x2e
    244a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244c:	8f a5       	ldd	r24, Y+47	; 0x2f
    244e:	98 a9       	ldd	r25, Y+48	; 0x30
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	98 ab       	std	Y+48, r25	; 0x30
    2454:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2456:	8f a5       	ldd	r24, Y+47	; 0x2f
    2458:	98 a9       	ldd	r25, Y+48	; 0x30
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	69 f7       	brne	.-38     	; 0x2438 <LCD_displayCharacter+0x54c>
    245e:	14 c0       	rjmp	.+40     	; 0x2488 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2460:	69 a9       	ldd	r22, Y+49	; 0x31
    2462:	7a a9       	ldd	r23, Y+50	; 0x32
    2464:	8b a9       	ldd	r24, Y+51	; 0x33
    2466:	9c a9       	ldd	r25, Y+52	; 0x34
    2468:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	98 ab       	std	Y+48, r25	; 0x30
    2472:	8f a7       	std	Y+47, r24	; 0x2f
    2474:	8f a5       	ldd	r24, Y+47	; 0x2f
    2476:	98 a9       	ldd	r25, Y+48	; 0x30
    2478:	9c a7       	std	Y+44, r25	; 0x2c
    247a:	8b a7       	std	Y+43, r24	; 0x2b
    247c:	8b a5       	ldd	r24, Y+43	; 0x2b
    247e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <LCD_displayCharacter+0x594>
    2484:	9c a7       	std	Y+44, r25	; 0x2c
    2486:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	62 e0       	ldi	r22, 0x02	; 2
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a0 e8       	ldi	r26, 0x80	; 128
    2498:	bf e3       	ldi	r27, 0x3F	; 63
    249a:	8f a3       	std	Y+39, r24	; 0x27
    249c:	98 a7       	std	Y+40, r25	; 0x28
    249e:	a9 a7       	std	Y+41, r26	; 0x29
    24a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a2:	6f a1       	ldd	r22, Y+39	; 0x27
    24a4:	78 a5       	ldd	r23, Y+40	; 0x28
    24a6:	89 a5       	ldd	r24, Y+41	; 0x29
    24a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	4a e7       	ldi	r20, 0x7A	; 122
    24b0:	53 e4       	ldi	r21, 0x43	; 67
    24b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	8b a3       	std	Y+35, r24	; 0x23
    24bc:	9c a3       	std	Y+36, r25	; 0x24
    24be:	ad a3       	std	Y+37, r26	; 0x25
    24c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24c2:	6b a1       	ldd	r22, Y+35	; 0x23
    24c4:	7c a1       	ldd	r23, Y+36	; 0x24
    24c6:	8d a1       	ldd	r24, Y+37	; 0x25
    24c8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e8       	ldi	r20, 0x80	; 128
    24d0:	5f e3       	ldi	r21, 0x3F	; 63
    24d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24d6:	88 23       	and	r24, r24
    24d8:	2c f4       	brge	.+10     	; 0x24e4 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	9a a3       	std	Y+34, r25	; 0x22
    24e0:	89 a3       	std	Y+33, r24	; 0x21
    24e2:	3f c0       	rjmp	.+126    	; 0x2562 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    24e4:	6b a1       	ldd	r22, Y+35	; 0x23
    24e6:	7c a1       	ldd	r23, Y+36	; 0x24
    24e8:	8d a1       	ldd	r24, Y+37	; 0x25
    24ea:	9e a1       	ldd	r25, Y+38	; 0x26
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	3f ef       	ldi	r19, 0xFF	; 255
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	57 e4       	ldi	r21, 0x47	; 71
    24f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	4c f5       	brge	.+82     	; 0x254e <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	6f a1       	ldd	r22, Y+39	; 0x27
    24fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2500:	89 a5       	ldd	r24, Y+41	; 0x29
    2502:	9a a5       	ldd	r25, Y+42	; 0x2a
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e2       	ldi	r20, 0x20	; 32
    250a:	51 e4       	ldi	r21, 0x41	; 65
    250c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9a a3       	std	Y+34, r25	; 0x22
    2522:	89 a3       	std	Y+33, r24	; 0x21
    2524:	0f c0       	rjmp	.+30     	; 0x2544 <LCD_displayCharacter+0x658>
    2526:	89 e1       	ldi	r24, 0x19	; 25
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	98 a3       	std	Y+32, r25	; 0x20
    252c:	8f 8f       	std	Y+31, r24	; 0x1f
    252e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2530:	98 a1       	ldd	r25, Y+32	; 0x20
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <LCD_displayCharacter+0x646>
    2536:	98 a3       	std	Y+32, r25	; 0x20
    2538:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253a:	89 a1       	ldd	r24, Y+33	; 0x21
    253c:	9a a1       	ldd	r25, Y+34	; 0x22
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	9a a3       	std	Y+34, r25	; 0x22
    2542:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2544:	89 a1       	ldd	r24, Y+33	; 0x21
    2546:	9a a1       	ldd	r25, Y+34	; 0x22
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	69 f7       	brne	.-38     	; 0x2526 <LCD_displayCharacter+0x63a>
    254c:	14 c0       	rjmp	.+40     	; 0x2576 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254e:	6b a1       	ldd	r22, Y+35	; 0x23
    2550:	7c a1       	ldd	r23, Y+36	; 0x24
    2552:	8d a1       	ldd	r24, Y+37	; 0x25
    2554:	9e a1       	ldd	r25, Y+38	; 0x26
    2556:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9a a3       	std	Y+34, r25	; 0x22
    2560:	89 a3       	std	Y+33, r24	; 0x21
    2562:	89 a1       	ldd	r24, Y+33	; 0x21
    2564:	9a a1       	ldd	r25, Y+34	; 0x22
    2566:	9e 8f       	std	Y+30, r25	; 0x1e
    2568:	8d 8f       	std	Y+29, r24	; 0x1d
    256a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    256c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <LCD_displayCharacter+0x682>
    2572:	9e 8f       	std	Y+30, r25	; 0x1e
    2574:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2576:	fe 01       	movw	r30, r28
    2578:	ed 59       	subi	r30, 0x9D	; 157
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	80 81       	ld	r24, Z
    257e:	98 2f       	mov	r25, r24
    2580:	91 70       	andi	r25, 0x01	; 1
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	63 e0       	ldi	r22, 0x03	; 3
    2586:	49 2f       	mov	r20, r25
    2588:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    258c:	fe 01       	movw	r30, r28
    258e:	ed 59       	subi	r30, 0x9D	; 157
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 81       	ld	r24, Z
    2594:	88 2f       	mov	r24, r24
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	82 70       	andi	r24, 0x02	; 2
    259a:	90 70       	andi	r25, 0x00	; 0
    259c:	95 95       	asr	r25
    259e:	87 95       	ror	r24
    25a0:	98 2f       	mov	r25, r24
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	64 e0       	ldi	r22, 0x04	; 4
    25a6:	49 2f       	mov	r20, r25
    25a8:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    25ac:	fe 01       	movw	r30, r28
    25ae:	ed 59       	subi	r30, 0x9D	; 157
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	80 81       	ld	r24, Z
    25b4:	88 2f       	mov	r24, r24
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	84 70       	andi	r24, 0x04	; 4
    25ba:	90 70       	andi	r25, 0x00	; 0
    25bc:	95 95       	asr	r25
    25be:	87 95       	ror	r24
    25c0:	95 95       	asr	r25
    25c2:	87 95       	ror	r24
    25c4:	98 2f       	mov	r25, r24
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	65 e0       	ldi	r22, 0x05	; 5
    25ca:	49 2f       	mov	r20, r25
    25cc:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    25d0:	fe 01       	movw	r30, r28
    25d2:	ed 59       	subi	r30, 0x9D	; 157
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	80 81       	ld	r24, Z
    25d8:	88 2f       	mov	r24, r24
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	88 70       	andi	r24, 0x08	; 8
    25de:	90 70       	andi	r25, 0x00	; 0
    25e0:	95 95       	asr	r25
    25e2:	87 95       	ror	r24
    25e4:	95 95       	asr	r25
    25e6:	87 95       	ror	r24
    25e8:	95 95       	asr	r25
    25ea:	87 95       	ror	r24
    25ec:	98 2f       	mov	r25, r24
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	66 e0       	ldi	r22, 0x06	; 6
    25f2:	49 2f       	mov	r20, r25
    25f4:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a0 e8       	ldi	r26, 0x80	; 128
    25fe:	bf e3       	ldi	r27, 0x3F	; 63
    2600:	89 8f       	std	Y+25, r24	; 0x19
    2602:	9a 8f       	std	Y+26, r25	; 0x1a
    2604:	ab 8f       	std	Y+27, r26	; 0x1b
    2606:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2608:	69 8d       	ldd	r22, Y+25	; 0x19
    260a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    260c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a e7       	ldi	r20, 0x7A	; 122
    2616:	53 e4       	ldi	r21, 0x43	; 67
    2618:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8d 8b       	std	Y+21, r24	; 0x15
    2622:	9e 8b       	std	Y+22, r25	; 0x16
    2624:	af 8b       	std	Y+23, r26	; 0x17
    2626:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2628:	6d 89       	ldd	r22, Y+21	; 0x15
    262a:	7e 89       	ldd	r23, Y+22	; 0x16
    262c:	8f 89       	ldd	r24, Y+23	; 0x17
    262e:	98 8d       	ldd	r25, Y+24	; 0x18
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	2c f4       	brge	.+10     	; 0x264a <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9c 8b       	std	Y+20, r25	; 0x14
    2646:	8b 8b       	std	Y+19, r24	; 0x13
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    264a:	6d 89       	ldd	r22, Y+21	; 0x15
    264c:	7e 89       	ldd	r23, Y+22	; 0x16
    264e:	8f 89       	ldd	r24, Y+23	; 0x17
    2650:	98 8d       	ldd	r25, Y+24	; 0x18
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	4f e7       	ldi	r20, 0x7F	; 127
    2658:	57 e4       	ldi	r21, 0x47	; 71
    265a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    265e:	18 16       	cp	r1, r24
    2660:	4c f5       	brge	.+82     	; 0x26b4 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2662:	69 8d       	ldd	r22, Y+25	; 0x19
    2664:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2666:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2668:	9c 8d       	ldd	r25, Y+28	; 0x1c
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9c 8b       	std	Y+20, r25	; 0x14
    2688:	8b 8b       	std	Y+19, r24	; 0x13
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <LCD_displayCharacter+0x7be>
    268c:	89 e1       	ldi	r24, 0x19	; 25
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	9a 8b       	std	Y+18, r25	; 0x12
    2692:	89 8b       	std	Y+17, r24	; 0x11
    2694:	89 89       	ldd	r24, Y+17	; 0x11
    2696:	9a 89       	ldd	r25, Y+18	; 0x12
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_displayCharacter+0x7ac>
    269c:	9a 8b       	std	Y+18, r25	; 0x12
    269e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	8b 89       	ldd	r24, Y+19	; 0x13
    26a2:	9c 89       	ldd	r25, Y+20	; 0x14
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9c 8b       	std	Y+20, r25	; 0x14
    26a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	8b 89       	ldd	r24, Y+19	; 0x13
    26ac:	9c 89       	ldd	r25, Y+20	; 0x14
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	69 f7       	brne	.-38     	; 0x268c <LCD_displayCharacter+0x7a0>
    26b2:	14 c0       	rjmp	.+40     	; 0x26dc <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b4:	6d 89       	ldd	r22, Y+21	; 0x15
    26b6:	7e 89       	ldd	r23, Y+22	; 0x16
    26b8:	8f 89       	ldd	r24, Y+23	; 0x17
    26ba:	98 8d       	ldd	r25, Y+24	; 0x18
    26bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9c 8b       	std	Y+20, r25	; 0x14
    26c6:	8b 8b       	std	Y+19, r24	; 0x13
    26c8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ca:	9c 89       	ldd	r25, Y+20	; 0x14
    26cc:	98 8b       	std	Y+16, r25	; 0x10
    26ce:	8f 87       	std	Y+15, r24	; 0x0f
    26d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d2:	98 89       	ldd	r25, Y+16	; 0x10
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <LCD_displayCharacter+0x7e8>
    26d8:	98 8b       	std	Y+16, r25	; 0x10
    26da:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	62 e0       	ldi	r22, 0x02	; 2
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	a0 e8       	ldi	r26, 0x80	; 128
    26ec:	bf e3       	ldi	r27, 0x3F	; 63
    26ee:	8b 87       	std	Y+11, r24	; 0x0b
    26f0:	9c 87       	std	Y+12, r25	; 0x0c
    26f2:	ad 87       	std	Y+13, r26	; 0x0d
    26f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	4a e7       	ldi	r20, 0x7A	; 122
    2704:	53 e4       	ldi	r21, 0x43	; 67
    2706:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	8f 83       	std	Y+7, r24	; 0x07
    2710:	98 87       	std	Y+8, r25	; 0x08
    2712:	a9 87       	std	Y+9, r26	; 0x09
    2714:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2716:	6f 81       	ldd	r22, Y+7	; 0x07
    2718:	78 85       	ldd	r23, Y+8	; 0x08
    271a:	89 85       	ldd	r24, Y+9	; 0x09
    271c:	9a 85       	ldd	r25, Y+10	; 0x0a
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e8       	ldi	r20, 0x80	; 128
    2724:	5f e3       	ldi	r21, 0x3F	; 63
    2726:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    272a:	88 23       	and	r24, r24
    272c:	2c f4       	brge	.+10     	; 0x2738 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	9e 83       	std	Y+6, r25	; 0x06
    2734:	8d 83       	std	Y+5, r24	; 0x05
    2736:	3f c0       	rjmp	.+126    	; 0x27b6 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2738:	6f 81       	ldd	r22, Y+7	; 0x07
    273a:	78 85       	ldd	r23, Y+8	; 0x08
    273c:	89 85       	ldd	r24, Y+9	; 0x09
    273e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	3f ef       	ldi	r19, 0xFF	; 255
    2744:	4f e7       	ldi	r20, 0x7F	; 127
    2746:	57 e4       	ldi	r21, 0x47	; 71
    2748:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    274c:	18 16       	cp	r1, r24
    274e:	4c f5       	brge	.+82     	; 0x27a2 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2750:	6b 85       	ldd	r22, Y+11	; 0x0b
    2752:	7c 85       	ldd	r23, Y+12	; 0x0c
    2754:	8d 85       	ldd	r24, Y+13	; 0x0d
    2756:	9e 85       	ldd	r25, Y+14	; 0x0e
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e2       	ldi	r20, 0x20	; 32
    275e:	51 e4       	ldi	r21, 0x41	; 65
    2760:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	bc 01       	movw	r22, r24
    276a:	cd 01       	movw	r24, r26
    276c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9e 83       	std	Y+6, r25	; 0x06
    2776:	8d 83       	std	Y+5, r24	; 0x05
    2778:	0f c0       	rjmp	.+30     	; 0x2798 <LCD_displayCharacter+0x8ac>
    277a:	89 e1       	ldi	r24, 0x19	; 25
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	9c 83       	std	Y+4, r25	; 0x04
    2780:	8b 83       	std	Y+3, r24	; 0x03
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	9c 81       	ldd	r25, Y+4	; 0x04
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	f1 f7       	brne	.-4      	; 0x2786 <LCD_displayCharacter+0x89a>
    278a:	9c 83       	std	Y+4, r25	; 0x04
    278c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278e:	8d 81       	ldd	r24, Y+5	; 0x05
    2790:	9e 81       	ldd	r25, Y+6	; 0x06
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	9e 83       	std	Y+6, r25	; 0x06
    2796:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2798:	8d 81       	ldd	r24, Y+5	; 0x05
    279a:	9e 81       	ldd	r25, Y+6	; 0x06
    279c:	00 97       	sbiw	r24, 0x00	; 0
    279e:	69 f7       	brne	.-38     	; 0x277a <LCD_displayCharacter+0x88e>
    27a0:	14 c0       	rjmp	.+40     	; 0x27ca <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a2:	6f 81       	ldd	r22, Y+7	; 0x07
    27a4:	78 85       	ldd	r23, Y+8	; 0x08
    27a6:	89 85       	ldd	r24, Y+9	; 0x09
    27a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	9e 83       	std	Y+6, r25	; 0x06
    27b4:	8d 83       	std	Y+5, r24	; 0x05
    27b6:	8d 81       	ldd	r24, Y+5	; 0x05
    27b8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ba:	9a 83       	std	Y+2, r25	; 0x02
    27bc:	89 83       	std	Y+1, r24	; 0x01
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	9a 81       	ldd	r25, Y+2	; 0x02
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <LCD_displayCharacter+0x8d6>
    27c6:	9a 83       	std	Y+2, r25	; 0x02
    27c8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    27ca:	cd 59       	subi	r28, 0x9D	; 157
    27cc:	df 4f       	sbci	r29, 0xFF	; 255
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	1f 91       	pop	r17
    27de:	0f 91       	pop	r16
    27e0:	08 95       	ret

000027e2 <LCD_displayString>:
/*
* Description :
* Display the required string on the screen
*/
void LCD_displayString(const char *Str)
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <LCD_displayString+0x6>
    27e8:	0f 92       	push	r0
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	9b 83       	std	Y+3, r25	; 0x03
    27f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27f2:	19 82       	std	Y+1, r1	; 0x01
    27f4:	0e c0       	rjmp	.+28     	; 0x2812 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	28 2f       	mov	r18, r24
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	8a 81       	ldd	r24, Y+2	; 0x02
    27fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2800:	fc 01       	movw	r30, r24
    2802:	e2 0f       	add	r30, r18
    2804:	f3 1f       	adc	r31, r19
    2806:	80 81       	ld	r24, Z
    2808:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_displayCharacter>
		i++;
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	8f 5f       	subi	r24, 0xFF	; 255
    2810:	89 83       	std	Y+1, r24	; 0x01
* Display the required string on the screen
*/
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	8a 81       	ldd	r24, Y+2	; 0x02
    281a:	9b 81       	ldd	r25, Y+3	; 0x03
    281c:	fc 01       	movw	r30, r24
    281e:	e2 0f       	add	r30, r18
    2820:	f3 1f       	adc	r31, r19
    2822:	80 81       	ld	r24, Z
    2824:	88 23       	and	r24, r24
    2826:	39 f7       	brne	.-50     	; 0x27f6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	08 95       	ret

00002834 <LCD_moveCursor>:
/*
* Description :
* Move the cursor to a specified row and column index on the screen
*/
void LCD_moveCursor(uint8 row,uint8 col)
{
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	00 d0       	rcall	.+0      	; 0x283a <LCD_moveCursor+0x6>
    283a:	00 d0       	rcall	.+0      	; 0x283c <LCD_moveCursor+0x8>
    283c:	0f 92       	push	r0
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	8a 83       	std	Y+2, r24	; 0x02
    2844:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	3d 83       	std	Y+5, r19	; 0x05
    284e:	2c 83       	std	Y+4, r18	; 0x04
    2850:	8c 81       	ldd	r24, Y+4	; 0x04
    2852:	9d 81       	ldd	r25, Y+5	; 0x05
    2854:	81 30       	cpi	r24, 0x01	; 1
    2856:	91 05       	cpc	r25, r1
    2858:	c1 f0       	breq	.+48     	; 0x288a <LCD_moveCursor+0x56>
    285a:	2c 81       	ldd	r18, Y+4	; 0x04
    285c:	3d 81       	ldd	r19, Y+5	; 0x05
    285e:	22 30       	cpi	r18, 0x02	; 2
    2860:	31 05       	cpc	r19, r1
    2862:	2c f4       	brge	.+10     	; 0x286e <LCD_moveCursor+0x3a>
    2864:	8c 81       	ldd	r24, Y+4	; 0x04
    2866:	9d 81       	ldd	r25, Y+5	; 0x05
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	61 f0       	breq	.+24     	; 0x2884 <LCD_moveCursor+0x50>
    286c:	19 c0       	rjmp	.+50     	; 0x28a0 <LCD_moveCursor+0x6c>
    286e:	2c 81       	ldd	r18, Y+4	; 0x04
    2870:	3d 81       	ldd	r19, Y+5	; 0x05
    2872:	22 30       	cpi	r18, 0x02	; 2
    2874:	31 05       	cpc	r19, r1
    2876:	69 f0       	breq	.+26     	; 0x2892 <LCD_moveCursor+0x5e>
    2878:	8c 81       	ldd	r24, Y+4	; 0x04
    287a:	9d 81       	ldd	r25, Y+5	; 0x05
    287c:	83 30       	cpi	r24, 0x03	; 3
    287e:	91 05       	cpc	r25, r1
    2880:	61 f0       	breq	.+24     	; 0x289a <LCD_moveCursor+0x66>
    2882:	0e c0       	rjmp	.+28     	; 0x28a0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	0b c0       	rjmp	.+22     	; 0x28a0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	80 5c       	subi	r24, 0xC0	; 192
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	07 c0       	rjmp	.+14     	; 0x28a0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	80 5f       	subi	r24, 0xF0	; 240
    2896:	89 83       	std	Y+1, r24	; 0x01
    2898:	03 c0       	rjmp	.+6      	; 0x28a0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	80 5b       	subi	r24, 0xB0	; 176
    289e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	80 68       	ori	r24, 0x80	; 128
    28a4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
}
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <LCD_displayStringRowColumn>:
/*
* Description :
* Display the required string in a specified row and column index on the screen
*/
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	00 d0       	rcall	.+0      	; 0x28be <LCD_displayStringRowColumn+0x6>
    28be:	00 d0       	rcall	.+0      	; 0x28c0 <LCD_displayStringRowColumn+0x8>
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	6a 83       	std	Y+2, r22	; 0x02
    28c8:	5c 83       	std	Y+4, r21	; 0x04
    28ca:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	6a 81       	ldd	r22, Y+2	; 0x02
    28d0:	0e 94 1a 14 	call	0x2834	; 0x2834 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    28d4:	8b 81       	ldd	r24, Y+3	; 0x03
    28d6:	9c 81       	ldd	r25, Y+4	; 0x04
    28d8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_displayString>
}
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <LCD_intgerToString>:
/*
* Description :
* Display the required decimal value on the screen
*/
void LCD_intgerToString(int data)
{
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
    28f2:	62 97       	sbiw	r28, 0x12	; 18
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	9a 8b       	std	Y+18, r25	; 0x12
    2900:	89 8b       	std	Y+17, r24	; 0x11
  char buff[16]; /* String to hold the ascii result */
  itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2902:	89 89       	ldd	r24, Y+17	; 0x11
    2904:	9a 89       	ldd	r25, Y+18	; 0x12
    2906:	9e 01       	movw	r18, r28
    2908:	2f 5f       	subi	r18, 0xFF	; 255
    290a:	3f 4f       	sbci	r19, 0xFF	; 255
    290c:	b9 01       	movw	r22, r18
    290e:	4a e0       	ldi	r20, 0x0A	; 10
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <itoa>
  LCD_displayString(buff); /* Display the string */
    2916:	ce 01       	movw	r24, r28
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_displayString>
}
    291e:	62 96       	adiw	r28, 0x12	; 18
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <LCD_clearScreen>:
/*
* Description :
* Send the clear screen command
*/
void LCD_clearScreen(void)
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
}
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <main>:
 */


#include "lcd.h"

int main(void){
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    294c:	0e 94 49 0a 	call	0x1492	; 0x1492 <LCD_init>
	//LCD_SendData('A');
	LCD_displayString("shery");
    2950:	80 e6       	ldi	r24, 0x60	; 96
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_displayString>
    2958:	ff cf       	rjmp	.-2      	; 0x2958 <main+0x14>

0000295a <__prologue_saves__>:
    295a:	2f 92       	push	r2
    295c:	3f 92       	push	r3
    295e:	4f 92       	push	r4
    2960:	5f 92       	push	r5
    2962:	6f 92       	push	r6
    2964:	7f 92       	push	r7
    2966:	8f 92       	push	r8
    2968:	9f 92       	push	r9
    296a:	af 92       	push	r10
    296c:	bf 92       	push	r11
    296e:	cf 92       	push	r12
    2970:	df 92       	push	r13
    2972:	ef 92       	push	r14
    2974:	ff 92       	push	r15
    2976:	0f 93       	push	r16
    2978:	1f 93       	push	r17
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	ca 1b       	sub	r28, r26
    2984:	db 0b       	sbc	r29, r27
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	de bf       	out	0x3e, r29	; 62
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	cd bf       	out	0x3d, r28	; 61
    2990:	09 94       	ijmp

00002992 <__epilogue_restores__>:
    2992:	2a 88       	ldd	r2, Y+18	; 0x12
    2994:	39 88       	ldd	r3, Y+17	; 0x11
    2996:	48 88       	ldd	r4, Y+16	; 0x10
    2998:	5f 84       	ldd	r5, Y+15	; 0x0f
    299a:	6e 84       	ldd	r6, Y+14	; 0x0e
    299c:	7d 84       	ldd	r7, Y+13	; 0x0d
    299e:	8c 84       	ldd	r8, Y+12	; 0x0c
    29a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    29a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    29a4:	b9 84       	ldd	r11, Y+9	; 0x09
    29a6:	c8 84       	ldd	r12, Y+8	; 0x08
    29a8:	df 80       	ldd	r13, Y+7	; 0x07
    29aa:	ee 80       	ldd	r14, Y+6	; 0x06
    29ac:	fd 80       	ldd	r15, Y+5	; 0x05
    29ae:	0c 81       	ldd	r16, Y+4	; 0x04
    29b0:	1b 81       	ldd	r17, Y+3	; 0x03
    29b2:	aa 81       	ldd	r26, Y+2	; 0x02
    29b4:	b9 81       	ldd	r27, Y+1	; 0x01
    29b6:	ce 0f       	add	r28, r30
    29b8:	d1 1d       	adc	r29, r1
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
    29c4:	ed 01       	movw	r28, r26
    29c6:	08 95       	ret

000029c8 <itoa>:
    29c8:	fb 01       	movw	r30, r22
    29ca:	9f 01       	movw	r18, r30
    29cc:	e8 94       	clt
    29ce:	42 30       	cpi	r20, 0x02	; 2
    29d0:	c4 f0       	brlt	.+48     	; 0x2a02 <itoa+0x3a>
    29d2:	45 32       	cpi	r20, 0x25	; 37
    29d4:	b4 f4       	brge	.+44     	; 0x2a02 <itoa+0x3a>
    29d6:	4a 30       	cpi	r20, 0x0A	; 10
    29d8:	29 f4       	brne	.+10     	; 0x29e4 <itoa+0x1c>
    29da:	97 fb       	bst	r25, 7
    29dc:	1e f4       	brtc	.+6      	; 0x29e4 <itoa+0x1c>
    29de:	90 95       	com	r25
    29e0:	81 95       	neg	r24
    29e2:	9f 4f       	sbci	r25, 0xFF	; 255
    29e4:	64 2f       	mov	r22, r20
    29e6:	77 27       	eor	r23, r23
    29e8:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__udivmodhi4>
    29ec:	80 5d       	subi	r24, 0xD0	; 208
    29ee:	8a 33       	cpi	r24, 0x3A	; 58
    29f0:	0c f0       	brlt	.+2      	; 0x29f4 <itoa+0x2c>
    29f2:	89 5d       	subi	r24, 0xD9	; 217
    29f4:	81 93       	st	Z+, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	a1 f7       	brne	.-24     	; 0x29e4 <itoa+0x1c>
    29fc:	16 f4       	brtc	.+4      	; 0x2a02 <itoa+0x3a>
    29fe:	5d e2       	ldi	r21, 0x2D	; 45
    2a00:	51 93       	st	Z+, r21
    2a02:	10 82       	st	Z, r1
    2a04:	c9 01       	movw	r24, r18
    2a06:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <strrev>

00002a0a <strrev>:
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	67 2f       	mov	r22, r23
    2a10:	71 91       	ld	r23, Z+
    2a12:	77 23       	and	r23, r23
    2a14:	e1 f7       	brne	.-8      	; 0x2a0e <strrev+0x4>
    2a16:	32 97       	sbiw	r30, 0x02	; 2
    2a18:	04 c0       	rjmp	.+8      	; 0x2a22 <strrev+0x18>
    2a1a:	7c 91       	ld	r23, X
    2a1c:	6d 93       	st	X+, r22
    2a1e:	70 83       	st	Z, r23
    2a20:	62 91       	ld	r22, -Z
    2a22:	ae 17       	cp	r26, r30
    2a24:	bf 07       	cpc	r27, r31
    2a26:	c8 f3       	brcs	.-14     	; 0x2a1a <strrev+0x10>
    2a28:	08 95       	ret

00002a2a <__udivmodhi4>:
    2a2a:	aa 1b       	sub	r26, r26
    2a2c:	bb 1b       	sub	r27, r27
    2a2e:	51 e1       	ldi	r21, 0x11	; 17
    2a30:	07 c0       	rjmp	.+14     	; 0x2a40 <__udivmodhi4_ep>

00002a32 <__udivmodhi4_loop>:
    2a32:	aa 1f       	adc	r26, r26
    2a34:	bb 1f       	adc	r27, r27
    2a36:	a6 17       	cp	r26, r22
    2a38:	b7 07       	cpc	r27, r23
    2a3a:	10 f0       	brcs	.+4      	; 0x2a40 <__udivmodhi4_ep>
    2a3c:	a6 1b       	sub	r26, r22
    2a3e:	b7 0b       	sbc	r27, r23

00002a40 <__udivmodhi4_ep>:
    2a40:	88 1f       	adc	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	5a 95       	dec	r21
    2a46:	a9 f7       	brne	.-22     	; 0x2a32 <__udivmodhi4_loop>
    2a48:	80 95       	com	r24
    2a4a:	90 95       	com	r25
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	cd 01       	movw	r24, r26
    2a50:	08 95       	ret

00002a52 <_exit>:
    2a52:	f8 94       	cli

00002a54 <__stop_program>:
    2a54:	ff cf       	rjmp	.-2      	; 0x2a54 <__stop_program>
